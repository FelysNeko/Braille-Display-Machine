
first_code.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003edc  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08004070  08004070  00014070  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004088  08004088  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08004088  08004088  00014088  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004090  08004090  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004090  08004090  00014090  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004094  08004094  00014094  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004098  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000013c  2000000c  080040a4  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000148  080040a4  00020148  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ce26  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001b02  00000000  00000000  0002cea5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000cd8  00000000  00000000  0002e9a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a1c  00000000  00000000  0002f680  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001680a  00000000  00000000  0003009c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000e5e3  00000000  00000000  000468a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00095042  00000000  00000000  00054e89  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000036e4  00000000  00000000  000e9ecc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  000ed5b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08004058 	.word	0x08004058

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	08004058 	.word	0x08004058

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b970 	b.w	80004cc <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9e08      	ldr	r6, [sp, #32]
 800020a:	460d      	mov	r5, r1
 800020c:	4604      	mov	r4, r0
 800020e:	460f      	mov	r7, r1
 8000210:	2b00      	cmp	r3, #0
 8000212:	d14a      	bne.n	80002aa <__udivmoddi4+0xa6>
 8000214:	428a      	cmp	r2, r1
 8000216:	4694      	mov	ip, r2
 8000218:	d965      	bls.n	80002e6 <__udivmoddi4+0xe2>
 800021a:	fab2 f382 	clz	r3, r2
 800021e:	b143      	cbz	r3, 8000232 <__udivmoddi4+0x2e>
 8000220:	fa02 fc03 	lsl.w	ip, r2, r3
 8000224:	f1c3 0220 	rsb	r2, r3, #32
 8000228:	409f      	lsls	r7, r3
 800022a:	fa20 f202 	lsr.w	r2, r0, r2
 800022e:	4317      	orrs	r7, r2
 8000230:	409c      	lsls	r4, r3
 8000232:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000236:	fa1f f58c 	uxth.w	r5, ip
 800023a:	fbb7 f1fe 	udiv	r1, r7, lr
 800023e:	0c22      	lsrs	r2, r4, #16
 8000240:	fb0e 7711 	mls	r7, lr, r1, r7
 8000244:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000248:	fb01 f005 	mul.w	r0, r1, r5
 800024c:	4290      	cmp	r0, r2
 800024e:	d90a      	bls.n	8000266 <__udivmoddi4+0x62>
 8000250:	eb1c 0202 	adds.w	r2, ip, r2
 8000254:	f101 37ff 	add.w	r7, r1, #4294967295
 8000258:	f080 811c 	bcs.w	8000494 <__udivmoddi4+0x290>
 800025c:	4290      	cmp	r0, r2
 800025e:	f240 8119 	bls.w	8000494 <__udivmoddi4+0x290>
 8000262:	3902      	subs	r1, #2
 8000264:	4462      	add	r2, ip
 8000266:	1a12      	subs	r2, r2, r0
 8000268:	b2a4      	uxth	r4, r4
 800026a:	fbb2 f0fe 	udiv	r0, r2, lr
 800026e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000272:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000276:	fb00 f505 	mul.w	r5, r0, r5
 800027a:	42a5      	cmp	r5, r4
 800027c:	d90a      	bls.n	8000294 <__udivmoddi4+0x90>
 800027e:	eb1c 0404 	adds.w	r4, ip, r4
 8000282:	f100 32ff 	add.w	r2, r0, #4294967295
 8000286:	f080 8107 	bcs.w	8000498 <__udivmoddi4+0x294>
 800028a:	42a5      	cmp	r5, r4
 800028c:	f240 8104 	bls.w	8000498 <__udivmoddi4+0x294>
 8000290:	4464      	add	r4, ip
 8000292:	3802      	subs	r0, #2
 8000294:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000298:	1b64      	subs	r4, r4, r5
 800029a:	2100      	movs	r1, #0
 800029c:	b11e      	cbz	r6, 80002a6 <__udivmoddi4+0xa2>
 800029e:	40dc      	lsrs	r4, r3
 80002a0:	2300      	movs	r3, #0
 80002a2:	e9c6 4300 	strd	r4, r3, [r6]
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d908      	bls.n	80002c0 <__udivmoddi4+0xbc>
 80002ae:	2e00      	cmp	r6, #0
 80002b0:	f000 80ed 	beq.w	800048e <__udivmoddi4+0x28a>
 80002b4:	2100      	movs	r1, #0
 80002b6:	e9c6 0500 	strd	r0, r5, [r6]
 80002ba:	4608      	mov	r0, r1
 80002bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c0:	fab3 f183 	clz	r1, r3
 80002c4:	2900      	cmp	r1, #0
 80002c6:	d149      	bne.n	800035c <__udivmoddi4+0x158>
 80002c8:	42ab      	cmp	r3, r5
 80002ca:	d302      	bcc.n	80002d2 <__udivmoddi4+0xce>
 80002cc:	4282      	cmp	r2, r0
 80002ce:	f200 80f8 	bhi.w	80004c2 <__udivmoddi4+0x2be>
 80002d2:	1a84      	subs	r4, r0, r2
 80002d4:	eb65 0203 	sbc.w	r2, r5, r3
 80002d8:	2001      	movs	r0, #1
 80002da:	4617      	mov	r7, r2
 80002dc:	2e00      	cmp	r6, #0
 80002de:	d0e2      	beq.n	80002a6 <__udivmoddi4+0xa2>
 80002e0:	e9c6 4700 	strd	r4, r7, [r6]
 80002e4:	e7df      	b.n	80002a6 <__udivmoddi4+0xa2>
 80002e6:	b902      	cbnz	r2, 80002ea <__udivmoddi4+0xe6>
 80002e8:	deff      	udf	#255	; 0xff
 80002ea:	fab2 f382 	clz	r3, r2
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	f040 8090 	bne.w	8000414 <__udivmoddi4+0x210>
 80002f4:	1a8a      	subs	r2, r1, r2
 80002f6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fa:	fa1f fe8c 	uxth.w	lr, ip
 80002fe:	2101      	movs	r1, #1
 8000300:	fbb2 f5f7 	udiv	r5, r2, r7
 8000304:	fb07 2015 	mls	r0, r7, r5, r2
 8000308:	0c22      	lsrs	r2, r4, #16
 800030a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800030e:	fb0e f005 	mul.w	r0, lr, r5
 8000312:	4290      	cmp	r0, r2
 8000314:	d908      	bls.n	8000328 <__udivmoddi4+0x124>
 8000316:	eb1c 0202 	adds.w	r2, ip, r2
 800031a:	f105 38ff 	add.w	r8, r5, #4294967295
 800031e:	d202      	bcs.n	8000326 <__udivmoddi4+0x122>
 8000320:	4290      	cmp	r0, r2
 8000322:	f200 80cb 	bhi.w	80004bc <__udivmoddi4+0x2b8>
 8000326:	4645      	mov	r5, r8
 8000328:	1a12      	subs	r2, r2, r0
 800032a:	b2a4      	uxth	r4, r4
 800032c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000330:	fb07 2210 	mls	r2, r7, r0, r2
 8000334:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000338:	fb0e fe00 	mul.w	lr, lr, r0
 800033c:	45a6      	cmp	lr, r4
 800033e:	d908      	bls.n	8000352 <__udivmoddi4+0x14e>
 8000340:	eb1c 0404 	adds.w	r4, ip, r4
 8000344:	f100 32ff 	add.w	r2, r0, #4294967295
 8000348:	d202      	bcs.n	8000350 <__udivmoddi4+0x14c>
 800034a:	45a6      	cmp	lr, r4
 800034c:	f200 80bb 	bhi.w	80004c6 <__udivmoddi4+0x2c2>
 8000350:	4610      	mov	r0, r2
 8000352:	eba4 040e 	sub.w	r4, r4, lr
 8000356:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800035a:	e79f      	b.n	800029c <__udivmoddi4+0x98>
 800035c:	f1c1 0720 	rsb	r7, r1, #32
 8000360:	408b      	lsls	r3, r1
 8000362:	fa22 fc07 	lsr.w	ip, r2, r7
 8000366:	ea4c 0c03 	orr.w	ip, ip, r3
 800036a:	fa05 f401 	lsl.w	r4, r5, r1
 800036e:	fa20 f307 	lsr.w	r3, r0, r7
 8000372:	40fd      	lsrs	r5, r7
 8000374:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000378:	4323      	orrs	r3, r4
 800037a:	fbb5 f8f9 	udiv	r8, r5, r9
 800037e:	fa1f fe8c 	uxth.w	lr, ip
 8000382:	fb09 5518 	mls	r5, r9, r8, r5
 8000386:	0c1c      	lsrs	r4, r3, #16
 8000388:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800038c:	fb08 f50e 	mul.w	r5, r8, lr
 8000390:	42a5      	cmp	r5, r4
 8000392:	fa02 f201 	lsl.w	r2, r2, r1
 8000396:	fa00 f001 	lsl.w	r0, r0, r1
 800039a:	d90b      	bls.n	80003b4 <__udivmoddi4+0x1b0>
 800039c:	eb1c 0404 	adds.w	r4, ip, r4
 80003a0:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a4:	f080 8088 	bcs.w	80004b8 <__udivmoddi4+0x2b4>
 80003a8:	42a5      	cmp	r5, r4
 80003aa:	f240 8085 	bls.w	80004b8 <__udivmoddi4+0x2b4>
 80003ae:	f1a8 0802 	sub.w	r8, r8, #2
 80003b2:	4464      	add	r4, ip
 80003b4:	1b64      	subs	r4, r4, r5
 80003b6:	b29d      	uxth	r5, r3
 80003b8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003bc:	fb09 4413 	mls	r4, r9, r3, r4
 80003c0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003c4:	fb03 fe0e 	mul.w	lr, r3, lr
 80003c8:	45a6      	cmp	lr, r4
 80003ca:	d908      	bls.n	80003de <__udivmoddi4+0x1da>
 80003cc:	eb1c 0404 	adds.w	r4, ip, r4
 80003d0:	f103 35ff 	add.w	r5, r3, #4294967295
 80003d4:	d26c      	bcs.n	80004b0 <__udivmoddi4+0x2ac>
 80003d6:	45a6      	cmp	lr, r4
 80003d8:	d96a      	bls.n	80004b0 <__udivmoddi4+0x2ac>
 80003da:	3b02      	subs	r3, #2
 80003dc:	4464      	add	r4, ip
 80003de:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003e2:	fba3 9502 	umull	r9, r5, r3, r2
 80003e6:	eba4 040e 	sub.w	r4, r4, lr
 80003ea:	42ac      	cmp	r4, r5
 80003ec:	46c8      	mov	r8, r9
 80003ee:	46ae      	mov	lr, r5
 80003f0:	d356      	bcc.n	80004a0 <__udivmoddi4+0x29c>
 80003f2:	d053      	beq.n	800049c <__udivmoddi4+0x298>
 80003f4:	b156      	cbz	r6, 800040c <__udivmoddi4+0x208>
 80003f6:	ebb0 0208 	subs.w	r2, r0, r8
 80003fa:	eb64 040e 	sbc.w	r4, r4, lr
 80003fe:	fa04 f707 	lsl.w	r7, r4, r7
 8000402:	40ca      	lsrs	r2, r1
 8000404:	40cc      	lsrs	r4, r1
 8000406:	4317      	orrs	r7, r2
 8000408:	e9c6 7400 	strd	r7, r4, [r6]
 800040c:	4618      	mov	r0, r3
 800040e:	2100      	movs	r1, #0
 8000410:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000414:	f1c3 0120 	rsb	r1, r3, #32
 8000418:	fa02 fc03 	lsl.w	ip, r2, r3
 800041c:	fa20 f201 	lsr.w	r2, r0, r1
 8000420:	fa25 f101 	lsr.w	r1, r5, r1
 8000424:	409d      	lsls	r5, r3
 8000426:	432a      	orrs	r2, r5
 8000428:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800042c:	fa1f fe8c 	uxth.w	lr, ip
 8000430:	fbb1 f0f7 	udiv	r0, r1, r7
 8000434:	fb07 1510 	mls	r5, r7, r0, r1
 8000438:	0c11      	lsrs	r1, r2, #16
 800043a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800043e:	fb00 f50e 	mul.w	r5, r0, lr
 8000442:	428d      	cmp	r5, r1
 8000444:	fa04 f403 	lsl.w	r4, r4, r3
 8000448:	d908      	bls.n	800045c <__udivmoddi4+0x258>
 800044a:	eb1c 0101 	adds.w	r1, ip, r1
 800044e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000452:	d22f      	bcs.n	80004b4 <__udivmoddi4+0x2b0>
 8000454:	428d      	cmp	r5, r1
 8000456:	d92d      	bls.n	80004b4 <__udivmoddi4+0x2b0>
 8000458:	3802      	subs	r0, #2
 800045a:	4461      	add	r1, ip
 800045c:	1b49      	subs	r1, r1, r5
 800045e:	b292      	uxth	r2, r2
 8000460:	fbb1 f5f7 	udiv	r5, r1, r7
 8000464:	fb07 1115 	mls	r1, r7, r5, r1
 8000468:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800046c:	fb05 f10e 	mul.w	r1, r5, lr
 8000470:	4291      	cmp	r1, r2
 8000472:	d908      	bls.n	8000486 <__udivmoddi4+0x282>
 8000474:	eb1c 0202 	adds.w	r2, ip, r2
 8000478:	f105 38ff 	add.w	r8, r5, #4294967295
 800047c:	d216      	bcs.n	80004ac <__udivmoddi4+0x2a8>
 800047e:	4291      	cmp	r1, r2
 8000480:	d914      	bls.n	80004ac <__udivmoddi4+0x2a8>
 8000482:	3d02      	subs	r5, #2
 8000484:	4462      	add	r2, ip
 8000486:	1a52      	subs	r2, r2, r1
 8000488:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 800048c:	e738      	b.n	8000300 <__udivmoddi4+0xfc>
 800048e:	4631      	mov	r1, r6
 8000490:	4630      	mov	r0, r6
 8000492:	e708      	b.n	80002a6 <__udivmoddi4+0xa2>
 8000494:	4639      	mov	r1, r7
 8000496:	e6e6      	b.n	8000266 <__udivmoddi4+0x62>
 8000498:	4610      	mov	r0, r2
 800049a:	e6fb      	b.n	8000294 <__udivmoddi4+0x90>
 800049c:	4548      	cmp	r0, r9
 800049e:	d2a9      	bcs.n	80003f4 <__udivmoddi4+0x1f0>
 80004a0:	ebb9 0802 	subs.w	r8, r9, r2
 80004a4:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004a8:	3b01      	subs	r3, #1
 80004aa:	e7a3      	b.n	80003f4 <__udivmoddi4+0x1f0>
 80004ac:	4645      	mov	r5, r8
 80004ae:	e7ea      	b.n	8000486 <__udivmoddi4+0x282>
 80004b0:	462b      	mov	r3, r5
 80004b2:	e794      	b.n	80003de <__udivmoddi4+0x1da>
 80004b4:	4640      	mov	r0, r8
 80004b6:	e7d1      	b.n	800045c <__udivmoddi4+0x258>
 80004b8:	46d0      	mov	r8, sl
 80004ba:	e77b      	b.n	80003b4 <__udivmoddi4+0x1b0>
 80004bc:	3d02      	subs	r5, #2
 80004be:	4462      	add	r2, ip
 80004c0:	e732      	b.n	8000328 <__udivmoddi4+0x124>
 80004c2:	4608      	mov	r0, r1
 80004c4:	e70a      	b.n	80002dc <__udivmoddi4+0xd8>
 80004c6:	4464      	add	r4, ip
 80004c8:	3802      	subs	r0, #2
 80004ca:	e742      	b.n	8000352 <__udivmoddi4+0x14e>

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <motor1_on>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void motor1_on(TIM_HandleTypeDef *htim2){
 80004d0:	b480      	push	{r7}
 80004d2:	b083      	sub	sp, #12
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COMPARE(htim2,TIM_CHANNEL_1, 990);
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	f240 32de 	movw	r2, #990	; 0x3de
 80004e0:	635a      	str	r2, [r3, #52]	; 0x34
}
 80004e2:	bf00      	nop
 80004e4:	370c      	adds	r7, #12
 80004e6:	46bd      	mov	sp, r7
 80004e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ec:	4770      	bx	lr

080004ee <motor2_on>:
void motor2_on(TIM_HandleTypeDef *htim2){
 80004ee:	b480      	push	{r7}
 80004f0:	b083      	sub	sp, #12
 80004f2:	af00      	add	r7, sp, #0
 80004f4:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COMPARE(htim2,TIM_CHANNEL_2, 1030);
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	681b      	ldr	r3, [r3, #0]
 80004fa:	f240 4206 	movw	r2, #1030	; 0x406
 80004fe:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000500:	bf00      	nop
 8000502:	370c      	adds	r7, #12
 8000504:	46bd      	mov	sp, r7
 8000506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800050a:	4770      	bx	lr

0800050c <motor3_on>:
void motor3_on(TIM_HandleTypeDef *htim2){
 800050c:	b480      	push	{r7}
 800050e:	b083      	sub	sp, #12
 8000510:	af00      	add	r7, sp, #0
 8000512:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COMPARE(htim2,TIM_CHANNEL_3, 1080);
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	f44f 6287 	mov.w	r2, #1080	; 0x438
 800051c:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800051e:	bf00      	nop
 8000520:	370c      	adds	r7, #12
 8000522:	46bd      	mov	sp, r7
 8000524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000528:	4770      	bx	lr

0800052a <motor4_on>:
void motor4_on(TIM_HandleTypeDef *htim3){
 800052a:	b480      	push	{r7}
 800052c:	b083      	sub	sp, #12
 800052e:	af00      	add	r7, sp, #0
 8000530:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COMPARE(htim3,TIM_CHANNEL_1, 1080);
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	681b      	ldr	r3, [r3, #0]
 8000536:	f44f 6287 	mov.w	r2, #1080	; 0x438
 800053a:	635a      	str	r2, [r3, #52]	; 0x34
}
 800053c:	bf00      	nop
 800053e:	370c      	adds	r7, #12
 8000540:	46bd      	mov	sp, r7
 8000542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000546:	4770      	bx	lr

08000548 <motor5_on>:
void motor5_on(TIM_HandleTypeDef *htim3){
 8000548:	b480      	push	{r7}
 800054a:	b083      	sub	sp, #12
 800054c:	af00      	add	r7, sp, #0
 800054e:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COMPARE(htim3,TIM_CHANNEL_2, 1080);
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	f44f 6287 	mov.w	r2, #1080	; 0x438
 8000558:	639a      	str	r2, [r3, #56]	; 0x38
}
 800055a:	bf00      	nop
 800055c:	370c      	adds	r7, #12
 800055e:	46bd      	mov	sp, r7
 8000560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000564:	4770      	bx	lr

08000566 <motor6_on>:
void motor6_on(TIM_HandleTypeDef *htim3){
 8000566:	b480      	push	{r7}
 8000568:	b083      	sub	sp, #12
 800056a:	af00      	add	r7, sp, #0
 800056c:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COMPARE(htim3,TIM_CHANNEL_3, 1050);
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	681b      	ldr	r3, [r3, #0]
 8000572:	f240 421a 	movw	r2, #1050	; 0x41a
 8000576:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8000578:	bf00      	nop
 800057a:	370c      	adds	r7, #12
 800057c:	46bd      	mov	sp, r7
 800057e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000582:	4770      	bx	lr

08000584 <motor1_off>:
void motor1_off(TIM_HandleTypeDef *htim2){
 8000584:	b480      	push	{r7}
 8000586:	b083      	sub	sp, #12
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COMPARE(htim2,TIM_CHANNEL_1, 780);
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	f44f 7243 	mov.w	r2, #780	; 0x30c
 8000594:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000596:	bf00      	nop
 8000598:	370c      	adds	r7, #12
 800059a:	46bd      	mov	sp, r7
 800059c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a0:	4770      	bx	lr

080005a2 <motor2_off>:
void motor2_off(TIM_HandleTypeDef *htim2){
 80005a2:	b480      	push	{r7}
 80005a4:	b083      	sub	sp, #12
 80005a6:	af00      	add	r7, sp, #0
 80005a8:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COMPARE(htim2,TIM_CHANNEL_2, 850);
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	681b      	ldr	r3, [r3, #0]
 80005ae:	f240 3252 	movw	r2, #850	; 0x352
 80005b2:	639a      	str	r2, [r3, #56]	; 0x38
}
 80005b4:	bf00      	nop
 80005b6:	370c      	adds	r7, #12
 80005b8:	46bd      	mov	sp, r7
 80005ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005be:	4770      	bx	lr

080005c0 <motor3_off>:
void motor3_off(TIM_HandleTypeDef *htim2){
 80005c0:	b480      	push	{r7}
 80005c2:	b083      	sub	sp, #12
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COMPARE(htim2,TIM_CHANNEL_3, 1010);
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	f240 32f2 	movw	r2, #1010	; 0x3f2
 80005d0:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80005d2:	bf00      	nop
 80005d4:	370c      	adds	r7, #12
 80005d6:	46bd      	mov	sp, r7
 80005d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005dc:	4770      	bx	lr

080005de <motor4_off>:
void motor4_off(TIM_HandleTypeDef *htim3){
 80005de:	b480      	push	{r7}
 80005e0:	b083      	sub	sp, #12
 80005e2:	af00      	add	r7, sp, #0
 80005e4:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COMPARE(htim3,TIM_CHANNEL_1, 1360);
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	681b      	ldr	r3, [r3, #0]
 80005ea:	f44f 62aa 	mov.w	r2, #1360	; 0x550
 80005ee:	635a      	str	r2, [r3, #52]	; 0x34
}
 80005f0:	bf00      	nop
 80005f2:	370c      	adds	r7, #12
 80005f4:	46bd      	mov	sp, r7
 80005f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fa:	4770      	bx	lr

080005fc <motor5_off>:
void motor5_off(TIM_HandleTypeDef *htim3){
 80005fc:	b480      	push	{r7}
 80005fe:	b083      	sub	sp, #12
 8000600:	af00      	add	r7, sp, #0
 8000602:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COMPARE(htim3,TIM_CHANNEL_2, 1250);
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	f240 42e2 	movw	r2, #1250	; 0x4e2
 800060c:	639a      	str	r2, [r3, #56]	; 0x38
}
 800060e:	bf00      	nop
 8000610:	370c      	adds	r7, #12
 8000612:	46bd      	mov	sp, r7
 8000614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000618:	4770      	bx	lr

0800061a <motor6_off>:
void motor6_off(TIM_HandleTypeDef *htim3){
 800061a:	b480      	push	{r7}
 800061c:	b083      	sub	sp, #12
 800061e:	af00      	add	r7, sp, #0
 8000620:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COMPARE(htim3,TIM_CHANNEL_3, 1220);
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	f240 42c4 	movw	r2, #1220	; 0x4c4
 800062a:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800062c:	bf00      	nop
 800062e:	370c      	adds	r7, #12
 8000630:	46bd      	mov	sp, r7
 8000632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000636:	4770      	bx	lr

08000638 <display>:
void display(char c){
 8000638:	b580      	push	{r7, lr}
 800063a:	b082      	sub	sp, #8
 800063c:	af00      	add	r7, sp, #0
 800063e:	4603      	mov	r3, r0
 8000640:	71fb      	strb	r3, [r7, #7]
	if(c == 'a'){
 8000642:	79fb      	ldrb	r3, [r7, #7]
 8000644:	2b61      	cmp	r3, #97	; 0x61
 8000646:	d112      	bne.n	800066e <display+0x36>
		motor1_off(&htim2);
 8000648:	48ae      	ldr	r0, [pc, #696]	; (8000904 <display+0x2cc>)
 800064a:	f7ff ff9b 	bl	8000584 <motor1_off>
		motor2_off(&htim2);
 800064e:	48ad      	ldr	r0, [pc, #692]	; (8000904 <display+0x2cc>)
 8000650:	f7ff ffa7 	bl	80005a2 <motor2_off>
		motor3_off(&htim2);
 8000654:	48ab      	ldr	r0, [pc, #684]	; (8000904 <display+0x2cc>)
 8000656:	f7ff ffb3 	bl	80005c0 <motor3_off>
		motor4_on(&htim3);
 800065a:	48ab      	ldr	r0, [pc, #684]	; (8000908 <display+0x2d0>)
 800065c:	f7ff ff65 	bl	800052a <motor4_on>
		motor5_off(&htim3);
 8000660:	48a9      	ldr	r0, [pc, #676]	; (8000908 <display+0x2d0>)
 8000662:	f7ff ffcb 	bl	80005fc <motor5_off>
		motor6_off(&htim3);
 8000666:	48a8      	ldr	r0, [pc, #672]	; (8000908 <display+0x2d0>)
 8000668:	f7ff ffd7 	bl	800061a <motor6_off>
		motor4_on(&htim3);
		motor5_off(&htim3);
		motor6_on(&htim3);
	}

}
 800066c:	e229      	b.n	8000ac2 <display+0x48a>
	}else if(c == 'b'){
 800066e:	79fb      	ldrb	r3, [r7, #7]
 8000670:	2b62      	cmp	r3, #98	; 0x62
 8000672:	d112      	bne.n	800069a <display+0x62>
		motor1_off(&htim2);
 8000674:	48a3      	ldr	r0, [pc, #652]	; (8000904 <display+0x2cc>)
 8000676:	f7ff ff85 	bl	8000584 <motor1_off>
		motor2_off(&htim2);
 800067a:	48a2      	ldr	r0, [pc, #648]	; (8000904 <display+0x2cc>)
 800067c:	f7ff ff91 	bl	80005a2 <motor2_off>
		motor3_off(&htim2);
 8000680:	48a0      	ldr	r0, [pc, #640]	; (8000904 <display+0x2cc>)
 8000682:	f7ff ff9d 	bl	80005c0 <motor3_off>
		motor4_on(&htim3);
 8000686:	48a0      	ldr	r0, [pc, #640]	; (8000908 <display+0x2d0>)
 8000688:	f7ff ff4f 	bl	800052a <motor4_on>
		motor5_on(&htim3);
 800068c:	489e      	ldr	r0, [pc, #632]	; (8000908 <display+0x2d0>)
 800068e:	f7ff ff5b 	bl	8000548 <motor5_on>
		motor6_off(&htim3);
 8000692:	489d      	ldr	r0, [pc, #628]	; (8000908 <display+0x2d0>)
 8000694:	f7ff ffc1 	bl	800061a <motor6_off>
}
 8000698:	e213      	b.n	8000ac2 <display+0x48a>
	}else if(c == 'c'){
 800069a:	79fb      	ldrb	r3, [r7, #7]
 800069c:	2b63      	cmp	r3, #99	; 0x63
 800069e:	d112      	bne.n	80006c6 <display+0x8e>
		motor1_on(&htim2);
 80006a0:	4898      	ldr	r0, [pc, #608]	; (8000904 <display+0x2cc>)
 80006a2:	f7ff ff15 	bl	80004d0 <motor1_on>
		motor2_off(&htim2);
 80006a6:	4897      	ldr	r0, [pc, #604]	; (8000904 <display+0x2cc>)
 80006a8:	f7ff ff7b 	bl	80005a2 <motor2_off>
		motor3_off(&htim2);
 80006ac:	4895      	ldr	r0, [pc, #596]	; (8000904 <display+0x2cc>)
 80006ae:	f7ff ff87 	bl	80005c0 <motor3_off>
		motor4_on(&htim3);
 80006b2:	4895      	ldr	r0, [pc, #596]	; (8000908 <display+0x2d0>)
 80006b4:	f7ff ff39 	bl	800052a <motor4_on>
		motor5_off(&htim3);
 80006b8:	4893      	ldr	r0, [pc, #588]	; (8000908 <display+0x2d0>)
 80006ba:	f7ff ff9f 	bl	80005fc <motor5_off>
		motor6_off(&htim3);
 80006be:	4892      	ldr	r0, [pc, #584]	; (8000908 <display+0x2d0>)
 80006c0:	f7ff ffab 	bl	800061a <motor6_off>
}
 80006c4:	e1fd      	b.n	8000ac2 <display+0x48a>
	}else if(c == 'd'){
 80006c6:	79fb      	ldrb	r3, [r7, #7]
 80006c8:	2b64      	cmp	r3, #100	; 0x64
 80006ca:	d112      	bne.n	80006f2 <display+0xba>
		motor1_on(&htim2);
 80006cc:	488d      	ldr	r0, [pc, #564]	; (8000904 <display+0x2cc>)
 80006ce:	f7ff feff 	bl	80004d0 <motor1_on>
		motor2_on(&htim2);
 80006d2:	488c      	ldr	r0, [pc, #560]	; (8000904 <display+0x2cc>)
 80006d4:	f7ff ff0b 	bl	80004ee <motor2_on>
		motor3_off(&htim2);
 80006d8:	488a      	ldr	r0, [pc, #552]	; (8000904 <display+0x2cc>)
 80006da:	f7ff ff71 	bl	80005c0 <motor3_off>
		motor4_on(&htim3);
 80006de:	488a      	ldr	r0, [pc, #552]	; (8000908 <display+0x2d0>)
 80006e0:	f7ff ff23 	bl	800052a <motor4_on>
		motor5_off(&htim3);
 80006e4:	4888      	ldr	r0, [pc, #544]	; (8000908 <display+0x2d0>)
 80006e6:	f7ff ff89 	bl	80005fc <motor5_off>
		motor6_off(&htim3);
 80006ea:	4887      	ldr	r0, [pc, #540]	; (8000908 <display+0x2d0>)
 80006ec:	f7ff ff95 	bl	800061a <motor6_off>
}
 80006f0:	e1e7      	b.n	8000ac2 <display+0x48a>
	}else if(c == 'e'){
 80006f2:	79fb      	ldrb	r3, [r7, #7]
 80006f4:	2b65      	cmp	r3, #101	; 0x65
 80006f6:	d112      	bne.n	800071e <display+0xe6>
		motor1_off(&htim2);
 80006f8:	4882      	ldr	r0, [pc, #520]	; (8000904 <display+0x2cc>)
 80006fa:	f7ff ff43 	bl	8000584 <motor1_off>
		motor2_on(&htim2);
 80006fe:	4881      	ldr	r0, [pc, #516]	; (8000904 <display+0x2cc>)
 8000700:	f7ff fef5 	bl	80004ee <motor2_on>
		motor3_off(&htim2);
 8000704:	487f      	ldr	r0, [pc, #508]	; (8000904 <display+0x2cc>)
 8000706:	f7ff ff5b 	bl	80005c0 <motor3_off>
		motor4_on(&htim3);
 800070a:	487f      	ldr	r0, [pc, #508]	; (8000908 <display+0x2d0>)
 800070c:	f7ff ff0d 	bl	800052a <motor4_on>
		motor5_off(&htim3);
 8000710:	487d      	ldr	r0, [pc, #500]	; (8000908 <display+0x2d0>)
 8000712:	f7ff ff73 	bl	80005fc <motor5_off>
		motor6_off(&htim3);
 8000716:	487c      	ldr	r0, [pc, #496]	; (8000908 <display+0x2d0>)
 8000718:	f7ff ff7f 	bl	800061a <motor6_off>
}
 800071c:	e1d1      	b.n	8000ac2 <display+0x48a>
	}else if(c == 'f'){
 800071e:	79fb      	ldrb	r3, [r7, #7]
 8000720:	2b66      	cmp	r3, #102	; 0x66
 8000722:	d112      	bne.n	800074a <display+0x112>
		motor1_on(&htim2);
 8000724:	4877      	ldr	r0, [pc, #476]	; (8000904 <display+0x2cc>)
 8000726:	f7ff fed3 	bl	80004d0 <motor1_on>
		motor2_off(&htim2);
 800072a:	4876      	ldr	r0, [pc, #472]	; (8000904 <display+0x2cc>)
 800072c:	f7ff ff39 	bl	80005a2 <motor2_off>
		motor3_off(&htim2);
 8000730:	4874      	ldr	r0, [pc, #464]	; (8000904 <display+0x2cc>)
 8000732:	f7ff ff45 	bl	80005c0 <motor3_off>
		motor4_on(&htim3);
 8000736:	4874      	ldr	r0, [pc, #464]	; (8000908 <display+0x2d0>)
 8000738:	f7ff fef7 	bl	800052a <motor4_on>
		motor5_on(&htim3);
 800073c:	4872      	ldr	r0, [pc, #456]	; (8000908 <display+0x2d0>)
 800073e:	f7ff ff03 	bl	8000548 <motor5_on>
		motor6_off(&htim3);
 8000742:	4871      	ldr	r0, [pc, #452]	; (8000908 <display+0x2d0>)
 8000744:	f7ff ff69 	bl	800061a <motor6_off>
}
 8000748:	e1bb      	b.n	8000ac2 <display+0x48a>
	}else if(c == 'g'){
 800074a:	79fb      	ldrb	r3, [r7, #7]
 800074c:	2b67      	cmp	r3, #103	; 0x67
 800074e:	d112      	bne.n	8000776 <display+0x13e>
		motor1_on(&htim2);
 8000750:	486c      	ldr	r0, [pc, #432]	; (8000904 <display+0x2cc>)
 8000752:	f7ff febd 	bl	80004d0 <motor1_on>
		motor2_on(&htim2);
 8000756:	486b      	ldr	r0, [pc, #428]	; (8000904 <display+0x2cc>)
 8000758:	f7ff fec9 	bl	80004ee <motor2_on>
		motor3_off(&htim2);
 800075c:	4869      	ldr	r0, [pc, #420]	; (8000904 <display+0x2cc>)
 800075e:	f7ff ff2f 	bl	80005c0 <motor3_off>
		motor4_on(&htim3);
 8000762:	4869      	ldr	r0, [pc, #420]	; (8000908 <display+0x2d0>)
 8000764:	f7ff fee1 	bl	800052a <motor4_on>
		motor5_on(&htim3);
 8000768:	4867      	ldr	r0, [pc, #412]	; (8000908 <display+0x2d0>)
 800076a:	f7ff feed 	bl	8000548 <motor5_on>
		motor6_off(&htim3);
 800076e:	4866      	ldr	r0, [pc, #408]	; (8000908 <display+0x2d0>)
 8000770:	f7ff ff53 	bl	800061a <motor6_off>
}
 8000774:	e1a5      	b.n	8000ac2 <display+0x48a>
	}else if(c == 'h'){
 8000776:	79fb      	ldrb	r3, [r7, #7]
 8000778:	2b68      	cmp	r3, #104	; 0x68
 800077a:	d112      	bne.n	80007a2 <display+0x16a>
		motor1_off(&htim2);
 800077c:	4861      	ldr	r0, [pc, #388]	; (8000904 <display+0x2cc>)
 800077e:	f7ff ff01 	bl	8000584 <motor1_off>
		motor2_on(&htim2);
 8000782:	4860      	ldr	r0, [pc, #384]	; (8000904 <display+0x2cc>)
 8000784:	f7ff feb3 	bl	80004ee <motor2_on>
		motor3_off(&htim2);
 8000788:	485e      	ldr	r0, [pc, #376]	; (8000904 <display+0x2cc>)
 800078a:	f7ff ff19 	bl	80005c0 <motor3_off>
		motor4_on(&htim3);
 800078e:	485e      	ldr	r0, [pc, #376]	; (8000908 <display+0x2d0>)
 8000790:	f7ff fecb 	bl	800052a <motor4_on>
		motor5_on(&htim3);
 8000794:	485c      	ldr	r0, [pc, #368]	; (8000908 <display+0x2d0>)
 8000796:	f7ff fed7 	bl	8000548 <motor5_on>
		motor6_off(&htim3);
 800079a:	485b      	ldr	r0, [pc, #364]	; (8000908 <display+0x2d0>)
 800079c:	f7ff ff3d 	bl	800061a <motor6_off>
}
 80007a0:	e18f      	b.n	8000ac2 <display+0x48a>
	}else if(c == 'i'){
 80007a2:	79fb      	ldrb	r3, [r7, #7]
 80007a4:	2b69      	cmp	r3, #105	; 0x69
 80007a6:	d112      	bne.n	80007ce <display+0x196>
		motor1_on(&htim2);
 80007a8:	4856      	ldr	r0, [pc, #344]	; (8000904 <display+0x2cc>)
 80007aa:	f7ff fe91 	bl	80004d0 <motor1_on>
		motor2_off(&htim2);
 80007ae:	4855      	ldr	r0, [pc, #340]	; (8000904 <display+0x2cc>)
 80007b0:	f7ff fef7 	bl	80005a2 <motor2_off>
		motor3_off(&htim2);
 80007b4:	4853      	ldr	r0, [pc, #332]	; (8000904 <display+0x2cc>)
 80007b6:	f7ff ff03 	bl	80005c0 <motor3_off>
		motor4_off(&htim3);
 80007ba:	4853      	ldr	r0, [pc, #332]	; (8000908 <display+0x2d0>)
 80007bc:	f7ff ff0f 	bl	80005de <motor4_off>
		motor5_on(&htim3);
 80007c0:	4851      	ldr	r0, [pc, #324]	; (8000908 <display+0x2d0>)
 80007c2:	f7ff fec1 	bl	8000548 <motor5_on>
		motor6_off(&htim3);
 80007c6:	4850      	ldr	r0, [pc, #320]	; (8000908 <display+0x2d0>)
 80007c8:	f7ff ff27 	bl	800061a <motor6_off>
}
 80007cc:	e179      	b.n	8000ac2 <display+0x48a>
	}else if(c == 'j'){
 80007ce:	79fb      	ldrb	r3, [r7, #7]
 80007d0:	2b6a      	cmp	r3, #106	; 0x6a
 80007d2:	d112      	bne.n	80007fa <display+0x1c2>
		motor1_on(&htim2);
 80007d4:	484b      	ldr	r0, [pc, #300]	; (8000904 <display+0x2cc>)
 80007d6:	f7ff fe7b 	bl	80004d0 <motor1_on>
		motor2_on(&htim2);
 80007da:	484a      	ldr	r0, [pc, #296]	; (8000904 <display+0x2cc>)
 80007dc:	f7ff fe87 	bl	80004ee <motor2_on>
		motor3_off(&htim2);
 80007e0:	4848      	ldr	r0, [pc, #288]	; (8000904 <display+0x2cc>)
 80007e2:	f7ff feed 	bl	80005c0 <motor3_off>
		motor4_off(&htim3);
 80007e6:	4848      	ldr	r0, [pc, #288]	; (8000908 <display+0x2d0>)
 80007e8:	f7ff fef9 	bl	80005de <motor4_off>
		motor5_on(&htim3);
 80007ec:	4846      	ldr	r0, [pc, #280]	; (8000908 <display+0x2d0>)
 80007ee:	f7ff feab 	bl	8000548 <motor5_on>
		motor6_off(&htim3);
 80007f2:	4845      	ldr	r0, [pc, #276]	; (8000908 <display+0x2d0>)
 80007f4:	f7ff ff11 	bl	800061a <motor6_off>
}
 80007f8:	e163      	b.n	8000ac2 <display+0x48a>
	}else if(c == 'k'){
 80007fa:	79fb      	ldrb	r3, [r7, #7]
 80007fc:	2b6b      	cmp	r3, #107	; 0x6b
 80007fe:	d112      	bne.n	8000826 <display+0x1ee>
		motor1_off(&htim2);
 8000800:	4840      	ldr	r0, [pc, #256]	; (8000904 <display+0x2cc>)
 8000802:	f7ff febf 	bl	8000584 <motor1_off>
		motor2_off(&htim2);
 8000806:	483f      	ldr	r0, [pc, #252]	; (8000904 <display+0x2cc>)
 8000808:	f7ff fecb 	bl	80005a2 <motor2_off>
		motor3_on(&htim2);
 800080c:	483d      	ldr	r0, [pc, #244]	; (8000904 <display+0x2cc>)
 800080e:	f7ff fe7d 	bl	800050c <motor3_on>
		motor4_on(&htim3);
 8000812:	483d      	ldr	r0, [pc, #244]	; (8000908 <display+0x2d0>)
 8000814:	f7ff fe89 	bl	800052a <motor4_on>
		motor5_off(&htim3);
 8000818:	483b      	ldr	r0, [pc, #236]	; (8000908 <display+0x2d0>)
 800081a:	f7ff feef 	bl	80005fc <motor5_off>
		motor6_off(&htim3);
 800081e:	483a      	ldr	r0, [pc, #232]	; (8000908 <display+0x2d0>)
 8000820:	f7ff fefb 	bl	800061a <motor6_off>
}
 8000824:	e14d      	b.n	8000ac2 <display+0x48a>
	}else if(c == 'l'){
 8000826:	79fb      	ldrb	r3, [r7, #7]
 8000828:	2b6c      	cmp	r3, #108	; 0x6c
 800082a:	d112      	bne.n	8000852 <display+0x21a>
		motor1_off(&htim2);
 800082c:	4835      	ldr	r0, [pc, #212]	; (8000904 <display+0x2cc>)
 800082e:	f7ff fea9 	bl	8000584 <motor1_off>
		motor2_off(&htim2);
 8000832:	4834      	ldr	r0, [pc, #208]	; (8000904 <display+0x2cc>)
 8000834:	f7ff feb5 	bl	80005a2 <motor2_off>
		motor3_on(&htim2);
 8000838:	4832      	ldr	r0, [pc, #200]	; (8000904 <display+0x2cc>)
 800083a:	f7ff fe67 	bl	800050c <motor3_on>
		motor4_on(&htim3);
 800083e:	4832      	ldr	r0, [pc, #200]	; (8000908 <display+0x2d0>)
 8000840:	f7ff fe73 	bl	800052a <motor4_on>
		motor5_on(&htim3);
 8000844:	4830      	ldr	r0, [pc, #192]	; (8000908 <display+0x2d0>)
 8000846:	f7ff fe7f 	bl	8000548 <motor5_on>
		motor6_off(&htim3);
 800084a:	482f      	ldr	r0, [pc, #188]	; (8000908 <display+0x2d0>)
 800084c:	f7ff fee5 	bl	800061a <motor6_off>
}
 8000850:	e137      	b.n	8000ac2 <display+0x48a>
	}else if(c == 'm'){
 8000852:	79fb      	ldrb	r3, [r7, #7]
 8000854:	2b6d      	cmp	r3, #109	; 0x6d
 8000856:	d112      	bne.n	800087e <display+0x246>
		motor1_on(&htim2);
 8000858:	482a      	ldr	r0, [pc, #168]	; (8000904 <display+0x2cc>)
 800085a:	f7ff fe39 	bl	80004d0 <motor1_on>
		motor2_off(&htim2);
 800085e:	4829      	ldr	r0, [pc, #164]	; (8000904 <display+0x2cc>)
 8000860:	f7ff fe9f 	bl	80005a2 <motor2_off>
		motor3_on(&htim2);
 8000864:	4827      	ldr	r0, [pc, #156]	; (8000904 <display+0x2cc>)
 8000866:	f7ff fe51 	bl	800050c <motor3_on>
		motor4_on(&htim3);
 800086a:	4827      	ldr	r0, [pc, #156]	; (8000908 <display+0x2d0>)
 800086c:	f7ff fe5d 	bl	800052a <motor4_on>
		motor5_off(&htim3);
 8000870:	4825      	ldr	r0, [pc, #148]	; (8000908 <display+0x2d0>)
 8000872:	f7ff fec3 	bl	80005fc <motor5_off>
		motor6_off(&htim3);
 8000876:	4824      	ldr	r0, [pc, #144]	; (8000908 <display+0x2d0>)
 8000878:	f7ff fecf 	bl	800061a <motor6_off>
}
 800087c:	e121      	b.n	8000ac2 <display+0x48a>
	}else if(c == 'n'){
 800087e:	79fb      	ldrb	r3, [r7, #7]
 8000880:	2b6e      	cmp	r3, #110	; 0x6e
 8000882:	d112      	bne.n	80008aa <display+0x272>
		motor1_on(&htim2);
 8000884:	481f      	ldr	r0, [pc, #124]	; (8000904 <display+0x2cc>)
 8000886:	f7ff fe23 	bl	80004d0 <motor1_on>
		motor2_on(&htim2);
 800088a:	481e      	ldr	r0, [pc, #120]	; (8000904 <display+0x2cc>)
 800088c:	f7ff fe2f 	bl	80004ee <motor2_on>
		motor3_on(&htim2);
 8000890:	481c      	ldr	r0, [pc, #112]	; (8000904 <display+0x2cc>)
 8000892:	f7ff fe3b 	bl	800050c <motor3_on>
		motor4_on(&htim3);
 8000896:	481c      	ldr	r0, [pc, #112]	; (8000908 <display+0x2d0>)
 8000898:	f7ff fe47 	bl	800052a <motor4_on>
		motor5_off(&htim3);
 800089c:	481a      	ldr	r0, [pc, #104]	; (8000908 <display+0x2d0>)
 800089e:	f7ff fead 	bl	80005fc <motor5_off>
		motor6_off(&htim3);
 80008a2:	4819      	ldr	r0, [pc, #100]	; (8000908 <display+0x2d0>)
 80008a4:	f7ff feb9 	bl	800061a <motor6_off>
}
 80008a8:	e10b      	b.n	8000ac2 <display+0x48a>
	}else if(c == 'o'){
 80008aa:	79fb      	ldrb	r3, [r7, #7]
 80008ac:	2b6f      	cmp	r3, #111	; 0x6f
 80008ae:	d112      	bne.n	80008d6 <display+0x29e>
		motor1_off(&htim2);
 80008b0:	4814      	ldr	r0, [pc, #80]	; (8000904 <display+0x2cc>)
 80008b2:	f7ff fe67 	bl	8000584 <motor1_off>
		motor2_on(&htim2);
 80008b6:	4813      	ldr	r0, [pc, #76]	; (8000904 <display+0x2cc>)
 80008b8:	f7ff fe19 	bl	80004ee <motor2_on>
		motor3_on(&htim2);
 80008bc:	4811      	ldr	r0, [pc, #68]	; (8000904 <display+0x2cc>)
 80008be:	f7ff fe25 	bl	800050c <motor3_on>
		motor4_on(&htim3);
 80008c2:	4811      	ldr	r0, [pc, #68]	; (8000908 <display+0x2d0>)
 80008c4:	f7ff fe31 	bl	800052a <motor4_on>
		motor5_off(&htim3);
 80008c8:	480f      	ldr	r0, [pc, #60]	; (8000908 <display+0x2d0>)
 80008ca:	f7ff fe97 	bl	80005fc <motor5_off>
		motor6_off(&htim3);
 80008ce:	480e      	ldr	r0, [pc, #56]	; (8000908 <display+0x2d0>)
 80008d0:	f7ff fea3 	bl	800061a <motor6_off>
}
 80008d4:	e0f5      	b.n	8000ac2 <display+0x48a>
	}else if(c == 'p'){
 80008d6:	79fb      	ldrb	r3, [r7, #7]
 80008d8:	2b70      	cmp	r3, #112	; 0x70
 80008da:	d117      	bne.n	800090c <display+0x2d4>
		motor1_on(&htim2);
 80008dc:	4809      	ldr	r0, [pc, #36]	; (8000904 <display+0x2cc>)
 80008de:	f7ff fdf7 	bl	80004d0 <motor1_on>
		motor2_off(&htim2);
 80008e2:	4808      	ldr	r0, [pc, #32]	; (8000904 <display+0x2cc>)
 80008e4:	f7ff fe5d 	bl	80005a2 <motor2_off>
		motor3_on(&htim2);
 80008e8:	4806      	ldr	r0, [pc, #24]	; (8000904 <display+0x2cc>)
 80008ea:	f7ff fe0f 	bl	800050c <motor3_on>
		motor4_on(&htim3);
 80008ee:	4806      	ldr	r0, [pc, #24]	; (8000908 <display+0x2d0>)
 80008f0:	f7ff fe1b 	bl	800052a <motor4_on>
		motor5_on(&htim3);
 80008f4:	4804      	ldr	r0, [pc, #16]	; (8000908 <display+0x2d0>)
 80008f6:	f7ff fe27 	bl	8000548 <motor5_on>
		motor6_off(&htim3);
 80008fa:	4803      	ldr	r0, [pc, #12]	; (8000908 <display+0x2d0>)
 80008fc:	f7ff fe8d 	bl	800061a <motor6_off>
}
 8000900:	e0df      	b.n	8000ac2 <display+0x48a>
 8000902:	bf00      	nop
 8000904:	20000070 	.word	0x20000070
 8000908:	200000b8 	.word	0x200000b8
	}else if(c == 'q'){
 800090c:	79fb      	ldrb	r3, [r7, #7]
 800090e:	2b71      	cmp	r3, #113	; 0x71
 8000910:	d112      	bne.n	8000938 <display+0x300>
		motor1_on(&htim2);
 8000912:	486e      	ldr	r0, [pc, #440]	; (8000acc <display+0x494>)
 8000914:	f7ff fddc 	bl	80004d0 <motor1_on>
		motor2_on(&htim2);
 8000918:	486c      	ldr	r0, [pc, #432]	; (8000acc <display+0x494>)
 800091a:	f7ff fde8 	bl	80004ee <motor2_on>
		motor3_on(&htim2);
 800091e:	486b      	ldr	r0, [pc, #428]	; (8000acc <display+0x494>)
 8000920:	f7ff fdf4 	bl	800050c <motor3_on>
		motor4_on(&htim3);
 8000924:	486a      	ldr	r0, [pc, #424]	; (8000ad0 <display+0x498>)
 8000926:	f7ff fe00 	bl	800052a <motor4_on>
		motor5_on(&htim3);
 800092a:	4869      	ldr	r0, [pc, #420]	; (8000ad0 <display+0x498>)
 800092c:	f7ff fe0c 	bl	8000548 <motor5_on>
		motor6_off(&htim3);
 8000930:	4867      	ldr	r0, [pc, #412]	; (8000ad0 <display+0x498>)
 8000932:	f7ff fe72 	bl	800061a <motor6_off>
}
 8000936:	e0c4      	b.n	8000ac2 <display+0x48a>
	}else if(c == 'r'){
 8000938:	79fb      	ldrb	r3, [r7, #7]
 800093a:	2b72      	cmp	r3, #114	; 0x72
 800093c:	d112      	bne.n	8000964 <display+0x32c>
		motor1_off(&htim2);
 800093e:	4863      	ldr	r0, [pc, #396]	; (8000acc <display+0x494>)
 8000940:	f7ff fe20 	bl	8000584 <motor1_off>
		motor2_on(&htim2);
 8000944:	4861      	ldr	r0, [pc, #388]	; (8000acc <display+0x494>)
 8000946:	f7ff fdd2 	bl	80004ee <motor2_on>
		motor3_on(&htim2);
 800094a:	4860      	ldr	r0, [pc, #384]	; (8000acc <display+0x494>)
 800094c:	f7ff fdde 	bl	800050c <motor3_on>
		motor4_on(&htim3);
 8000950:	485f      	ldr	r0, [pc, #380]	; (8000ad0 <display+0x498>)
 8000952:	f7ff fdea 	bl	800052a <motor4_on>
		motor5_on(&htim3);
 8000956:	485e      	ldr	r0, [pc, #376]	; (8000ad0 <display+0x498>)
 8000958:	f7ff fdf6 	bl	8000548 <motor5_on>
		motor6_off(&htim3);
 800095c:	485c      	ldr	r0, [pc, #368]	; (8000ad0 <display+0x498>)
 800095e:	f7ff fe5c 	bl	800061a <motor6_off>
}
 8000962:	e0ae      	b.n	8000ac2 <display+0x48a>
	}else if(c == 's'){
 8000964:	79fb      	ldrb	r3, [r7, #7]
 8000966:	2b73      	cmp	r3, #115	; 0x73
 8000968:	d112      	bne.n	8000990 <display+0x358>
		motor1_on(&htim2);
 800096a:	4858      	ldr	r0, [pc, #352]	; (8000acc <display+0x494>)
 800096c:	f7ff fdb0 	bl	80004d0 <motor1_on>
		motor2_off(&htim2);
 8000970:	4856      	ldr	r0, [pc, #344]	; (8000acc <display+0x494>)
 8000972:	f7ff fe16 	bl	80005a2 <motor2_off>
		motor3_on(&htim2);
 8000976:	4855      	ldr	r0, [pc, #340]	; (8000acc <display+0x494>)
 8000978:	f7ff fdc8 	bl	800050c <motor3_on>
		motor4_off(&htim3);
 800097c:	4854      	ldr	r0, [pc, #336]	; (8000ad0 <display+0x498>)
 800097e:	f7ff fe2e 	bl	80005de <motor4_off>
		motor5_on(&htim3);
 8000982:	4853      	ldr	r0, [pc, #332]	; (8000ad0 <display+0x498>)
 8000984:	f7ff fde0 	bl	8000548 <motor5_on>
		motor6_off(&htim3);
 8000988:	4851      	ldr	r0, [pc, #324]	; (8000ad0 <display+0x498>)
 800098a:	f7ff fe46 	bl	800061a <motor6_off>
}
 800098e:	e098      	b.n	8000ac2 <display+0x48a>
	}else if(c == 't'){
 8000990:	79fb      	ldrb	r3, [r7, #7]
 8000992:	2b74      	cmp	r3, #116	; 0x74
 8000994:	d112      	bne.n	80009bc <display+0x384>
		motor1_on(&htim2);
 8000996:	484d      	ldr	r0, [pc, #308]	; (8000acc <display+0x494>)
 8000998:	f7ff fd9a 	bl	80004d0 <motor1_on>
		motor2_on(&htim2);
 800099c:	484b      	ldr	r0, [pc, #300]	; (8000acc <display+0x494>)
 800099e:	f7ff fda6 	bl	80004ee <motor2_on>
		motor3_on(&htim2);
 80009a2:	484a      	ldr	r0, [pc, #296]	; (8000acc <display+0x494>)
 80009a4:	f7ff fdb2 	bl	800050c <motor3_on>
		motor4_off(&htim3);
 80009a8:	4849      	ldr	r0, [pc, #292]	; (8000ad0 <display+0x498>)
 80009aa:	f7ff fe18 	bl	80005de <motor4_off>
		motor5_on(&htim3);
 80009ae:	4848      	ldr	r0, [pc, #288]	; (8000ad0 <display+0x498>)
 80009b0:	f7ff fdca 	bl	8000548 <motor5_on>
		motor6_off(&htim3);
 80009b4:	4846      	ldr	r0, [pc, #280]	; (8000ad0 <display+0x498>)
 80009b6:	f7ff fe30 	bl	800061a <motor6_off>
}
 80009ba:	e082      	b.n	8000ac2 <display+0x48a>
	}else if(c == 'u'){
 80009bc:	79fb      	ldrb	r3, [r7, #7]
 80009be:	2b75      	cmp	r3, #117	; 0x75
 80009c0:	d112      	bne.n	80009e8 <display+0x3b0>
		motor1_off(&htim2);
 80009c2:	4842      	ldr	r0, [pc, #264]	; (8000acc <display+0x494>)
 80009c4:	f7ff fdde 	bl	8000584 <motor1_off>
		motor2_off(&htim2);
 80009c8:	4840      	ldr	r0, [pc, #256]	; (8000acc <display+0x494>)
 80009ca:	f7ff fdea 	bl	80005a2 <motor2_off>
		motor3_on(&htim2);
 80009ce:	483f      	ldr	r0, [pc, #252]	; (8000acc <display+0x494>)
 80009d0:	f7ff fd9c 	bl	800050c <motor3_on>
		motor4_on(&htim3);
 80009d4:	483e      	ldr	r0, [pc, #248]	; (8000ad0 <display+0x498>)
 80009d6:	f7ff fda8 	bl	800052a <motor4_on>
		motor5_off(&htim3);
 80009da:	483d      	ldr	r0, [pc, #244]	; (8000ad0 <display+0x498>)
 80009dc:	f7ff fe0e 	bl	80005fc <motor5_off>
		motor6_on(&htim3);
 80009e0:	483b      	ldr	r0, [pc, #236]	; (8000ad0 <display+0x498>)
 80009e2:	f7ff fdc0 	bl	8000566 <motor6_on>
}
 80009e6:	e06c      	b.n	8000ac2 <display+0x48a>
	}else if(c == 'v'){
 80009e8:	79fb      	ldrb	r3, [r7, #7]
 80009ea:	2b76      	cmp	r3, #118	; 0x76
 80009ec:	d112      	bne.n	8000a14 <display+0x3dc>
		motor1_off(&htim2);
 80009ee:	4837      	ldr	r0, [pc, #220]	; (8000acc <display+0x494>)
 80009f0:	f7ff fdc8 	bl	8000584 <motor1_off>
		motor2_off(&htim2);
 80009f4:	4835      	ldr	r0, [pc, #212]	; (8000acc <display+0x494>)
 80009f6:	f7ff fdd4 	bl	80005a2 <motor2_off>
		motor3_on(&htim2);
 80009fa:	4834      	ldr	r0, [pc, #208]	; (8000acc <display+0x494>)
 80009fc:	f7ff fd86 	bl	800050c <motor3_on>
		motor4_on(&htim3);
 8000a00:	4833      	ldr	r0, [pc, #204]	; (8000ad0 <display+0x498>)
 8000a02:	f7ff fd92 	bl	800052a <motor4_on>
		motor5_on(&htim3);
 8000a06:	4832      	ldr	r0, [pc, #200]	; (8000ad0 <display+0x498>)
 8000a08:	f7ff fd9e 	bl	8000548 <motor5_on>
		motor6_on(&htim3);
 8000a0c:	4830      	ldr	r0, [pc, #192]	; (8000ad0 <display+0x498>)
 8000a0e:	f7ff fdaa 	bl	8000566 <motor6_on>
}
 8000a12:	e056      	b.n	8000ac2 <display+0x48a>
	}else if(c == 'w'){
 8000a14:	79fb      	ldrb	r3, [r7, #7]
 8000a16:	2b77      	cmp	r3, #119	; 0x77
 8000a18:	d112      	bne.n	8000a40 <display+0x408>
		motor1_on(&htim2);
 8000a1a:	482c      	ldr	r0, [pc, #176]	; (8000acc <display+0x494>)
 8000a1c:	f7ff fd58 	bl	80004d0 <motor1_on>
		motor2_on(&htim2);
 8000a20:	482a      	ldr	r0, [pc, #168]	; (8000acc <display+0x494>)
 8000a22:	f7ff fd64 	bl	80004ee <motor2_on>
		motor3_off(&htim2);
 8000a26:	4829      	ldr	r0, [pc, #164]	; (8000acc <display+0x494>)
 8000a28:	f7ff fdca 	bl	80005c0 <motor3_off>
		motor4_off(&htim3);
 8000a2c:	4828      	ldr	r0, [pc, #160]	; (8000ad0 <display+0x498>)
 8000a2e:	f7ff fdd6 	bl	80005de <motor4_off>
		motor5_on(&htim3);
 8000a32:	4827      	ldr	r0, [pc, #156]	; (8000ad0 <display+0x498>)
 8000a34:	f7ff fd88 	bl	8000548 <motor5_on>
		motor6_on(&htim3);
 8000a38:	4825      	ldr	r0, [pc, #148]	; (8000ad0 <display+0x498>)
 8000a3a:	f7ff fd94 	bl	8000566 <motor6_on>
}
 8000a3e:	e040      	b.n	8000ac2 <display+0x48a>
	}else if(c == 'x'){
 8000a40:	79fb      	ldrb	r3, [r7, #7]
 8000a42:	2b78      	cmp	r3, #120	; 0x78
 8000a44:	d112      	bne.n	8000a6c <display+0x434>
		motor1_on(&htim2);
 8000a46:	4821      	ldr	r0, [pc, #132]	; (8000acc <display+0x494>)
 8000a48:	f7ff fd42 	bl	80004d0 <motor1_on>
		motor2_off(&htim2);
 8000a4c:	481f      	ldr	r0, [pc, #124]	; (8000acc <display+0x494>)
 8000a4e:	f7ff fda8 	bl	80005a2 <motor2_off>
		motor3_on(&htim2);
 8000a52:	481e      	ldr	r0, [pc, #120]	; (8000acc <display+0x494>)
 8000a54:	f7ff fd5a 	bl	800050c <motor3_on>
		motor4_on(&htim3);
 8000a58:	481d      	ldr	r0, [pc, #116]	; (8000ad0 <display+0x498>)
 8000a5a:	f7ff fd66 	bl	800052a <motor4_on>
		motor5_off(&htim3);
 8000a5e:	481c      	ldr	r0, [pc, #112]	; (8000ad0 <display+0x498>)
 8000a60:	f7ff fdcc 	bl	80005fc <motor5_off>
		motor6_on(&htim3);
 8000a64:	481a      	ldr	r0, [pc, #104]	; (8000ad0 <display+0x498>)
 8000a66:	f7ff fd7e 	bl	8000566 <motor6_on>
}
 8000a6a:	e02a      	b.n	8000ac2 <display+0x48a>
	}else if(c == 'y'){
 8000a6c:	79fb      	ldrb	r3, [r7, #7]
 8000a6e:	2b79      	cmp	r3, #121	; 0x79
 8000a70:	d112      	bne.n	8000a98 <display+0x460>
		motor1_on(&htim2);
 8000a72:	4816      	ldr	r0, [pc, #88]	; (8000acc <display+0x494>)
 8000a74:	f7ff fd2c 	bl	80004d0 <motor1_on>
		motor2_on(&htim2);
 8000a78:	4814      	ldr	r0, [pc, #80]	; (8000acc <display+0x494>)
 8000a7a:	f7ff fd38 	bl	80004ee <motor2_on>
		motor3_on(&htim2);
 8000a7e:	4813      	ldr	r0, [pc, #76]	; (8000acc <display+0x494>)
 8000a80:	f7ff fd44 	bl	800050c <motor3_on>
		motor4_on(&htim3);
 8000a84:	4812      	ldr	r0, [pc, #72]	; (8000ad0 <display+0x498>)
 8000a86:	f7ff fd50 	bl	800052a <motor4_on>
		motor5_off(&htim3);
 8000a8a:	4811      	ldr	r0, [pc, #68]	; (8000ad0 <display+0x498>)
 8000a8c:	f7ff fdb6 	bl	80005fc <motor5_off>
		motor6_on(&htim3);
 8000a90:	480f      	ldr	r0, [pc, #60]	; (8000ad0 <display+0x498>)
 8000a92:	f7ff fd68 	bl	8000566 <motor6_on>
}
 8000a96:	e014      	b.n	8000ac2 <display+0x48a>
	}else if(c == 'z'){
 8000a98:	79fb      	ldrb	r3, [r7, #7]
 8000a9a:	2b7a      	cmp	r3, #122	; 0x7a
 8000a9c:	d111      	bne.n	8000ac2 <display+0x48a>
		motor1_off(&htim2);
 8000a9e:	480b      	ldr	r0, [pc, #44]	; (8000acc <display+0x494>)
 8000aa0:	f7ff fd70 	bl	8000584 <motor1_off>
		motor2_on(&htim2);
 8000aa4:	4809      	ldr	r0, [pc, #36]	; (8000acc <display+0x494>)
 8000aa6:	f7ff fd22 	bl	80004ee <motor2_on>
		motor3_on(&htim2);
 8000aaa:	4808      	ldr	r0, [pc, #32]	; (8000acc <display+0x494>)
 8000aac:	f7ff fd2e 	bl	800050c <motor3_on>
		motor4_on(&htim3);
 8000ab0:	4807      	ldr	r0, [pc, #28]	; (8000ad0 <display+0x498>)
 8000ab2:	f7ff fd3a 	bl	800052a <motor4_on>
		motor5_off(&htim3);
 8000ab6:	4806      	ldr	r0, [pc, #24]	; (8000ad0 <display+0x498>)
 8000ab8:	f7ff fda0 	bl	80005fc <motor5_off>
		motor6_on(&htim3);
 8000abc:	4804      	ldr	r0, [pc, #16]	; (8000ad0 <display+0x498>)
 8000abe:	f7ff fd52 	bl	8000566 <motor6_on>
}
 8000ac2:	bf00      	nop
 8000ac4:	3708      	adds	r7, #8
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	bf00      	nop
 8000acc:	20000070 	.word	0x20000070
 8000ad0:	200000b8 	.word	0x200000b8

08000ad4 <read>:
char read(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET);
 8000ad8:	2201      	movs	r2, #1
 8000ada:	2140      	movs	r1, #64	; 0x40
 8000adc:	4854      	ldr	r0, [pc, #336]	; (8000c30 <read+0x15c>)
 8000ade:	f001 fcff 	bl	80024e0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	2180      	movs	r1, #128	; 0x80
 8000ae6:	4852      	ldr	r0, [pc, #328]	; (8000c30 <read+0x15c>)
 8000ae8:	f001 fcfa 	bl	80024e0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 8000aec:	2200      	movs	r2, #0
 8000aee:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000af2:	484f      	ldr	r0, [pc, #316]	; (8000c30 <read+0x15c>)
 8000af4:	f001 fcf4 	bl	80024e0 <HAL_GPIO_WritePin>

	if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12)==GPIO_PIN_SET) {
 8000af8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000afc:	484d      	ldr	r0, [pc, #308]	; (8000c34 <read+0x160>)
 8000afe:	f001 fcd7 	bl	80024b0 <HAL_GPIO_ReadPin>
 8000b02:	4603      	mov	r3, r0
 8000b04:	2b01      	cmp	r3, #1
 8000b06:	d101      	bne.n	8000b0c <read+0x38>
		return '1';
 8000b08:	2331      	movs	r3, #49	; 0x31
 8000b0a:	e08e      	b.n	8000c2a <read+0x156>
	} else if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13)==GPIO_PIN_SET) {
 8000b0c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b10:	4848      	ldr	r0, [pc, #288]	; (8000c34 <read+0x160>)
 8000b12:	f001 fccd 	bl	80024b0 <HAL_GPIO_ReadPin>
 8000b16:	4603      	mov	r3, r0
 8000b18:	2b01      	cmp	r3, #1
 8000b1a:	d101      	bne.n	8000b20 <read+0x4c>
		return '4';
 8000b1c:	2334      	movs	r3, #52	; 0x34
 8000b1e:	e084      	b.n	8000c2a <read+0x156>
	} else if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14)==GPIO_PIN_SET) {
 8000b20:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b24:	4843      	ldr	r0, [pc, #268]	; (8000c34 <read+0x160>)
 8000b26:	f001 fcc3 	bl	80024b0 <HAL_GPIO_ReadPin>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	2b01      	cmp	r3, #1
 8000b2e:	d101      	bne.n	8000b34 <read+0x60>
		return '7';
 8000b30:	2337      	movs	r3, #55	; 0x37
 8000b32:	e07a      	b.n	8000c2a <read+0x156>
	} else if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15)==GPIO_PIN_SET) {
 8000b34:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b38:	483e      	ldr	r0, [pc, #248]	; (8000c34 <read+0x160>)
 8000b3a:	f001 fcb9 	bl	80024b0 <HAL_GPIO_ReadPin>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	2b01      	cmp	r3, #1
 8000b42:	d101      	bne.n	8000b48 <read+0x74>
		return '*';
 8000b44:	232a      	movs	r3, #42	; 0x2a
 8000b46:	e070      	b.n	8000c2a <read+0x156>
	}

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 8000b48:	2200      	movs	r2, #0
 8000b4a:	2140      	movs	r1, #64	; 0x40
 8000b4c:	4838      	ldr	r0, [pc, #224]	; (8000c30 <read+0x15c>)
 8000b4e:	f001 fcc7 	bl	80024e0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET);
 8000b52:	2201      	movs	r2, #1
 8000b54:	2180      	movs	r1, #128	; 0x80
 8000b56:	4836      	ldr	r0, [pc, #216]	; (8000c30 <read+0x15c>)
 8000b58:	f001 fcc2 	bl	80024e0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b62:	4833      	ldr	r0, [pc, #204]	; (8000c30 <read+0x15c>)
 8000b64:	f001 fcbc 	bl	80024e0 <HAL_GPIO_WritePin>

	if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12)==GPIO_PIN_SET) {
 8000b68:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b6c:	4831      	ldr	r0, [pc, #196]	; (8000c34 <read+0x160>)
 8000b6e:	f001 fc9f 	bl	80024b0 <HAL_GPIO_ReadPin>
 8000b72:	4603      	mov	r3, r0
 8000b74:	2b01      	cmp	r3, #1
 8000b76:	d101      	bne.n	8000b7c <read+0xa8>
		return '2';
 8000b78:	2332      	movs	r3, #50	; 0x32
 8000b7a:	e056      	b.n	8000c2a <read+0x156>
	} else if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13)==GPIO_PIN_SET) {
 8000b7c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b80:	482c      	ldr	r0, [pc, #176]	; (8000c34 <read+0x160>)
 8000b82:	f001 fc95 	bl	80024b0 <HAL_GPIO_ReadPin>
 8000b86:	4603      	mov	r3, r0
 8000b88:	2b01      	cmp	r3, #1
 8000b8a:	d101      	bne.n	8000b90 <read+0xbc>
		return '5';
 8000b8c:	2335      	movs	r3, #53	; 0x35
 8000b8e:	e04c      	b.n	8000c2a <read+0x156>
	} else if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14)==GPIO_PIN_SET) {
 8000b90:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b94:	4827      	ldr	r0, [pc, #156]	; (8000c34 <read+0x160>)
 8000b96:	f001 fc8b 	bl	80024b0 <HAL_GPIO_ReadPin>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	2b01      	cmp	r3, #1
 8000b9e:	d101      	bne.n	8000ba4 <read+0xd0>
		return '8';
 8000ba0:	2338      	movs	r3, #56	; 0x38
 8000ba2:	e042      	b.n	8000c2a <read+0x156>
	} else if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15)==GPIO_PIN_SET) {
 8000ba4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ba8:	4822      	ldr	r0, [pc, #136]	; (8000c34 <read+0x160>)
 8000baa:	f001 fc81 	bl	80024b0 <HAL_GPIO_ReadPin>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	2b01      	cmp	r3, #1
 8000bb2:	d101      	bne.n	8000bb8 <read+0xe4>
		return '0';
 8000bb4:	2330      	movs	r3, #48	; 0x30
 8000bb6:	e038      	b.n	8000c2a <read+0x156>
	}

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 8000bb8:	2200      	movs	r2, #0
 8000bba:	2140      	movs	r1, #64	; 0x40
 8000bbc:	481c      	ldr	r0, [pc, #112]	; (8000c30 <read+0x15c>)
 8000bbe:	f001 fc8f 	bl	80024e0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	2180      	movs	r1, #128	; 0x80
 8000bc6:	481a      	ldr	r0, [pc, #104]	; (8000c30 <read+0x15c>)
 8000bc8:	f001 fc8a 	bl	80024e0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 8000bcc:	2201      	movs	r2, #1
 8000bce:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000bd2:	4817      	ldr	r0, [pc, #92]	; (8000c30 <read+0x15c>)
 8000bd4:	f001 fc84 	bl	80024e0 <HAL_GPIO_WritePin>

	if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12)==GPIO_PIN_SET) {
 8000bd8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000bdc:	4815      	ldr	r0, [pc, #84]	; (8000c34 <read+0x160>)
 8000bde:	f001 fc67 	bl	80024b0 <HAL_GPIO_ReadPin>
 8000be2:	4603      	mov	r3, r0
 8000be4:	2b01      	cmp	r3, #1
 8000be6:	d101      	bne.n	8000bec <read+0x118>
		return '3';
 8000be8:	2333      	movs	r3, #51	; 0x33
 8000bea:	e01e      	b.n	8000c2a <read+0x156>
	} else if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13)==GPIO_PIN_SET) {
 8000bec:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000bf0:	4810      	ldr	r0, [pc, #64]	; (8000c34 <read+0x160>)
 8000bf2:	f001 fc5d 	bl	80024b0 <HAL_GPIO_ReadPin>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	2b01      	cmp	r3, #1
 8000bfa:	d101      	bne.n	8000c00 <read+0x12c>
		return '6';
 8000bfc:	2336      	movs	r3, #54	; 0x36
 8000bfe:	e014      	b.n	8000c2a <read+0x156>
	} else if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14)==GPIO_PIN_SET) {
 8000c00:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000c04:	480b      	ldr	r0, [pc, #44]	; (8000c34 <read+0x160>)
 8000c06:	f001 fc53 	bl	80024b0 <HAL_GPIO_ReadPin>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	2b01      	cmp	r3, #1
 8000c0e:	d101      	bne.n	8000c14 <read+0x140>
		return '9';
 8000c10:	2339      	movs	r3, #57	; 0x39
 8000c12:	e00a      	b.n	8000c2a <read+0x156>
	} else if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15)==GPIO_PIN_SET) {
 8000c14:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000c18:	4806      	ldr	r0, [pc, #24]	; (8000c34 <read+0x160>)
 8000c1a:	f001 fc49 	bl	80024b0 <HAL_GPIO_ReadPin>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	2b01      	cmp	r3, #1
 8000c22:	d101      	bne.n	8000c28 <read+0x154>
		return '#';
 8000c24:	2323      	movs	r3, #35	; 0x23
 8000c26:	e000      	b.n	8000c2a <read+0x156>
	}

	return 0;
 8000c28:	2300      	movs	r3, #0
}
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	40020800 	.word	0x40020800
 8000c34:	40020400 	.word	0x40020400

08000c38 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b0a4      	sub	sp, #144	; 0x90
 8000c3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	char initial_char = 0;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
	int count = 0;
 8000c44:	2300      	movs	r3, #0
 8000c46:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	char string[128] = {0};
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	603b      	str	r3, [r7, #0]
 8000c4e:	1d3b      	adds	r3, r7, #4
 8000c50:	227c      	movs	r2, #124	; 0x7c
 8000c52:	2100      	movs	r1, #0
 8000c54:	4618      	mov	r0, r3
 8000c56:	f003 f9d3 	bl	8004000 <memset>
	int top = 0;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	uint16_t value = 0;
 8000c60:	2300      	movs	r3, #0
 8000c62:	f8a7 3080 	strh.w	r3, [r7, #128]	; 0x80
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c66:	f000 fd75 	bl	8001754 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c6a:	f000 f8ed 	bl	8000e48 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c6e:	f000 faeb 	bl	8001248 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000c72:	f000 fabf 	bl	80011f4 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000c76:	f000 f9a5 	bl	8000fc4 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000c7a:	f000 fa2f 	bl	80010dc <MX_TIM3_Init>
  MX_ADC1_Init();
 8000c7e:	f000 f94f 	bl	8000f20 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
//  HAL_ADC_Start(&hadc1);
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000c82:	2100      	movs	r1, #0
 8000c84:	486c      	ldr	r0, [pc, #432]	; (8000e38 <main+0x200>)
 8000c86:	f002 f985 	bl	8002f94 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8000c8a:	2104      	movs	r1, #4
 8000c8c:	486a      	ldr	r0, [pc, #424]	; (8000e38 <main+0x200>)
 8000c8e:	f002 f981 	bl	8002f94 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8000c92:	2108      	movs	r1, #8
 8000c94:	4868      	ldr	r0, [pc, #416]	; (8000e38 <main+0x200>)
 8000c96:	f002 f97d 	bl	8002f94 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000c9a:	2100      	movs	r1, #0
 8000c9c:	4867      	ldr	r0, [pc, #412]	; (8000e3c <main+0x204>)
 8000c9e:	f002 f979 	bl	8002f94 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000ca2:	2104      	movs	r1, #4
 8000ca4:	4865      	ldr	r0, [pc, #404]	; (8000e3c <main+0x204>)
 8000ca6:	f002 f975 	bl	8002f94 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8000caa:	2108      	movs	r1, #8
 8000cac:	4863      	ldr	r0, [pc, #396]	; (8000e3c <main+0x204>)
 8000cae:	f002 f971 	bl	8002f94 <HAL_TIM_PWM_Start>
  /* USER CODE BEGIN WHILE */
  while (1){
	  // servo motor 1&2
//	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);

	  if ((initial_char=read()) && ('1'<=initial_char) && (initial_char<='9')) {
 8000cb2:	f7ff ff0f 	bl	8000ad4 <read>
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
 8000cbc:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d070      	beq.n	8000da6 <main+0x16e>
 8000cc4:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8000cc8:	2b30      	cmp	r3, #48	; 0x30
 8000cca:	d96c      	bls.n	8000da6 <main+0x16e>
 8000ccc:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8000cd0:	2b39      	cmp	r3, #57	; 0x39
 8000cd2:	d868      	bhi.n	8000da6 <main+0x16e>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 8000cd4:	2201      	movs	r2, #1
 8000cd6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000cda:	4859      	ldr	r0, [pc, #356]	; (8000e40 <main+0x208>)
 8000cdc:	f001 fc00 	bl	80024e0 <HAL_GPIO_WritePin>
		  HAL_Delay(100);
 8000ce0:	2064      	movs	r0, #100	; 0x64
 8000ce2:	f000 fda9 	bl	8001838 <HAL_Delay>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000cec:	4854      	ldr	r0, [pc, #336]	; (8000e40 <main+0x208>)
 8000cee:	f001 fbf7 	bl	80024e0 <HAL_GPIO_WritePin>
		  HAL_Delay(100);
 8000cf2:	2064      	movs	r0, #100	; 0x64
 8000cf4:	f000 fda0 	bl	8001838 <HAL_Delay>
		  while (1) {
			  if (read()=='#' || count>=2) {
 8000cf8:	f7ff feec 	bl	8000ad4 <read>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	2b23      	cmp	r3, #35	; 0x23
 8000d00:	d003      	beq.n	8000d0a <main+0xd2>
 8000d02:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000d06:	2b01      	cmp	r3, #1
 8000d08:	dd2d      	ble.n	8000d66 <main+0x12e>
				  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 8000d0a:	2201      	movs	r2, #1
 8000d0c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d10:	484b      	ldr	r0, [pc, #300]	; (8000e40 <main+0x208>)
 8000d12:	f001 fbe5 	bl	80024e0 <HAL_GPIO_WritePin>
				  string[top++] = (initial_char-49)*3+ 97 + count;
 8000d16:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8000d1a:	461a      	mov	r2, r3
 8000d1c:	0052      	lsls	r2, r2, #1
 8000d1e:	4413      	add	r3, r2
 8000d20:	b2da      	uxtb	r2, r3
 8000d22:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000d26:	b2db      	uxtb	r3, r3
 8000d28:	4413      	add	r3, r2
 8000d2a:	b2da      	uxtb	r2, r3
 8000d2c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000d30:	1c59      	adds	r1, r3, #1
 8000d32:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 8000d36:	3a32      	subs	r2, #50	; 0x32
 8000d38:	b2d2      	uxtb	r2, r2
 8000d3a:	3390      	adds	r3, #144	; 0x90
 8000d3c:	443b      	add	r3, r7
 8000d3e:	f803 2c90 	strb.w	r2, [r3, #-144]
				  HAL_Delay(300);
 8000d42:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000d46:	f000 fd77 	bl	8001838 <HAL_Delay>
				  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d50:	483b      	ldr	r0, [pc, #236]	; (8000e40 <main+0x208>)
 8000d52:	f001 fbc5 	bl	80024e0 <HAL_GPIO_WritePin>
				  HAL_Delay(100);
 8000d56:	2064      	movs	r0, #100	; 0x64
 8000d58:	f000 fd6e 	bl	8001838 <HAL_Delay>
				  break;
 8000d5c:	bf00      	nop
				  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
				  HAL_Delay(100);
				  count++;
			  }
		  }
		  count = 0;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8000d64:	e067      	b.n	8000e36 <main+0x1fe>
			  } else if (read()==initial_char) {
 8000d66:	f7ff feb5 	bl	8000ad4 <read>
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	461a      	mov	r2, r3
 8000d6e:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8000d72:	4293      	cmp	r3, r2
 8000d74:	d1c0      	bne.n	8000cf8 <main+0xc0>
				  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 8000d76:	2201      	movs	r2, #1
 8000d78:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d7c:	4830      	ldr	r0, [pc, #192]	; (8000e40 <main+0x208>)
 8000d7e:	f001 fbaf 	bl	80024e0 <HAL_GPIO_WritePin>
				  HAL_Delay(100);
 8000d82:	2064      	movs	r0, #100	; 0x64
 8000d84:	f000 fd58 	bl	8001838 <HAL_Delay>
				  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8000d88:	2200      	movs	r2, #0
 8000d8a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d8e:	482c      	ldr	r0, [pc, #176]	; (8000e40 <main+0x208>)
 8000d90:	f001 fba6 	bl	80024e0 <HAL_GPIO_WritePin>
				  HAL_Delay(100);
 8000d94:	2064      	movs	r0, #100	; 0x64
 8000d96:	f000 fd4f 	bl	8001838 <HAL_Delay>
				  count++;
 8000d9a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000d9e:	3301      	adds	r3, #1
 8000da0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
			  if (read()=='#' || count>=2) {
 8000da4:	e7a8      	b.n	8000cf8 <main+0xc0>
	  } else if (initial_char=='*' || top==128) {
 8000da6:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8000daa:	2b2a      	cmp	r3, #42	; 0x2a
 8000dac:	d004      	beq.n	8000db8 <main+0x180>
 8000dae:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000db2:	2b80      	cmp	r3, #128	; 0x80
 8000db4:	f47f af7d 	bne.w	8000cb2 <main+0x7a>
		  for (int i=0; i<top; ++i) {
 8000db8:	2300      	movs	r3, #0
 8000dba:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8000dbe:	e031      	b.n	8000e24 <main+0x1ec>
			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 8000dc0:	2201      	movs	r2, #1
 8000dc2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000dc6:	481e      	ldr	r0, [pc, #120]	; (8000e40 <main+0x208>)
 8000dc8:	f001 fb8a 	bl	80024e0 <HAL_GPIO_WritePin>
			  display(string[i]);
 8000dcc:	463a      	mov	r2, r7
 8000dce:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000dd2:	4413      	add	r3, r2
 8000dd4:	781b      	ldrb	r3, [r3, #0]
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	f7ff fc2e 	bl	8000638 <display>

			  HAL_ADC_Start(&hadc1);
 8000ddc:	4819      	ldr	r0, [pc, #100]	; (8000e44 <main+0x20c>)
 8000dde:	f000 fd93 	bl	8001908 <HAL_ADC_Start>
			  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8000de2:	f04f 31ff 	mov.w	r1, #4294967295
 8000de6:	4817      	ldr	r0, [pc, #92]	; (8000e44 <main+0x20c>)
 8000de8:	f000 fe42 	bl	8001a70 <HAL_ADC_PollForConversion>
			  value = HAL_ADC_GetValue(&hadc1)/4 + 30;
 8000dec:	4815      	ldr	r0, [pc, #84]	; (8000e44 <main+0x20c>)
 8000dee:	f000 feca 	bl	8001b86 <HAL_ADC_GetValue>
 8000df2:	4603      	mov	r3, r0
 8000df4:	089b      	lsrs	r3, r3, #2
 8000df6:	b29b      	uxth	r3, r3
 8000df8:	331e      	adds	r3, #30
 8000dfa:	f8a7 3080 	strh.w	r3, [r7, #128]	; 0x80
			  HAL_Delay(value);
 8000dfe:	f8b7 3080 	ldrh.w	r3, [r7, #128]	; 0x80
 8000e02:	4618      	mov	r0, r3
 8000e04:	f000 fd18 	bl	8001838 <HAL_Delay>

			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8000e08:	2200      	movs	r2, #0
 8000e0a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e0e:	480c      	ldr	r0, [pc, #48]	; (8000e40 <main+0x208>)
 8000e10:	f001 fb66 	bl	80024e0 <HAL_GPIO_WritePin>
			  HAL_Delay(70);
 8000e14:	2046      	movs	r0, #70	; 0x46
 8000e16:	f000 fd0f 	bl	8001838 <HAL_Delay>
		  for (int i=0; i<top; ++i) {
 8000e1a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000e1e:	3301      	adds	r3, #1
 8000e20:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8000e24:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8000e28:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000e2c:	429a      	cmp	r2, r3
 8000e2e:	dbc7      	blt.n	8000dc0 <main+0x188>
		  }
		  top = 0;
 8000e30:	2300      	movs	r3, #0
 8000e32:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	  if ((initial_char=read()) && ('1'<=initial_char) && (initial_char<='9')) {
 8000e36:	e73c      	b.n	8000cb2 <main+0x7a>
 8000e38:	20000070 	.word	0x20000070
 8000e3c:	200000b8 	.word	0x200000b8
 8000e40:	40020000 	.word	0x40020000
 8000e44:	20000028 	.word	0x20000028

08000e48 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b094      	sub	sp, #80	; 0x50
 8000e4c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e4e:	f107 0320 	add.w	r3, r7, #32
 8000e52:	2230      	movs	r2, #48	; 0x30
 8000e54:	2100      	movs	r1, #0
 8000e56:	4618      	mov	r0, r3
 8000e58:	f003 f8d2 	bl	8004000 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e5c:	f107 030c 	add.w	r3, r7, #12
 8000e60:	2200      	movs	r2, #0
 8000e62:	601a      	str	r2, [r3, #0]
 8000e64:	605a      	str	r2, [r3, #4]
 8000e66:	609a      	str	r2, [r3, #8]
 8000e68:	60da      	str	r2, [r3, #12]
 8000e6a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	60bb      	str	r3, [r7, #8]
 8000e70:	4b29      	ldr	r3, [pc, #164]	; (8000f18 <SystemClock_Config+0xd0>)
 8000e72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e74:	4a28      	ldr	r2, [pc, #160]	; (8000f18 <SystemClock_Config+0xd0>)
 8000e76:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e7a:	6413      	str	r3, [r2, #64]	; 0x40
 8000e7c:	4b26      	ldr	r3, [pc, #152]	; (8000f18 <SystemClock_Config+0xd0>)
 8000e7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e84:	60bb      	str	r3, [r7, #8]
 8000e86:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000e88:	2300      	movs	r3, #0
 8000e8a:	607b      	str	r3, [r7, #4]
 8000e8c:	4b23      	ldr	r3, [pc, #140]	; (8000f1c <SystemClock_Config+0xd4>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000e94:	4a21      	ldr	r2, [pc, #132]	; (8000f1c <SystemClock_Config+0xd4>)
 8000e96:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000e9a:	6013      	str	r3, [r2, #0]
 8000e9c:	4b1f      	ldr	r3, [pc, #124]	; (8000f1c <SystemClock_Config+0xd4>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000ea4:	607b      	str	r3, [r7, #4]
 8000ea6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ea8:	2302      	movs	r3, #2
 8000eaa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000eac:	2301      	movs	r3, #1
 8000eae:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000eb0:	2310      	movs	r3, #16
 8000eb2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000eb4:	2302      	movs	r3, #2
 8000eb6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000ebc:	2310      	movs	r3, #16
 8000ebe:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000ec0:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000ec4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000ec6:	2304      	movs	r3, #4
 8000ec8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000eca:	2307      	movs	r3, #7
 8000ecc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ece:	f107 0320 	add.w	r3, r7, #32
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	f001 fb1e 	bl	8002514 <HAL_RCC_OscConfig>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d001      	beq.n	8000ee2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000ede:	f000 fa47 	bl	8001370 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ee2:	230f      	movs	r3, #15
 8000ee4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ee6:	2302      	movs	r3, #2
 8000ee8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000eea:	2300      	movs	r3, #0
 8000eec:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000eee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ef2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000ef8:	f107 030c 	add.w	r3, r7, #12
 8000efc:	2102      	movs	r1, #2
 8000efe:	4618      	mov	r0, r3
 8000f00:	f001 fd80 	bl	8002a04 <HAL_RCC_ClockConfig>
 8000f04:	4603      	mov	r3, r0
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d001      	beq.n	8000f0e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000f0a:	f000 fa31 	bl	8001370 <Error_Handler>
  }
}
 8000f0e:	bf00      	nop
 8000f10:	3750      	adds	r7, #80	; 0x50
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	bf00      	nop
 8000f18:	40023800 	.word	0x40023800
 8000f1c:	40007000 	.word	0x40007000

08000f20 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b084      	sub	sp, #16
 8000f24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000f26:	463b      	mov	r3, r7
 8000f28:	2200      	movs	r2, #0
 8000f2a:	601a      	str	r2, [r3, #0]
 8000f2c:	605a      	str	r2, [r3, #4]
 8000f2e:	609a      	str	r2, [r3, #8]
 8000f30:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000f32:	4b21      	ldr	r3, [pc, #132]	; (8000fb8 <MX_ADC1_Init+0x98>)
 8000f34:	4a21      	ldr	r2, [pc, #132]	; (8000fbc <MX_ADC1_Init+0x9c>)
 8000f36:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000f38:	4b1f      	ldr	r3, [pc, #124]	; (8000fb8 <MX_ADC1_Init+0x98>)
 8000f3a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000f3e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000f40:	4b1d      	ldr	r3, [pc, #116]	; (8000fb8 <MX_ADC1_Init+0x98>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000f46:	4b1c      	ldr	r3, [pc, #112]	; (8000fb8 <MX_ADC1_Init+0x98>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000f4c:	4b1a      	ldr	r3, [pc, #104]	; (8000fb8 <MX_ADC1_Init+0x98>)
 8000f4e:	2201      	movs	r2, #1
 8000f50:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f52:	4b19      	ldr	r3, [pc, #100]	; (8000fb8 <MX_ADC1_Init+0x98>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f5a:	4b17      	ldr	r3, [pc, #92]	; (8000fb8 <MX_ADC1_Init+0x98>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f60:	4b15      	ldr	r3, [pc, #84]	; (8000fb8 <MX_ADC1_Init+0x98>)
 8000f62:	4a17      	ldr	r2, [pc, #92]	; (8000fc0 <MX_ADC1_Init+0xa0>)
 8000f64:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f66:	4b14      	ldr	r3, [pc, #80]	; (8000fb8 <MX_ADC1_Init+0x98>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000f6c:	4b12      	ldr	r3, [pc, #72]	; (8000fb8 <MX_ADC1_Init+0x98>)
 8000f6e:	2201      	movs	r2, #1
 8000f70:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000f72:	4b11      	ldr	r3, [pc, #68]	; (8000fb8 <MX_ADC1_Init+0x98>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f7a:	4b0f      	ldr	r3, [pc, #60]	; (8000fb8 <MX_ADC1_Init+0x98>)
 8000f7c:	2201      	movs	r2, #1
 8000f7e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f80:	480d      	ldr	r0, [pc, #52]	; (8000fb8 <MX_ADC1_Init+0x98>)
 8000f82:	f000 fc7d 	bl	8001880 <HAL_ADC_Init>
 8000f86:	4603      	mov	r3, r0
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d001      	beq.n	8000f90 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000f8c:	f000 f9f0 	bl	8001370 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000f90:	2309      	movs	r3, #9
 8000f92:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000f94:	2301      	movs	r3, #1
 8000f96:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f9c:	463b      	mov	r3, r7
 8000f9e:	4619      	mov	r1, r3
 8000fa0:	4805      	ldr	r0, [pc, #20]	; (8000fb8 <MX_ADC1_Init+0x98>)
 8000fa2:	f000 fdfd 	bl	8001ba0 <HAL_ADC_ConfigChannel>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d001      	beq.n	8000fb0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000fac:	f000 f9e0 	bl	8001370 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000fb0:	bf00      	nop
 8000fb2:	3710      	adds	r7, #16
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bd80      	pop	{r7, pc}
 8000fb8:	20000028 	.word	0x20000028
 8000fbc:	40012000 	.word	0x40012000
 8000fc0:	0f000001 	.word	0x0f000001

08000fc4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b08e      	sub	sp, #56	; 0x38
 8000fc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000fca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000fce:	2200      	movs	r2, #0
 8000fd0:	601a      	str	r2, [r3, #0]
 8000fd2:	605a      	str	r2, [r3, #4]
 8000fd4:	609a      	str	r2, [r3, #8]
 8000fd6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fd8:	f107 0320 	add.w	r3, r7, #32
 8000fdc:	2200      	movs	r2, #0
 8000fde:	601a      	str	r2, [r3, #0]
 8000fe0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000fe2:	1d3b      	adds	r3, r7, #4
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	601a      	str	r2, [r3, #0]
 8000fe8:	605a      	str	r2, [r3, #4]
 8000fea:	609a      	str	r2, [r3, #8]
 8000fec:	60da      	str	r2, [r3, #12]
 8000fee:	611a      	str	r2, [r3, #16]
 8000ff0:	615a      	str	r2, [r3, #20]
 8000ff2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000ff4:	4b38      	ldr	r3, [pc, #224]	; (80010d8 <MX_TIM2_Init+0x114>)
 8000ff6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ffa:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 99;
 8000ffc:	4b36      	ldr	r3, [pc, #216]	; (80010d8 <MX_TIM2_Init+0x114>)
 8000ffe:	2263      	movs	r2, #99	; 0x63
 8001000:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001002:	4b35      	ldr	r3, [pc, #212]	; (80010d8 <MX_TIM2_Init+0x114>)
 8001004:	2200      	movs	r2, #0
 8001006:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 14400;
 8001008:	4b33      	ldr	r3, [pc, #204]	; (80010d8 <MX_TIM2_Init+0x114>)
 800100a:	f44f 5261 	mov.w	r2, #14400	; 0x3840
 800100e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001010:	4b31      	ldr	r3, [pc, #196]	; (80010d8 <MX_TIM2_Init+0x114>)
 8001012:	2200      	movs	r2, #0
 8001014:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001016:	4b30      	ldr	r3, [pc, #192]	; (80010d8 <MX_TIM2_Init+0x114>)
 8001018:	2280      	movs	r2, #128	; 0x80
 800101a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800101c:	482e      	ldr	r0, [pc, #184]	; (80010d8 <MX_TIM2_Init+0x114>)
 800101e:	f001 ff11 	bl	8002e44 <HAL_TIM_Base_Init>
 8001022:	4603      	mov	r3, r0
 8001024:	2b00      	cmp	r3, #0
 8001026:	d001      	beq.n	800102c <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001028:	f000 f9a2 	bl	8001370 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800102c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001030:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001032:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001036:	4619      	mov	r1, r3
 8001038:	4827      	ldr	r0, [pc, #156]	; (80010d8 <MX_TIM2_Init+0x114>)
 800103a:	f002 f91d 	bl	8003278 <HAL_TIM_ConfigClockSource>
 800103e:	4603      	mov	r3, r0
 8001040:	2b00      	cmp	r3, #0
 8001042:	d001      	beq.n	8001048 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001044:	f000 f994 	bl	8001370 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001048:	4823      	ldr	r0, [pc, #140]	; (80010d8 <MX_TIM2_Init+0x114>)
 800104a:	f001 ff4a 	bl	8002ee2 <HAL_TIM_PWM_Init>
 800104e:	4603      	mov	r3, r0
 8001050:	2b00      	cmp	r3, #0
 8001052:	d001      	beq.n	8001058 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001054:	f000 f98c 	bl	8001370 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001058:	2300      	movs	r3, #0
 800105a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800105c:	2300      	movs	r3, #0
 800105e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001060:	f107 0320 	add.w	r3, r7, #32
 8001064:	4619      	mov	r1, r3
 8001066:	481c      	ldr	r0, [pc, #112]	; (80010d8 <MX_TIM2_Init+0x114>)
 8001068:	f002 fc9a 	bl	80039a0 <HAL_TIMEx_MasterConfigSynchronization>
 800106c:	4603      	mov	r3, r0
 800106e:	2b00      	cmp	r3, #0
 8001070:	d001      	beq.n	8001076 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8001072:	f000 f97d 	bl	8001370 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001076:	2360      	movs	r3, #96	; 0x60
 8001078:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800107a:	2300      	movs	r3, #0
 800107c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800107e:	2300      	movs	r3, #0
 8001080:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001082:	2300      	movs	r3, #0
 8001084:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001086:	1d3b      	adds	r3, r7, #4
 8001088:	2200      	movs	r2, #0
 800108a:	4619      	mov	r1, r3
 800108c:	4812      	ldr	r0, [pc, #72]	; (80010d8 <MX_TIM2_Init+0x114>)
 800108e:	f002 f831 	bl	80030f4 <HAL_TIM_PWM_ConfigChannel>
 8001092:	4603      	mov	r3, r0
 8001094:	2b00      	cmp	r3, #0
 8001096:	d001      	beq.n	800109c <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8001098:	f000 f96a 	bl	8001370 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800109c:	1d3b      	adds	r3, r7, #4
 800109e:	2204      	movs	r2, #4
 80010a0:	4619      	mov	r1, r3
 80010a2:	480d      	ldr	r0, [pc, #52]	; (80010d8 <MX_TIM2_Init+0x114>)
 80010a4:	f002 f826 	bl	80030f4 <HAL_TIM_PWM_ConfigChannel>
 80010a8:	4603      	mov	r3, r0
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d001      	beq.n	80010b2 <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 80010ae:	f000 f95f 	bl	8001370 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80010b2:	1d3b      	adds	r3, r7, #4
 80010b4:	2208      	movs	r2, #8
 80010b6:	4619      	mov	r1, r3
 80010b8:	4807      	ldr	r0, [pc, #28]	; (80010d8 <MX_TIM2_Init+0x114>)
 80010ba:	f002 f81b 	bl	80030f4 <HAL_TIM_PWM_ConfigChannel>
 80010be:	4603      	mov	r3, r0
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d001      	beq.n	80010c8 <MX_TIM2_Init+0x104>
  {
    Error_Handler();
 80010c4:	f000 f954 	bl	8001370 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80010c8:	4803      	ldr	r0, [pc, #12]	; (80010d8 <MX_TIM2_Init+0x114>)
 80010ca:	f000 f9f9 	bl	80014c0 <HAL_TIM_MspPostInit>

}
 80010ce:	bf00      	nop
 80010d0:	3738      	adds	r7, #56	; 0x38
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	20000070 	.word	0x20000070

080010dc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b08e      	sub	sp, #56	; 0x38
 80010e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010e2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80010e6:	2200      	movs	r2, #0
 80010e8:	601a      	str	r2, [r3, #0]
 80010ea:	605a      	str	r2, [r3, #4]
 80010ec:	609a      	str	r2, [r3, #8]
 80010ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010f0:	f107 0320 	add.w	r3, r7, #32
 80010f4:	2200      	movs	r2, #0
 80010f6:	601a      	str	r2, [r3, #0]
 80010f8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80010fa:	1d3b      	adds	r3, r7, #4
 80010fc:	2200      	movs	r2, #0
 80010fe:	601a      	str	r2, [r3, #0]
 8001100:	605a      	str	r2, [r3, #4]
 8001102:	609a      	str	r2, [r3, #8]
 8001104:	60da      	str	r2, [r3, #12]
 8001106:	611a      	str	r2, [r3, #16]
 8001108:	615a      	str	r2, [r3, #20]
 800110a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800110c:	4b37      	ldr	r3, [pc, #220]	; (80011ec <MX_TIM3_Init+0x110>)
 800110e:	4a38      	ldr	r2, [pc, #224]	; (80011f0 <MX_TIM3_Init+0x114>)
 8001110:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 99;
 8001112:	4b36      	ldr	r3, [pc, #216]	; (80011ec <MX_TIM3_Init+0x110>)
 8001114:	2263      	movs	r2, #99	; 0x63
 8001116:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001118:	4b34      	ldr	r3, [pc, #208]	; (80011ec <MX_TIM3_Init+0x110>)
 800111a:	2200      	movs	r2, #0
 800111c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 14400;
 800111e:	4b33      	ldr	r3, [pc, #204]	; (80011ec <MX_TIM3_Init+0x110>)
 8001120:	f44f 5261 	mov.w	r2, #14400	; 0x3840
 8001124:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001126:	4b31      	ldr	r3, [pc, #196]	; (80011ec <MX_TIM3_Init+0x110>)
 8001128:	2200      	movs	r2, #0
 800112a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800112c:	4b2f      	ldr	r3, [pc, #188]	; (80011ec <MX_TIM3_Init+0x110>)
 800112e:	2280      	movs	r2, #128	; 0x80
 8001130:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001132:	482e      	ldr	r0, [pc, #184]	; (80011ec <MX_TIM3_Init+0x110>)
 8001134:	f001 fe86 	bl	8002e44 <HAL_TIM_Base_Init>
 8001138:	4603      	mov	r3, r0
 800113a:	2b00      	cmp	r3, #0
 800113c:	d001      	beq.n	8001142 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 800113e:	f000 f917 	bl	8001370 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001142:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001146:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001148:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800114c:	4619      	mov	r1, r3
 800114e:	4827      	ldr	r0, [pc, #156]	; (80011ec <MX_TIM3_Init+0x110>)
 8001150:	f002 f892 	bl	8003278 <HAL_TIM_ConfigClockSource>
 8001154:	4603      	mov	r3, r0
 8001156:	2b00      	cmp	r3, #0
 8001158:	d001      	beq.n	800115e <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 800115a:	f000 f909 	bl	8001370 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800115e:	4823      	ldr	r0, [pc, #140]	; (80011ec <MX_TIM3_Init+0x110>)
 8001160:	f001 febf 	bl	8002ee2 <HAL_TIM_PWM_Init>
 8001164:	4603      	mov	r3, r0
 8001166:	2b00      	cmp	r3, #0
 8001168:	d001      	beq.n	800116e <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800116a:	f000 f901 	bl	8001370 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800116e:	2300      	movs	r3, #0
 8001170:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001172:	2300      	movs	r3, #0
 8001174:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001176:	f107 0320 	add.w	r3, r7, #32
 800117a:	4619      	mov	r1, r3
 800117c:	481b      	ldr	r0, [pc, #108]	; (80011ec <MX_TIM3_Init+0x110>)
 800117e:	f002 fc0f 	bl	80039a0 <HAL_TIMEx_MasterConfigSynchronization>
 8001182:	4603      	mov	r3, r0
 8001184:	2b00      	cmp	r3, #0
 8001186:	d001      	beq.n	800118c <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001188:	f000 f8f2 	bl	8001370 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800118c:	2360      	movs	r3, #96	; 0x60
 800118e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001190:	2300      	movs	r3, #0
 8001192:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001194:	2300      	movs	r3, #0
 8001196:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001198:	2300      	movs	r3, #0
 800119a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800119c:	1d3b      	adds	r3, r7, #4
 800119e:	2200      	movs	r2, #0
 80011a0:	4619      	mov	r1, r3
 80011a2:	4812      	ldr	r0, [pc, #72]	; (80011ec <MX_TIM3_Init+0x110>)
 80011a4:	f001 ffa6 	bl	80030f4 <HAL_TIM_PWM_ConfigChannel>
 80011a8:	4603      	mov	r3, r0
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d001      	beq.n	80011b2 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80011ae:	f000 f8df 	bl	8001370 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80011b2:	1d3b      	adds	r3, r7, #4
 80011b4:	2204      	movs	r2, #4
 80011b6:	4619      	mov	r1, r3
 80011b8:	480c      	ldr	r0, [pc, #48]	; (80011ec <MX_TIM3_Init+0x110>)
 80011ba:	f001 ff9b 	bl	80030f4 <HAL_TIM_PWM_ConfigChannel>
 80011be:	4603      	mov	r3, r0
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d001      	beq.n	80011c8 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 80011c4:	f000 f8d4 	bl	8001370 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80011c8:	1d3b      	adds	r3, r7, #4
 80011ca:	2208      	movs	r2, #8
 80011cc:	4619      	mov	r1, r3
 80011ce:	4807      	ldr	r0, [pc, #28]	; (80011ec <MX_TIM3_Init+0x110>)
 80011d0:	f001 ff90 	bl	80030f4 <HAL_TIM_PWM_ConfigChannel>
 80011d4:	4603      	mov	r3, r0
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d001      	beq.n	80011de <MX_TIM3_Init+0x102>
  {
    Error_Handler();
 80011da:	f000 f8c9 	bl	8001370 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80011de:	4803      	ldr	r0, [pc, #12]	; (80011ec <MX_TIM3_Init+0x110>)
 80011e0:	f000 f96e 	bl	80014c0 <HAL_TIM_MspPostInit>

}
 80011e4:	bf00      	nop
 80011e6:	3738      	adds	r7, #56	; 0x38
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bd80      	pop	{r7, pc}
 80011ec:	200000b8 	.word	0x200000b8
 80011f0:	40000400 	.word	0x40000400

080011f4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80011f8:	4b11      	ldr	r3, [pc, #68]	; (8001240 <MX_USART2_UART_Init+0x4c>)
 80011fa:	4a12      	ldr	r2, [pc, #72]	; (8001244 <MX_USART2_UART_Init+0x50>)
 80011fc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80011fe:	4b10      	ldr	r3, [pc, #64]	; (8001240 <MX_USART2_UART_Init+0x4c>)
 8001200:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001204:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001206:	4b0e      	ldr	r3, [pc, #56]	; (8001240 <MX_USART2_UART_Init+0x4c>)
 8001208:	2200      	movs	r2, #0
 800120a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800120c:	4b0c      	ldr	r3, [pc, #48]	; (8001240 <MX_USART2_UART_Init+0x4c>)
 800120e:	2200      	movs	r2, #0
 8001210:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001212:	4b0b      	ldr	r3, [pc, #44]	; (8001240 <MX_USART2_UART_Init+0x4c>)
 8001214:	2200      	movs	r2, #0
 8001216:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001218:	4b09      	ldr	r3, [pc, #36]	; (8001240 <MX_USART2_UART_Init+0x4c>)
 800121a:	220c      	movs	r2, #12
 800121c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800121e:	4b08      	ldr	r3, [pc, #32]	; (8001240 <MX_USART2_UART_Init+0x4c>)
 8001220:	2200      	movs	r2, #0
 8001222:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001224:	4b06      	ldr	r3, [pc, #24]	; (8001240 <MX_USART2_UART_Init+0x4c>)
 8001226:	2200      	movs	r2, #0
 8001228:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800122a:	4805      	ldr	r0, [pc, #20]	; (8001240 <MX_USART2_UART_Init+0x4c>)
 800122c:	f002 fc26 	bl	8003a7c <HAL_UART_Init>
 8001230:	4603      	mov	r3, r0
 8001232:	2b00      	cmp	r3, #0
 8001234:	d001      	beq.n	800123a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001236:	f000 f89b 	bl	8001370 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800123a:	bf00      	nop
 800123c:	bd80      	pop	{r7, pc}
 800123e:	bf00      	nop
 8001240:	20000100 	.word	0x20000100
 8001244:	40004400 	.word	0x40004400

08001248 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b08a      	sub	sp, #40	; 0x28
 800124c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800124e:	f107 0314 	add.w	r3, r7, #20
 8001252:	2200      	movs	r2, #0
 8001254:	601a      	str	r2, [r3, #0]
 8001256:	605a      	str	r2, [r3, #4]
 8001258:	609a      	str	r2, [r3, #8]
 800125a:	60da      	str	r2, [r3, #12]
 800125c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800125e:	2300      	movs	r3, #0
 8001260:	613b      	str	r3, [r7, #16]
 8001262:	4b3f      	ldr	r3, [pc, #252]	; (8001360 <MX_GPIO_Init+0x118>)
 8001264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001266:	4a3e      	ldr	r2, [pc, #248]	; (8001360 <MX_GPIO_Init+0x118>)
 8001268:	f043 0304 	orr.w	r3, r3, #4
 800126c:	6313      	str	r3, [r2, #48]	; 0x30
 800126e:	4b3c      	ldr	r3, [pc, #240]	; (8001360 <MX_GPIO_Init+0x118>)
 8001270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001272:	f003 0304 	and.w	r3, r3, #4
 8001276:	613b      	str	r3, [r7, #16]
 8001278:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800127a:	2300      	movs	r3, #0
 800127c:	60fb      	str	r3, [r7, #12]
 800127e:	4b38      	ldr	r3, [pc, #224]	; (8001360 <MX_GPIO_Init+0x118>)
 8001280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001282:	4a37      	ldr	r2, [pc, #220]	; (8001360 <MX_GPIO_Init+0x118>)
 8001284:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001288:	6313      	str	r3, [r2, #48]	; 0x30
 800128a:	4b35      	ldr	r3, [pc, #212]	; (8001360 <MX_GPIO_Init+0x118>)
 800128c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800128e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001292:	60fb      	str	r3, [r7, #12]
 8001294:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001296:	2300      	movs	r3, #0
 8001298:	60bb      	str	r3, [r7, #8]
 800129a:	4b31      	ldr	r3, [pc, #196]	; (8001360 <MX_GPIO_Init+0x118>)
 800129c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800129e:	4a30      	ldr	r2, [pc, #192]	; (8001360 <MX_GPIO_Init+0x118>)
 80012a0:	f043 0301 	orr.w	r3, r3, #1
 80012a4:	6313      	str	r3, [r2, #48]	; 0x30
 80012a6:	4b2e      	ldr	r3, [pc, #184]	; (8001360 <MX_GPIO_Init+0x118>)
 80012a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012aa:	f003 0301 	and.w	r3, r3, #1
 80012ae:	60bb      	str	r3, [r7, #8]
 80012b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012b2:	2300      	movs	r3, #0
 80012b4:	607b      	str	r3, [r7, #4]
 80012b6:	4b2a      	ldr	r3, [pc, #168]	; (8001360 <MX_GPIO_Init+0x118>)
 80012b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ba:	4a29      	ldr	r2, [pc, #164]	; (8001360 <MX_GPIO_Init+0x118>)
 80012bc:	f043 0302 	orr.w	r3, r3, #2
 80012c0:	6313      	str	r3, [r2, #48]	; 0x30
 80012c2:	4b27      	ldr	r3, [pc, #156]	; (8001360 <MX_GPIO_Init+0x118>)
 80012c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c6:	f003 0302 	and.w	r3, r3, #2
 80012ca:	607b      	str	r3, [r7, #4]
 80012cc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_9, GPIO_PIN_RESET);
 80012ce:	2200      	movs	r2, #0
 80012d0:	f44f 7108 	mov.w	r1, #544	; 0x220
 80012d4:	4823      	ldr	r0, [pc, #140]	; (8001364 <MX_GPIO_Init+0x11c>)
 80012d6:	f001 f903 	bl	80024e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8, GPIO_PIN_RESET);
 80012da:	2200      	movs	r2, #0
 80012dc:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 80012e0:	4821      	ldr	r0, [pc, #132]	; (8001368 <MX_GPIO_Init+0x120>)
 80012e2:	f001 f8fd 	bl	80024e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80012e6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80012ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80012ec:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80012f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f2:	2300      	movs	r3, #0
 80012f4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80012f6:	f107 0314 	add.w	r3, r7, #20
 80012fa:	4619      	mov	r1, r3
 80012fc:	481a      	ldr	r0, [pc, #104]	; (8001368 <MX_GPIO_Init+0x120>)
 80012fe:	f000 ff53 	bl	80021a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA9 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_9;
 8001302:	f44f 7308 	mov.w	r3, #544	; 0x220
 8001306:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001308:	2301      	movs	r3, #1
 800130a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800130c:	2300      	movs	r3, #0
 800130e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001310:	2300      	movs	r3, #0
 8001312:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001314:	f107 0314 	add.w	r3, r7, #20
 8001318:	4619      	mov	r1, r3
 800131a:	4812      	ldr	r0, [pc, #72]	; (8001364 <MX_GPIO_Init+0x11c>)
 800131c:	f000 ff44 	bl	80021a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001320:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8001324:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001326:	2300      	movs	r3, #0
 8001328:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800132a:	2302      	movs	r3, #2
 800132c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800132e:	f107 0314 	add.w	r3, r7, #20
 8001332:	4619      	mov	r1, r3
 8001334:	480d      	ldr	r0, [pc, #52]	; (800136c <MX_GPIO_Init+0x124>)
 8001336:	f000 ff37 	bl	80021a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC6 PC7 PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 800133a:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 800133e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001340:	2301      	movs	r3, #1
 8001342:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001344:	2302      	movs	r3, #2
 8001346:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001348:	2300      	movs	r3, #0
 800134a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800134c:	f107 0314 	add.w	r3, r7, #20
 8001350:	4619      	mov	r1, r3
 8001352:	4805      	ldr	r0, [pc, #20]	; (8001368 <MX_GPIO_Init+0x120>)
 8001354:	f000 ff28 	bl	80021a8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001358:	bf00      	nop
 800135a:	3728      	adds	r7, #40	; 0x28
 800135c:	46bd      	mov	sp, r7
 800135e:	bd80      	pop	{r7, pc}
 8001360:	40023800 	.word	0x40023800
 8001364:	40020000 	.word	0x40020000
 8001368:	40020800 	.word	0x40020800
 800136c:	40020400 	.word	0x40020400

08001370 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001370:	b480      	push	{r7}
 8001372:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001374:	b672      	cpsid	i
}
 8001376:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001378:	e7fe      	b.n	8001378 <Error_Handler+0x8>
	...

0800137c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b082      	sub	sp, #8
 8001380:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001382:	2300      	movs	r3, #0
 8001384:	607b      	str	r3, [r7, #4]
 8001386:	4b10      	ldr	r3, [pc, #64]	; (80013c8 <HAL_MspInit+0x4c>)
 8001388:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800138a:	4a0f      	ldr	r2, [pc, #60]	; (80013c8 <HAL_MspInit+0x4c>)
 800138c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001390:	6453      	str	r3, [r2, #68]	; 0x44
 8001392:	4b0d      	ldr	r3, [pc, #52]	; (80013c8 <HAL_MspInit+0x4c>)
 8001394:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001396:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800139a:	607b      	str	r3, [r7, #4]
 800139c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800139e:	2300      	movs	r3, #0
 80013a0:	603b      	str	r3, [r7, #0]
 80013a2:	4b09      	ldr	r3, [pc, #36]	; (80013c8 <HAL_MspInit+0x4c>)
 80013a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013a6:	4a08      	ldr	r2, [pc, #32]	; (80013c8 <HAL_MspInit+0x4c>)
 80013a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013ac:	6413      	str	r3, [r2, #64]	; 0x40
 80013ae:	4b06      	ldr	r3, [pc, #24]	; (80013c8 <HAL_MspInit+0x4c>)
 80013b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013b6:	603b      	str	r3, [r7, #0]
 80013b8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80013ba:	2007      	movs	r0, #7
 80013bc:	f000 fec0 	bl	8002140 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013c0:	bf00      	nop
 80013c2:	3708      	adds	r7, #8
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd80      	pop	{r7, pc}
 80013c8:	40023800 	.word	0x40023800

080013cc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b08a      	sub	sp, #40	; 0x28
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013d4:	f107 0314 	add.w	r3, r7, #20
 80013d8:	2200      	movs	r2, #0
 80013da:	601a      	str	r2, [r3, #0]
 80013dc:	605a      	str	r2, [r3, #4]
 80013de:	609a      	str	r2, [r3, #8]
 80013e0:	60da      	str	r2, [r3, #12]
 80013e2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	4a17      	ldr	r2, [pc, #92]	; (8001448 <HAL_ADC_MspInit+0x7c>)
 80013ea:	4293      	cmp	r3, r2
 80013ec:	d127      	bne.n	800143e <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80013ee:	2300      	movs	r3, #0
 80013f0:	613b      	str	r3, [r7, #16]
 80013f2:	4b16      	ldr	r3, [pc, #88]	; (800144c <HAL_ADC_MspInit+0x80>)
 80013f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013f6:	4a15      	ldr	r2, [pc, #84]	; (800144c <HAL_ADC_MspInit+0x80>)
 80013f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013fc:	6453      	str	r3, [r2, #68]	; 0x44
 80013fe:	4b13      	ldr	r3, [pc, #76]	; (800144c <HAL_ADC_MspInit+0x80>)
 8001400:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001402:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001406:	613b      	str	r3, [r7, #16]
 8001408:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800140a:	2300      	movs	r3, #0
 800140c:	60fb      	str	r3, [r7, #12]
 800140e:	4b0f      	ldr	r3, [pc, #60]	; (800144c <HAL_ADC_MspInit+0x80>)
 8001410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001412:	4a0e      	ldr	r2, [pc, #56]	; (800144c <HAL_ADC_MspInit+0x80>)
 8001414:	f043 0302 	orr.w	r3, r3, #2
 8001418:	6313      	str	r3, [r2, #48]	; 0x30
 800141a:	4b0c      	ldr	r3, [pc, #48]	; (800144c <HAL_ADC_MspInit+0x80>)
 800141c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800141e:	f003 0302 	and.w	r3, r3, #2
 8001422:	60fb      	str	r3, [r7, #12]
 8001424:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001426:	2302      	movs	r3, #2
 8001428:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800142a:	2303      	movs	r3, #3
 800142c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800142e:	2300      	movs	r3, #0
 8001430:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001432:	f107 0314 	add.w	r3, r7, #20
 8001436:	4619      	mov	r1, r3
 8001438:	4805      	ldr	r0, [pc, #20]	; (8001450 <HAL_ADC_MspInit+0x84>)
 800143a:	f000 feb5 	bl	80021a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800143e:	bf00      	nop
 8001440:	3728      	adds	r7, #40	; 0x28
 8001442:	46bd      	mov	sp, r7
 8001444:	bd80      	pop	{r7, pc}
 8001446:	bf00      	nop
 8001448:	40012000 	.word	0x40012000
 800144c:	40023800 	.word	0x40023800
 8001450:	40020400 	.word	0x40020400

08001454 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001454:	b480      	push	{r7}
 8001456:	b085      	sub	sp, #20
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001464:	d10e      	bne.n	8001484 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001466:	2300      	movs	r3, #0
 8001468:	60fb      	str	r3, [r7, #12]
 800146a:	4b13      	ldr	r3, [pc, #76]	; (80014b8 <HAL_TIM_Base_MspInit+0x64>)
 800146c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800146e:	4a12      	ldr	r2, [pc, #72]	; (80014b8 <HAL_TIM_Base_MspInit+0x64>)
 8001470:	f043 0301 	orr.w	r3, r3, #1
 8001474:	6413      	str	r3, [r2, #64]	; 0x40
 8001476:	4b10      	ldr	r3, [pc, #64]	; (80014b8 <HAL_TIM_Base_MspInit+0x64>)
 8001478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800147a:	f003 0301 	and.w	r3, r3, #1
 800147e:	60fb      	str	r3, [r7, #12]
 8001480:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001482:	e012      	b.n	80014aa <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM3)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	4a0c      	ldr	r2, [pc, #48]	; (80014bc <HAL_TIM_Base_MspInit+0x68>)
 800148a:	4293      	cmp	r3, r2
 800148c:	d10d      	bne.n	80014aa <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800148e:	2300      	movs	r3, #0
 8001490:	60bb      	str	r3, [r7, #8]
 8001492:	4b09      	ldr	r3, [pc, #36]	; (80014b8 <HAL_TIM_Base_MspInit+0x64>)
 8001494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001496:	4a08      	ldr	r2, [pc, #32]	; (80014b8 <HAL_TIM_Base_MspInit+0x64>)
 8001498:	f043 0302 	orr.w	r3, r3, #2
 800149c:	6413      	str	r3, [r2, #64]	; 0x40
 800149e:	4b06      	ldr	r3, [pc, #24]	; (80014b8 <HAL_TIM_Base_MspInit+0x64>)
 80014a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014a2:	f003 0302 	and.w	r3, r3, #2
 80014a6:	60bb      	str	r3, [r7, #8]
 80014a8:	68bb      	ldr	r3, [r7, #8]
}
 80014aa:	bf00      	nop
 80014ac:	3714      	adds	r7, #20
 80014ae:	46bd      	mov	sp, r7
 80014b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b4:	4770      	bx	lr
 80014b6:	bf00      	nop
 80014b8:	40023800 	.word	0x40023800
 80014bc:	40000400 	.word	0x40000400

080014c0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b08c      	sub	sp, #48	; 0x30
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014c8:	f107 031c 	add.w	r3, r7, #28
 80014cc:	2200      	movs	r2, #0
 80014ce:	601a      	str	r2, [r3, #0]
 80014d0:	605a      	str	r2, [r3, #4]
 80014d2:	609a      	str	r2, [r3, #8]
 80014d4:	60da      	str	r2, [r3, #12]
 80014d6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80014e0:	d13d      	bne.n	800155e <HAL_TIM_MspPostInit+0x9e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014e2:	2300      	movs	r3, #0
 80014e4:	61bb      	str	r3, [r7, #24]
 80014e6:	4b40      	ldr	r3, [pc, #256]	; (80015e8 <HAL_TIM_MspPostInit+0x128>)
 80014e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ea:	4a3f      	ldr	r2, [pc, #252]	; (80015e8 <HAL_TIM_MspPostInit+0x128>)
 80014ec:	f043 0301 	orr.w	r3, r3, #1
 80014f0:	6313      	str	r3, [r2, #48]	; 0x30
 80014f2:	4b3d      	ldr	r3, [pc, #244]	; (80015e8 <HAL_TIM_MspPostInit+0x128>)
 80014f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f6:	f003 0301 	and.w	r3, r3, #1
 80014fa:	61bb      	str	r3, [r7, #24]
 80014fc:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014fe:	2300      	movs	r3, #0
 8001500:	617b      	str	r3, [r7, #20]
 8001502:	4b39      	ldr	r3, [pc, #228]	; (80015e8 <HAL_TIM_MspPostInit+0x128>)
 8001504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001506:	4a38      	ldr	r2, [pc, #224]	; (80015e8 <HAL_TIM_MspPostInit+0x128>)
 8001508:	f043 0302 	orr.w	r3, r3, #2
 800150c:	6313      	str	r3, [r2, #48]	; 0x30
 800150e:	4b36      	ldr	r3, [pc, #216]	; (80015e8 <HAL_TIM_MspPostInit+0x128>)
 8001510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001512:	f003 0302 	and.w	r3, r3, #2
 8001516:	617b      	str	r3, [r7, #20]
 8001518:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800151a:	2303      	movs	r3, #3
 800151c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800151e:	2302      	movs	r3, #2
 8001520:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001522:	2300      	movs	r3, #0
 8001524:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001526:	2300      	movs	r3, #0
 8001528:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800152a:	2301      	movs	r3, #1
 800152c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800152e:	f107 031c 	add.w	r3, r7, #28
 8001532:	4619      	mov	r1, r3
 8001534:	482d      	ldr	r0, [pc, #180]	; (80015ec <HAL_TIM_MspPostInit+0x12c>)
 8001536:	f000 fe37 	bl	80021a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800153a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800153e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001540:	2302      	movs	r3, #2
 8001542:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001544:	2300      	movs	r3, #0
 8001546:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001548:	2300      	movs	r3, #0
 800154a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800154c:	2301      	movs	r3, #1
 800154e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001550:	f107 031c 	add.w	r3, r7, #28
 8001554:	4619      	mov	r1, r3
 8001556:	4826      	ldr	r0, [pc, #152]	; (80015f0 <HAL_TIM_MspPostInit+0x130>)
 8001558:	f000 fe26 	bl	80021a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800155c:	e040      	b.n	80015e0 <HAL_TIM_MspPostInit+0x120>
  else if(htim->Instance==TIM3)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	4a24      	ldr	r2, [pc, #144]	; (80015f4 <HAL_TIM_MspPostInit+0x134>)
 8001564:	4293      	cmp	r3, r2
 8001566:	d13b      	bne.n	80015e0 <HAL_TIM_MspPostInit+0x120>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001568:	2300      	movs	r3, #0
 800156a:	613b      	str	r3, [r7, #16]
 800156c:	4b1e      	ldr	r3, [pc, #120]	; (80015e8 <HAL_TIM_MspPostInit+0x128>)
 800156e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001570:	4a1d      	ldr	r2, [pc, #116]	; (80015e8 <HAL_TIM_MspPostInit+0x128>)
 8001572:	f043 0301 	orr.w	r3, r3, #1
 8001576:	6313      	str	r3, [r2, #48]	; 0x30
 8001578:	4b1b      	ldr	r3, [pc, #108]	; (80015e8 <HAL_TIM_MspPostInit+0x128>)
 800157a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800157c:	f003 0301 	and.w	r3, r3, #1
 8001580:	613b      	str	r3, [r7, #16]
 8001582:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001584:	2300      	movs	r3, #0
 8001586:	60fb      	str	r3, [r7, #12]
 8001588:	4b17      	ldr	r3, [pc, #92]	; (80015e8 <HAL_TIM_MspPostInit+0x128>)
 800158a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800158c:	4a16      	ldr	r2, [pc, #88]	; (80015e8 <HAL_TIM_MspPostInit+0x128>)
 800158e:	f043 0302 	orr.w	r3, r3, #2
 8001592:	6313      	str	r3, [r2, #48]	; 0x30
 8001594:	4b14      	ldr	r3, [pc, #80]	; (80015e8 <HAL_TIM_MspPostInit+0x128>)
 8001596:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001598:	f003 0302 	and.w	r3, r3, #2
 800159c:	60fb      	str	r3, [r7, #12]
 800159e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80015a0:	23c0      	movs	r3, #192	; 0xc0
 80015a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015a4:	2302      	movs	r3, #2
 80015a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a8:	2300      	movs	r3, #0
 80015aa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ac:	2300      	movs	r3, #0
 80015ae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80015b0:	2302      	movs	r3, #2
 80015b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015b4:	f107 031c 	add.w	r3, r7, #28
 80015b8:	4619      	mov	r1, r3
 80015ba:	480c      	ldr	r0, [pc, #48]	; (80015ec <HAL_TIM_MspPostInit+0x12c>)
 80015bc:	f000 fdf4 	bl	80021a8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80015c0:	2301      	movs	r3, #1
 80015c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015c4:	2302      	movs	r3, #2
 80015c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c8:	2300      	movs	r3, #0
 80015ca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015cc:	2300      	movs	r3, #0
 80015ce:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80015d0:	2302      	movs	r3, #2
 80015d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015d4:	f107 031c 	add.w	r3, r7, #28
 80015d8:	4619      	mov	r1, r3
 80015da:	4805      	ldr	r0, [pc, #20]	; (80015f0 <HAL_TIM_MspPostInit+0x130>)
 80015dc:	f000 fde4 	bl	80021a8 <HAL_GPIO_Init>
}
 80015e0:	bf00      	nop
 80015e2:	3730      	adds	r7, #48	; 0x30
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bd80      	pop	{r7, pc}
 80015e8:	40023800 	.word	0x40023800
 80015ec:	40020000 	.word	0x40020000
 80015f0:	40020400 	.word	0x40020400
 80015f4:	40000400 	.word	0x40000400

080015f8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b08a      	sub	sp, #40	; 0x28
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001600:	f107 0314 	add.w	r3, r7, #20
 8001604:	2200      	movs	r2, #0
 8001606:	601a      	str	r2, [r3, #0]
 8001608:	605a      	str	r2, [r3, #4]
 800160a:	609a      	str	r2, [r3, #8]
 800160c:	60da      	str	r2, [r3, #12]
 800160e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	4a19      	ldr	r2, [pc, #100]	; (800167c <HAL_UART_MspInit+0x84>)
 8001616:	4293      	cmp	r3, r2
 8001618:	d12b      	bne.n	8001672 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800161a:	2300      	movs	r3, #0
 800161c:	613b      	str	r3, [r7, #16]
 800161e:	4b18      	ldr	r3, [pc, #96]	; (8001680 <HAL_UART_MspInit+0x88>)
 8001620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001622:	4a17      	ldr	r2, [pc, #92]	; (8001680 <HAL_UART_MspInit+0x88>)
 8001624:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001628:	6413      	str	r3, [r2, #64]	; 0x40
 800162a:	4b15      	ldr	r3, [pc, #84]	; (8001680 <HAL_UART_MspInit+0x88>)
 800162c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800162e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001632:	613b      	str	r3, [r7, #16]
 8001634:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001636:	2300      	movs	r3, #0
 8001638:	60fb      	str	r3, [r7, #12]
 800163a:	4b11      	ldr	r3, [pc, #68]	; (8001680 <HAL_UART_MspInit+0x88>)
 800163c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800163e:	4a10      	ldr	r2, [pc, #64]	; (8001680 <HAL_UART_MspInit+0x88>)
 8001640:	f043 0301 	orr.w	r3, r3, #1
 8001644:	6313      	str	r3, [r2, #48]	; 0x30
 8001646:	4b0e      	ldr	r3, [pc, #56]	; (8001680 <HAL_UART_MspInit+0x88>)
 8001648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800164a:	f003 0301 	and.w	r3, r3, #1
 800164e:	60fb      	str	r3, [r7, #12]
 8001650:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001652:	230c      	movs	r3, #12
 8001654:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001656:	2302      	movs	r3, #2
 8001658:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800165a:	2300      	movs	r3, #0
 800165c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800165e:	2300      	movs	r3, #0
 8001660:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001662:	2307      	movs	r3, #7
 8001664:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001666:	f107 0314 	add.w	r3, r7, #20
 800166a:	4619      	mov	r1, r3
 800166c:	4805      	ldr	r0, [pc, #20]	; (8001684 <HAL_UART_MspInit+0x8c>)
 800166e:	f000 fd9b 	bl	80021a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001672:	bf00      	nop
 8001674:	3728      	adds	r7, #40	; 0x28
 8001676:	46bd      	mov	sp, r7
 8001678:	bd80      	pop	{r7, pc}
 800167a:	bf00      	nop
 800167c:	40004400 	.word	0x40004400
 8001680:	40023800 	.word	0x40023800
 8001684:	40020000 	.word	0x40020000

08001688 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001688:	b480      	push	{r7}
 800168a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800168c:	e7fe      	b.n	800168c <NMI_Handler+0x4>

0800168e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800168e:	b480      	push	{r7}
 8001690:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001692:	e7fe      	b.n	8001692 <HardFault_Handler+0x4>

08001694 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001694:	b480      	push	{r7}
 8001696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001698:	e7fe      	b.n	8001698 <MemManage_Handler+0x4>

0800169a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800169a:	b480      	push	{r7}
 800169c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800169e:	e7fe      	b.n	800169e <BusFault_Handler+0x4>

080016a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016a0:	b480      	push	{r7}
 80016a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016a4:	e7fe      	b.n	80016a4 <UsageFault_Handler+0x4>

080016a6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016a6:	b480      	push	{r7}
 80016a8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016aa:	bf00      	nop
 80016ac:	46bd      	mov	sp, r7
 80016ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b2:	4770      	bx	lr

080016b4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016b4:	b480      	push	{r7}
 80016b6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016b8:	bf00      	nop
 80016ba:	46bd      	mov	sp, r7
 80016bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c0:	4770      	bx	lr

080016c2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016c2:	b480      	push	{r7}
 80016c4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016c6:	bf00      	nop
 80016c8:	46bd      	mov	sp, r7
 80016ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ce:	4770      	bx	lr

080016d0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016d4:	f000 f890 	bl	80017f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016d8:	bf00      	nop
 80016da:	bd80      	pop	{r7, pc}

080016dc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80016dc:	b480      	push	{r7}
 80016de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80016e0:	4b06      	ldr	r3, [pc, #24]	; (80016fc <SystemInit+0x20>)
 80016e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80016e6:	4a05      	ldr	r2, [pc, #20]	; (80016fc <SystemInit+0x20>)
 80016e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80016ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80016f0:	bf00      	nop
 80016f2:	46bd      	mov	sp, r7
 80016f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f8:	4770      	bx	lr
 80016fa:	bf00      	nop
 80016fc:	e000ed00 	.word	0xe000ed00

08001700 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001700:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001738 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001704:	480d      	ldr	r0, [pc, #52]	; (800173c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001706:	490e      	ldr	r1, [pc, #56]	; (8001740 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001708:	4a0e      	ldr	r2, [pc, #56]	; (8001744 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800170a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800170c:	e002      	b.n	8001714 <LoopCopyDataInit>

0800170e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800170e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001710:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001712:	3304      	adds	r3, #4

08001714 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001714:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001716:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001718:	d3f9      	bcc.n	800170e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800171a:	4a0b      	ldr	r2, [pc, #44]	; (8001748 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800171c:	4c0b      	ldr	r4, [pc, #44]	; (800174c <LoopFillZerobss+0x26>)
  movs r3, #0
 800171e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001720:	e001      	b.n	8001726 <LoopFillZerobss>

08001722 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001722:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001724:	3204      	adds	r2, #4

08001726 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001726:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001728:	d3fb      	bcc.n	8001722 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800172a:	f7ff ffd7 	bl	80016dc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800172e:	f002 fc6f 	bl	8004010 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001732:	f7ff fa81 	bl	8000c38 <main>
  bx  lr    
 8001736:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001738:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800173c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001740:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001744:	08004098 	.word	0x08004098
  ldr r2, =_sbss
 8001748:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800174c:	20000148 	.word	0x20000148

08001750 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001750:	e7fe      	b.n	8001750 <ADC_IRQHandler>
	...

08001754 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001758:	4b0e      	ldr	r3, [pc, #56]	; (8001794 <HAL_Init+0x40>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	4a0d      	ldr	r2, [pc, #52]	; (8001794 <HAL_Init+0x40>)
 800175e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001762:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001764:	4b0b      	ldr	r3, [pc, #44]	; (8001794 <HAL_Init+0x40>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	4a0a      	ldr	r2, [pc, #40]	; (8001794 <HAL_Init+0x40>)
 800176a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800176e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001770:	4b08      	ldr	r3, [pc, #32]	; (8001794 <HAL_Init+0x40>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	4a07      	ldr	r2, [pc, #28]	; (8001794 <HAL_Init+0x40>)
 8001776:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800177a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800177c:	2003      	movs	r0, #3
 800177e:	f000 fcdf 	bl	8002140 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001782:	2000      	movs	r0, #0
 8001784:	f000 f808 	bl	8001798 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001788:	f7ff fdf8 	bl	800137c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800178c:	2300      	movs	r3, #0
}
 800178e:	4618      	mov	r0, r3
 8001790:	bd80      	pop	{r7, pc}
 8001792:	bf00      	nop
 8001794:	40023c00 	.word	0x40023c00

08001798 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b082      	sub	sp, #8
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80017a0:	4b12      	ldr	r3, [pc, #72]	; (80017ec <HAL_InitTick+0x54>)
 80017a2:	681a      	ldr	r2, [r3, #0]
 80017a4:	4b12      	ldr	r3, [pc, #72]	; (80017f0 <HAL_InitTick+0x58>)
 80017a6:	781b      	ldrb	r3, [r3, #0]
 80017a8:	4619      	mov	r1, r3
 80017aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80017b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80017b6:	4618      	mov	r0, r3
 80017b8:	f000 fce9 	bl	800218e <HAL_SYSTICK_Config>
 80017bc:	4603      	mov	r3, r0
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d001      	beq.n	80017c6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80017c2:	2301      	movs	r3, #1
 80017c4:	e00e      	b.n	80017e4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	2b0f      	cmp	r3, #15
 80017ca:	d80a      	bhi.n	80017e2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017cc:	2200      	movs	r2, #0
 80017ce:	6879      	ldr	r1, [r7, #4]
 80017d0:	f04f 30ff 	mov.w	r0, #4294967295
 80017d4:	f000 fcbf 	bl	8002156 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80017d8:	4a06      	ldr	r2, [pc, #24]	; (80017f4 <HAL_InitTick+0x5c>)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80017de:	2300      	movs	r3, #0
 80017e0:	e000      	b.n	80017e4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80017e2:	2301      	movs	r3, #1
}
 80017e4:	4618      	mov	r0, r3
 80017e6:	3708      	adds	r7, #8
 80017e8:	46bd      	mov	sp, r7
 80017ea:	bd80      	pop	{r7, pc}
 80017ec:	20000000 	.word	0x20000000
 80017f0:	20000008 	.word	0x20000008
 80017f4:	20000004 	.word	0x20000004

080017f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017f8:	b480      	push	{r7}
 80017fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80017fc:	4b06      	ldr	r3, [pc, #24]	; (8001818 <HAL_IncTick+0x20>)
 80017fe:	781b      	ldrb	r3, [r3, #0]
 8001800:	461a      	mov	r2, r3
 8001802:	4b06      	ldr	r3, [pc, #24]	; (800181c <HAL_IncTick+0x24>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	4413      	add	r3, r2
 8001808:	4a04      	ldr	r2, [pc, #16]	; (800181c <HAL_IncTick+0x24>)
 800180a:	6013      	str	r3, [r2, #0]
}
 800180c:	bf00      	nop
 800180e:	46bd      	mov	sp, r7
 8001810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001814:	4770      	bx	lr
 8001816:	bf00      	nop
 8001818:	20000008 	.word	0x20000008
 800181c:	20000144 	.word	0x20000144

08001820 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001820:	b480      	push	{r7}
 8001822:	af00      	add	r7, sp, #0
  return uwTick;
 8001824:	4b03      	ldr	r3, [pc, #12]	; (8001834 <HAL_GetTick+0x14>)
 8001826:	681b      	ldr	r3, [r3, #0]
}
 8001828:	4618      	mov	r0, r3
 800182a:	46bd      	mov	sp, r7
 800182c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001830:	4770      	bx	lr
 8001832:	bf00      	nop
 8001834:	20000144 	.word	0x20000144

08001838 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b084      	sub	sp, #16
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001840:	f7ff ffee 	bl	8001820 <HAL_GetTick>
 8001844:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001850:	d005      	beq.n	800185e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001852:	4b0a      	ldr	r3, [pc, #40]	; (800187c <HAL_Delay+0x44>)
 8001854:	781b      	ldrb	r3, [r3, #0]
 8001856:	461a      	mov	r2, r3
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	4413      	add	r3, r2
 800185c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800185e:	bf00      	nop
 8001860:	f7ff ffde 	bl	8001820 <HAL_GetTick>
 8001864:	4602      	mov	r2, r0
 8001866:	68bb      	ldr	r3, [r7, #8]
 8001868:	1ad3      	subs	r3, r2, r3
 800186a:	68fa      	ldr	r2, [r7, #12]
 800186c:	429a      	cmp	r2, r3
 800186e:	d8f7      	bhi.n	8001860 <HAL_Delay+0x28>
  {
  }
}
 8001870:	bf00      	nop
 8001872:	bf00      	nop
 8001874:	3710      	adds	r7, #16
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}
 800187a:	bf00      	nop
 800187c:	20000008 	.word	0x20000008

08001880 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b084      	sub	sp, #16
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001888:	2300      	movs	r3, #0
 800188a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	2b00      	cmp	r3, #0
 8001890:	d101      	bne.n	8001896 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001892:	2301      	movs	r3, #1
 8001894:	e033      	b.n	80018fe <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800189a:	2b00      	cmp	r3, #0
 800189c:	d109      	bne.n	80018b2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800189e:	6878      	ldr	r0, [r7, #4]
 80018a0:	f7ff fd94 	bl	80013cc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	2200      	movs	r2, #0
 80018a8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	2200      	movs	r2, #0
 80018ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018b6:	f003 0310 	and.w	r3, r3, #16
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d118      	bne.n	80018f0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018c2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80018c6:	f023 0302 	bic.w	r3, r3, #2
 80018ca:	f043 0202 	orr.w	r2, r3, #2
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80018d2:	6878      	ldr	r0, [r7, #4]
 80018d4:	f000 fa86 	bl	8001de4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	2200      	movs	r2, #0
 80018dc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018e2:	f023 0303 	bic.w	r3, r3, #3
 80018e6:	f043 0201 	orr.w	r2, r3, #1
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	641a      	str	r2, [r3, #64]	; 0x40
 80018ee:	e001      	b.n	80018f4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80018f0:	2301      	movs	r3, #1
 80018f2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	2200      	movs	r2, #0
 80018f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80018fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80018fe:	4618      	mov	r0, r3
 8001900:	3710      	adds	r7, #16
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}
	...

08001908 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001908:	b480      	push	{r7}
 800190a:	b085      	sub	sp, #20
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001910:	2300      	movs	r3, #0
 8001912:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800191a:	2b01      	cmp	r3, #1
 800191c:	d101      	bne.n	8001922 <HAL_ADC_Start+0x1a>
 800191e:	2302      	movs	r3, #2
 8001920:	e097      	b.n	8001a52 <HAL_ADC_Start+0x14a>
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	2201      	movs	r2, #1
 8001926:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	689b      	ldr	r3, [r3, #8]
 8001930:	f003 0301 	and.w	r3, r3, #1
 8001934:	2b01      	cmp	r3, #1
 8001936:	d018      	beq.n	800196a <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	689a      	ldr	r2, [r3, #8]
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f042 0201 	orr.w	r2, r2, #1
 8001946:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001948:	4b45      	ldr	r3, [pc, #276]	; (8001a60 <HAL_ADC_Start+0x158>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	4a45      	ldr	r2, [pc, #276]	; (8001a64 <HAL_ADC_Start+0x15c>)
 800194e:	fba2 2303 	umull	r2, r3, r2, r3
 8001952:	0c9a      	lsrs	r2, r3, #18
 8001954:	4613      	mov	r3, r2
 8001956:	005b      	lsls	r3, r3, #1
 8001958:	4413      	add	r3, r2
 800195a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 800195c:	e002      	b.n	8001964 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800195e:	68bb      	ldr	r3, [r7, #8]
 8001960:	3b01      	subs	r3, #1
 8001962:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001964:	68bb      	ldr	r3, [r7, #8]
 8001966:	2b00      	cmp	r3, #0
 8001968:	d1f9      	bne.n	800195e <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	689b      	ldr	r3, [r3, #8]
 8001970:	f003 0301 	and.w	r3, r3, #1
 8001974:	2b01      	cmp	r3, #1
 8001976:	d15f      	bne.n	8001a38 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800197c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001980:	f023 0301 	bic.w	r3, r3, #1
 8001984:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	685b      	ldr	r3, [r3, #4]
 8001992:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001996:	2b00      	cmp	r3, #0
 8001998:	d007      	beq.n	80019aa <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800199e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80019a2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80019b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80019b6:	d106      	bne.n	80019c6 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019bc:	f023 0206 	bic.w	r2, r3, #6
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	645a      	str	r2, [r3, #68]	; 0x44
 80019c4:	e002      	b.n	80019cc <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	2200      	movs	r2, #0
 80019ca:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	2200      	movs	r2, #0
 80019d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80019d4:	4b24      	ldr	r3, [pc, #144]	; (8001a68 <HAL_ADC_Start+0x160>)
 80019d6:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80019e0:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	685b      	ldr	r3, [r3, #4]
 80019e6:	f003 031f 	and.w	r3, r3, #31
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d10f      	bne.n	8001a0e <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	689b      	ldr	r3, [r3, #8]
 80019f4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d129      	bne.n	8001a50 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	689a      	ldr	r2, [r3, #8]
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001a0a:	609a      	str	r2, [r3, #8]
 8001a0c:	e020      	b.n	8001a50 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	4a16      	ldr	r2, [pc, #88]	; (8001a6c <HAL_ADC_Start+0x164>)
 8001a14:	4293      	cmp	r3, r2
 8001a16:	d11b      	bne.n	8001a50 <HAL_ADC_Start+0x148>
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	689b      	ldr	r3, [r3, #8]
 8001a1e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d114      	bne.n	8001a50 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	689a      	ldr	r2, [r3, #8]
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001a34:	609a      	str	r2, [r3, #8]
 8001a36:	e00b      	b.n	8001a50 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a3c:	f043 0210 	orr.w	r2, r3, #16
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a48:	f043 0201 	orr.w	r2, r3, #1
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001a50:	2300      	movs	r3, #0
}
 8001a52:	4618      	mov	r0, r3
 8001a54:	3714      	adds	r7, #20
 8001a56:	46bd      	mov	sp, r7
 8001a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5c:	4770      	bx	lr
 8001a5e:	bf00      	nop
 8001a60:	20000000 	.word	0x20000000
 8001a64:	431bde83 	.word	0x431bde83
 8001a68:	40012300 	.word	0x40012300
 8001a6c:	40012000 	.word	0x40012000

08001a70 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b084      	sub	sp, #16
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
 8001a78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	689b      	ldr	r3, [r3, #8]
 8001a84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a88:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a8c:	d113      	bne.n	8001ab6 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	689b      	ldr	r3, [r3, #8]
 8001a94:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001a98:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001a9c:	d10b      	bne.n	8001ab6 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aa2:	f043 0220 	orr.w	r2, r3, #32
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	2200      	movs	r2, #0
 8001aae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	e063      	b.n	8001b7e <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8001ab6:	f7ff feb3 	bl	8001820 <HAL_GetTick>
 8001aba:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001abc:	e021      	b.n	8001b02 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ac4:	d01d      	beq.n	8001b02 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d007      	beq.n	8001adc <HAL_ADC_PollForConversion+0x6c>
 8001acc:	f7ff fea8 	bl	8001820 <HAL_GetTick>
 8001ad0:	4602      	mov	r2, r0
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	1ad3      	subs	r3, r2, r3
 8001ad6:	683a      	ldr	r2, [r7, #0]
 8001ad8:	429a      	cmp	r2, r3
 8001ada:	d212      	bcs.n	8001b02 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f003 0302 	and.w	r3, r3, #2
 8001ae6:	2b02      	cmp	r3, #2
 8001ae8:	d00b      	beq.n	8001b02 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aee:	f043 0204 	orr.w	r2, r3, #4
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	2200      	movs	r2, #0
 8001afa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8001afe:	2303      	movs	r3, #3
 8001b00:	e03d      	b.n	8001b7e <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f003 0302 	and.w	r3, r3, #2
 8001b0c:	2b02      	cmp	r3, #2
 8001b0e:	d1d6      	bne.n	8001abe <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f06f 0212 	mvn.w	r2, #18
 8001b18:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b1e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	689b      	ldr	r3, [r3, #8]
 8001b2c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d123      	bne.n	8001b7c <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d11f      	bne.n	8001b7c <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b42:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d006      	beq.n	8001b58 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	689b      	ldr	r3, [r3, #8]
 8001b50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d111      	bne.n	8001b7c <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b5c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b68:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d105      	bne.n	8001b7c <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b74:	f043 0201 	orr.w	r2, r3, #1
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001b7c:	2300      	movs	r3, #0
}
 8001b7e:	4618      	mov	r0, r3
 8001b80:	3710      	adds	r7, #16
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bd80      	pop	{r7, pc}

08001b86 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001b86:	b480      	push	{r7}
 8001b88:	b083      	sub	sp, #12
 8001b8a:	af00      	add	r7, sp, #0
 8001b8c:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001b94:	4618      	mov	r0, r3
 8001b96:	370c      	adds	r7, #12
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9e:	4770      	bx	lr

08001ba0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	b085      	sub	sp, #20
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
 8001ba8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001baa:	2300      	movs	r3, #0
 8001bac:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001bb4:	2b01      	cmp	r3, #1
 8001bb6:	d101      	bne.n	8001bbc <HAL_ADC_ConfigChannel+0x1c>
 8001bb8:	2302      	movs	r3, #2
 8001bba:	e105      	b.n	8001dc8 <HAL_ADC_ConfigChannel+0x228>
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	2201      	movs	r2, #1
 8001bc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	2b09      	cmp	r3, #9
 8001bca:	d925      	bls.n	8001c18 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	68d9      	ldr	r1, [r3, #12]
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	b29b      	uxth	r3, r3
 8001bd8:	461a      	mov	r2, r3
 8001bda:	4613      	mov	r3, r2
 8001bdc:	005b      	lsls	r3, r3, #1
 8001bde:	4413      	add	r3, r2
 8001be0:	3b1e      	subs	r3, #30
 8001be2:	2207      	movs	r2, #7
 8001be4:	fa02 f303 	lsl.w	r3, r2, r3
 8001be8:	43da      	mvns	r2, r3
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	400a      	ands	r2, r1
 8001bf0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	68d9      	ldr	r1, [r3, #12]
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	689a      	ldr	r2, [r3, #8]
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	b29b      	uxth	r3, r3
 8001c02:	4618      	mov	r0, r3
 8001c04:	4603      	mov	r3, r0
 8001c06:	005b      	lsls	r3, r3, #1
 8001c08:	4403      	add	r3, r0
 8001c0a:	3b1e      	subs	r3, #30
 8001c0c:	409a      	lsls	r2, r3
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	430a      	orrs	r2, r1
 8001c14:	60da      	str	r2, [r3, #12]
 8001c16:	e022      	b.n	8001c5e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	6919      	ldr	r1, [r3, #16]
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	b29b      	uxth	r3, r3
 8001c24:	461a      	mov	r2, r3
 8001c26:	4613      	mov	r3, r2
 8001c28:	005b      	lsls	r3, r3, #1
 8001c2a:	4413      	add	r3, r2
 8001c2c:	2207      	movs	r2, #7
 8001c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c32:	43da      	mvns	r2, r3
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	400a      	ands	r2, r1
 8001c3a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	6919      	ldr	r1, [r3, #16]
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	689a      	ldr	r2, [r3, #8]
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	b29b      	uxth	r3, r3
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	4603      	mov	r3, r0
 8001c50:	005b      	lsls	r3, r3, #1
 8001c52:	4403      	add	r3, r0
 8001c54:	409a      	lsls	r2, r3
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	430a      	orrs	r2, r1
 8001c5c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	685b      	ldr	r3, [r3, #4]
 8001c62:	2b06      	cmp	r3, #6
 8001c64:	d824      	bhi.n	8001cb0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	685a      	ldr	r2, [r3, #4]
 8001c70:	4613      	mov	r3, r2
 8001c72:	009b      	lsls	r3, r3, #2
 8001c74:	4413      	add	r3, r2
 8001c76:	3b05      	subs	r3, #5
 8001c78:	221f      	movs	r2, #31
 8001c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c7e:	43da      	mvns	r2, r3
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	400a      	ands	r2, r1
 8001c86:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	b29b      	uxth	r3, r3
 8001c94:	4618      	mov	r0, r3
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	685a      	ldr	r2, [r3, #4]
 8001c9a:	4613      	mov	r3, r2
 8001c9c:	009b      	lsls	r3, r3, #2
 8001c9e:	4413      	add	r3, r2
 8001ca0:	3b05      	subs	r3, #5
 8001ca2:	fa00 f203 	lsl.w	r2, r0, r3
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	430a      	orrs	r2, r1
 8001cac:	635a      	str	r2, [r3, #52]	; 0x34
 8001cae:	e04c      	b.n	8001d4a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	2b0c      	cmp	r3, #12
 8001cb6:	d824      	bhi.n	8001d02 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	685a      	ldr	r2, [r3, #4]
 8001cc2:	4613      	mov	r3, r2
 8001cc4:	009b      	lsls	r3, r3, #2
 8001cc6:	4413      	add	r3, r2
 8001cc8:	3b23      	subs	r3, #35	; 0x23
 8001cca:	221f      	movs	r2, #31
 8001ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd0:	43da      	mvns	r2, r3
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	400a      	ands	r2, r1
 8001cd8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	b29b      	uxth	r3, r3
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	685a      	ldr	r2, [r3, #4]
 8001cec:	4613      	mov	r3, r2
 8001cee:	009b      	lsls	r3, r3, #2
 8001cf0:	4413      	add	r3, r2
 8001cf2:	3b23      	subs	r3, #35	; 0x23
 8001cf4:	fa00 f203 	lsl.w	r2, r0, r3
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	430a      	orrs	r2, r1
 8001cfe:	631a      	str	r2, [r3, #48]	; 0x30
 8001d00:	e023      	b.n	8001d4a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	685a      	ldr	r2, [r3, #4]
 8001d0c:	4613      	mov	r3, r2
 8001d0e:	009b      	lsls	r3, r3, #2
 8001d10:	4413      	add	r3, r2
 8001d12:	3b41      	subs	r3, #65	; 0x41
 8001d14:	221f      	movs	r2, #31
 8001d16:	fa02 f303 	lsl.w	r3, r2, r3
 8001d1a:	43da      	mvns	r2, r3
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	400a      	ands	r2, r1
 8001d22:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	b29b      	uxth	r3, r3
 8001d30:	4618      	mov	r0, r3
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	685a      	ldr	r2, [r3, #4]
 8001d36:	4613      	mov	r3, r2
 8001d38:	009b      	lsls	r3, r3, #2
 8001d3a:	4413      	add	r3, r2
 8001d3c:	3b41      	subs	r3, #65	; 0x41
 8001d3e:	fa00 f203 	lsl.w	r2, r0, r3
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	430a      	orrs	r2, r1
 8001d48:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001d4a:	4b22      	ldr	r3, [pc, #136]	; (8001dd4 <HAL_ADC_ConfigChannel+0x234>)
 8001d4c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	4a21      	ldr	r2, [pc, #132]	; (8001dd8 <HAL_ADC_ConfigChannel+0x238>)
 8001d54:	4293      	cmp	r3, r2
 8001d56:	d109      	bne.n	8001d6c <HAL_ADC_ConfigChannel+0x1cc>
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	2b12      	cmp	r3, #18
 8001d5e:	d105      	bne.n	8001d6c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	685b      	ldr	r3, [r3, #4]
 8001d64:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	4a19      	ldr	r2, [pc, #100]	; (8001dd8 <HAL_ADC_ConfigChannel+0x238>)
 8001d72:	4293      	cmp	r3, r2
 8001d74:	d123      	bne.n	8001dbe <HAL_ADC_ConfigChannel+0x21e>
 8001d76:	683b      	ldr	r3, [r7, #0]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	2b10      	cmp	r3, #16
 8001d7c:	d003      	beq.n	8001d86 <HAL_ADC_ConfigChannel+0x1e6>
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	2b11      	cmp	r3, #17
 8001d84:	d11b      	bne.n	8001dbe <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	685b      	ldr	r3, [r3, #4]
 8001d8a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	2b10      	cmp	r3, #16
 8001d98:	d111      	bne.n	8001dbe <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001d9a:	4b10      	ldr	r3, [pc, #64]	; (8001ddc <HAL_ADC_ConfigChannel+0x23c>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	4a10      	ldr	r2, [pc, #64]	; (8001de0 <HAL_ADC_ConfigChannel+0x240>)
 8001da0:	fba2 2303 	umull	r2, r3, r2, r3
 8001da4:	0c9a      	lsrs	r2, r3, #18
 8001da6:	4613      	mov	r3, r2
 8001da8:	009b      	lsls	r3, r3, #2
 8001daa:	4413      	add	r3, r2
 8001dac:	005b      	lsls	r3, r3, #1
 8001dae:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001db0:	e002      	b.n	8001db8 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001db2:	68bb      	ldr	r3, [r7, #8]
 8001db4:	3b01      	subs	r3, #1
 8001db6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001db8:	68bb      	ldr	r3, [r7, #8]
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d1f9      	bne.n	8001db2 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001dc6:	2300      	movs	r3, #0
}
 8001dc8:	4618      	mov	r0, r3
 8001dca:	3714      	adds	r7, #20
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd2:	4770      	bx	lr
 8001dd4:	40012300 	.word	0x40012300
 8001dd8:	40012000 	.word	0x40012000
 8001ddc:	20000000 	.word	0x20000000
 8001de0:	431bde83 	.word	0x431bde83

08001de4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001de4:	b480      	push	{r7}
 8001de6:	b085      	sub	sp, #20
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001dec:	4b79      	ldr	r3, [pc, #484]	; (8001fd4 <ADC_Init+0x1f0>)
 8001dee:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	685b      	ldr	r3, [r3, #4]
 8001df4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	685a      	ldr	r2, [r3, #4]
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	685b      	ldr	r3, [r3, #4]
 8001e04:	431a      	orrs	r2, r3
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	685a      	ldr	r2, [r3, #4]
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001e18:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	6859      	ldr	r1, [r3, #4]
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	691b      	ldr	r3, [r3, #16]
 8001e24:	021a      	lsls	r2, r3, #8
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	430a      	orrs	r2, r1
 8001e2c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	685a      	ldr	r2, [r3, #4]
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001e3c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	6859      	ldr	r1, [r3, #4]
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	689a      	ldr	r2, [r3, #8]
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	430a      	orrs	r2, r1
 8001e4e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	689a      	ldr	r2, [r3, #8]
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001e5e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	6899      	ldr	r1, [r3, #8]
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	68da      	ldr	r2, [r3, #12]
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	430a      	orrs	r2, r1
 8001e70:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e76:	4a58      	ldr	r2, [pc, #352]	; (8001fd8 <ADC_Init+0x1f4>)
 8001e78:	4293      	cmp	r3, r2
 8001e7a:	d022      	beq.n	8001ec2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	689a      	ldr	r2, [r3, #8]
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001e8a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	6899      	ldr	r1, [r3, #8]
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	430a      	orrs	r2, r1
 8001e9c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	689a      	ldr	r2, [r3, #8]
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001eac:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	6899      	ldr	r1, [r3, #8]
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	430a      	orrs	r2, r1
 8001ebe:	609a      	str	r2, [r3, #8]
 8001ec0:	e00f      	b.n	8001ee2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	689a      	ldr	r2, [r3, #8]
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001ed0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	689a      	ldr	r2, [r3, #8]
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001ee0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	689a      	ldr	r2, [r3, #8]
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f022 0202 	bic.w	r2, r2, #2
 8001ef0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	6899      	ldr	r1, [r3, #8]
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	7e1b      	ldrb	r3, [r3, #24]
 8001efc:	005a      	lsls	r2, r3, #1
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	430a      	orrs	r2, r1
 8001f04:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d01b      	beq.n	8001f48 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	685a      	ldr	r2, [r3, #4]
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001f1e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	685a      	ldr	r2, [r3, #4]
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001f2e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	6859      	ldr	r1, [r3, #4]
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f3a:	3b01      	subs	r3, #1
 8001f3c:	035a      	lsls	r2, r3, #13
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	430a      	orrs	r2, r1
 8001f44:	605a      	str	r2, [r3, #4]
 8001f46:	e007      	b.n	8001f58 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	685a      	ldr	r2, [r3, #4]
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001f56:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001f66:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	69db      	ldr	r3, [r3, #28]
 8001f72:	3b01      	subs	r3, #1
 8001f74:	051a      	lsls	r2, r3, #20
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	430a      	orrs	r2, r1
 8001f7c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	689a      	ldr	r2, [r3, #8]
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001f8c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	6899      	ldr	r1, [r3, #8]
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001f9a:	025a      	lsls	r2, r3, #9
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	430a      	orrs	r2, r1
 8001fa2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	689a      	ldr	r2, [r3, #8]
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001fb2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	6899      	ldr	r1, [r3, #8]
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	695b      	ldr	r3, [r3, #20]
 8001fbe:	029a      	lsls	r2, r3, #10
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	430a      	orrs	r2, r1
 8001fc6:	609a      	str	r2, [r3, #8]
}
 8001fc8:	bf00      	nop
 8001fca:	3714      	adds	r7, #20
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd2:	4770      	bx	lr
 8001fd4:	40012300 	.word	0x40012300
 8001fd8:	0f000001 	.word	0x0f000001

08001fdc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	b085      	sub	sp, #20
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	f003 0307 	and.w	r3, r3, #7
 8001fea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001fec:	4b0c      	ldr	r3, [pc, #48]	; (8002020 <__NVIC_SetPriorityGrouping+0x44>)
 8001fee:	68db      	ldr	r3, [r3, #12]
 8001ff0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ff2:	68ba      	ldr	r2, [r7, #8]
 8001ff4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ff8:	4013      	ands	r3, r2
 8001ffa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002000:	68bb      	ldr	r3, [r7, #8]
 8002002:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002004:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002008:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800200c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800200e:	4a04      	ldr	r2, [pc, #16]	; (8002020 <__NVIC_SetPriorityGrouping+0x44>)
 8002010:	68bb      	ldr	r3, [r7, #8]
 8002012:	60d3      	str	r3, [r2, #12]
}
 8002014:	bf00      	nop
 8002016:	3714      	adds	r7, #20
 8002018:	46bd      	mov	sp, r7
 800201a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201e:	4770      	bx	lr
 8002020:	e000ed00 	.word	0xe000ed00

08002024 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002024:	b480      	push	{r7}
 8002026:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002028:	4b04      	ldr	r3, [pc, #16]	; (800203c <__NVIC_GetPriorityGrouping+0x18>)
 800202a:	68db      	ldr	r3, [r3, #12]
 800202c:	0a1b      	lsrs	r3, r3, #8
 800202e:	f003 0307 	and.w	r3, r3, #7
}
 8002032:	4618      	mov	r0, r3
 8002034:	46bd      	mov	sp, r7
 8002036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203a:	4770      	bx	lr
 800203c:	e000ed00 	.word	0xe000ed00

08002040 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002040:	b480      	push	{r7}
 8002042:	b083      	sub	sp, #12
 8002044:	af00      	add	r7, sp, #0
 8002046:	4603      	mov	r3, r0
 8002048:	6039      	str	r1, [r7, #0]
 800204a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800204c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002050:	2b00      	cmp	r3, #0
 8002052:	db0a      	blt.n	800206a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	b2da      	uxtb	r2, r3
 8002058:	490c      	ldr	r1, [pc, #48]	; (800208c <__NVIC_SetPriority+0x4c>)
 800205a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800205e:	0112      	lsls	r2, r2, #4
 8002060:	b2d2      	uxtb	r2, r2
 8002062:	440b      	add	r3, r1
 8002064:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002068:	e00a      	b.n	8002080 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	b2da      	uxtb	r2, r3
 800206e:	4908      	ldr	r1, [pc, #32]	; (8002090 <__NVIC_SetPriority+0x50>)
 8002070:	79fb      	ldrb	r3, [r7, #7]
 8002072:	f003 030f 	and.w	r3, r3, #15
 8002076:	3b04      	subs	r3, #4
 8002078:	0112      	lsls	r2, r2, #4
 800207a:	b2d2      	uxtb	r2, r2
 800207c:	440b      	add	r3, r1
 800207e:	761a      	strb	r2, [r3, #24]
}
 8002080:	bf00      	nop
 8002082:	370c      	adds	r7, #12
 8002084:	46bd      	mov	sp, r7
 8002086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208a:	4770      	bx	lr
 800208c:	e000e100 	.word	0xe000e100
 8002090:	e000ed00 	.word	0xe000ed00

08002094 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002094:	b480      	push	{r7}
 8002096:	b089      	sub	sp, #36	; 0x24
 8002098:	af00      	add	r7, sp, #0
 800209a:	60f8      	str	r0, [r7, #12]
 800209c:	60b9      	str	r1, [r7, #8]
 800209e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	f003 0307 	and.w	r3, r3, #7
 80020a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80020a8:	69fb      	ldr	r3, [r7, #28]
 80020aa:	f1c3 0307 	rsb	r3, r3, #7
 80020ae:	2b04      	cmp	r3, #4
 80020b0:	bf28      	it	cs
 80020b2:	2304      	movcs	r3, #4
 80020b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020b6:	69fb      	ldr	r3, [r7, #28]
 80020b8:	3304      	adds	r3, #4
 80020ba:	2b06      	cmp	r3, #6
 80020bc:	d902      	bls.n	80020c4 <NVIC_EncodePriority+0x30>
 80020be:	69fb      	ldr	r3, [r7, #28]
 80020c0:	3b03      	subs	r3, #3
 80020c2:	e000      	b.n	80020c6 <NVIC_EncodePriority+0x32>
 80020c4:	2300      	movs	r3, #0
 80020c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020c8:	f04f 32ff 	mov.w	r2, #4294967295
 80020cc:	69bb      	ldr	r3, [r7, #24]
 80020ce:	fa02 f303 	lsl.w	r3, r2, r3
 80020d2:	43da      	mvns	r2, r3
 80020d4:	68bb      	ldr	r3, [r7, #8]
 80020d6:	401a      	ands	r2, r3
 80020d8:	697b      	ldr	r3, [r7, #20]
 80020da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020dc:	f04f 31ff 	mov.w	r1, #4294967295
 80020e0:	697b      	ldr	r3, [r7, #20]
 80020e2:	fa01 f303 	lsl.w	r3, r1, r3
 80020e6:	43d9      	mvns	r1, r3
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020ec:	4313      	orrs	r3, r2
         );
}
 80020ee:	4618      	mov	r0, r3
 80020f0:	3724      	adds	r7, #36	; 0x24
 80020f2:	46bd      	mov	sp, r7
 80020f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f8:	4770      	bx	lr
	...

080020fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b082      	sub	sp, #8
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	3b01      	subs	r3, #1
 8002108:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800210c:	d301      	bcc.n	8002112 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800210e:	2301      	movs	r3, #1
 8002110:	e00f      	b.n	8002132 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002112:	4a0a      	ldr	r2, [pc, #40]	; (800213c <SysTick_Config+0x40>)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	3b01      	subs	r3, #1
 8002118:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800211a:	210f      	movs	r1, #15
 800211c:	f04f 30ff 	mov.w	r0, #4294967295
 8002120:	f7ff ff8e 	bl	8002040 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002124:	4b05      	ldr	r3, [pc, #20]	; (800213c <SysTick_Config+0x40>)
 8002126:	2200      	movs	r2, #0
 8002128:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800212a:	4b04      	ldr	r3, [pc, #16]	; (800213c <SysTick_Config+0x40>)
 800212c:	2207      	movs	r2, #7
 800212e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002130:	2300      	movs	r3, #0
}
 8002132:	4618      	mov	r0, r3
 8002134:	3708      	adds	r7, #8
 8002136:	46bd      	mov	sp, r7
 8002138:	bd80      	pop	{r7, pc}
 800213a:	bf00      	nop
 800213c:	e000e010 	.word	0xe000e010

08002140 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b082      	sub	sp, #8
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002148:	6878      	ldr	r0, [r7, #4]
 800214a:	f7ff ff47 	bl	8001fdc <__NVIC_SetPriorityGrouping>
}
 800214e:	bf00      	nop
 8002150:	3708      	adds	r7, #8
 8002152:	46bd      	mov	sp, r7
 8002154:	bd80      	pop	{r7, pc}

08002156 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002156:	b580      	push	{r7, lr}
 8002158:	b086      	sub	sp, #24
 800215a:	af00      	add	r7, sp, #0
 800215c:	4603      	mov	r3, r0
 800215e:	60b9      	str	r1, [r7, #8]
 8002160:	607a      	str	r2, [r7, #4]
 8002162:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002164:	2300      	movs	r3, #0
 8002166:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002168:	f7ff ff5c 	bl	8002024 <__NVIC_GetPriorityGrouping>
 800216c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800216e:	687a      	ldr	r2, [r7, #4]
 8002170:	68b9      	ldr	r1, [r7, #8]
 8002172:	6978      	ldr	r0, [r7, #20]
 8002174:	f7ff ff8e 	bl	8002094 <NVIC_EncodePriority>
 8002178:	4602      	mov	r2, r0
 800217a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800217e:	4611      	mov	r1, r2
 8002180:	4618      	mov	r0, r3
 8002182:	f7ff ff5d 	bl	8002040 <__NVIC_SetPriority>
}
 8002186:	bf00      	nop
 8002188:	3718      	adds	r7, #24
 800218a:	46bd      	mov	sp, r7
 800218c:	bd80      	pop	{r7, pc}

0800218e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800218e:	b580      	push	{r7, lr}
 8002190:	b082      	sub	sp, #8
 8002192:	af00      	add	r7, sp, #0
 8002194:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002196:	6878      	ldr	r0, [r7, #4]
 8002198:	f7ff ffb0 	bl	80020fc <SysTick_Config>
 800219c:	4603      	mov	r3, r0
}
 800219e:	4618      	mov	r0, r3
 80021a0:	3708      	adds	r7, #8
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bd80      	pop	{r7, pc}
	...

080021a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021a8:	b480      	push	{r7}
 80021aa:	b089      	sub	sp, #36	; 0x24
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
 80021b0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80021b2:	2300      	movs	r3, #0
 80021b4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80021b6:	2300      	movs	r3, #0
 80021b8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80021ba:	2300      	movs	r3, #0
 80021bc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80021be:	2300      	movs	r3, #0
 80021c0:	61fb      	str	r3, [r7, #28]
 80021c2:	e159      	b.n	8002478 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80021c4:	2201      	movs	r2, #1
 80021c6:	69fb      	ldr	r3, [r7, #28]
 80021c8:	fa02 f303 	lsl.w	r3, r2, r3
 80021cc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	697a      	ldr	r2, [r7, #20]
 80021d4:	4013      	ands	r3, r2
 80021d6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80021d8:	693a      	ldr	r2, [r7, #16]
 80021da:	697b      	ldr	r3, [r7, #20]
 80021dc:	429a      	cmp	r2, r3
 80021de:	f040 8148 	bne.w	8002472 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	685b      	ldr	r3, [r3, #4]
 80021e6:	f003 0303 	and.w	r3, r3, #3
 80021ea:	2b01      	cmp	r3, #1
 80021ec:	d005      	beq.n	80021fa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	685b      	ldr	r3, [r3, #4]
 80021f2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80021f6:	2b02      	cmp	r3, #2
 80021f8:	d130      	bne.n	800225c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	689b      	ldr	r3, [r3, #8]
 80021fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002200:	69fb      	ldr	r3, [r7, #28]
 8002202:	005b      	lsls	r3, r3, #1
 8002204:	2203      	movs	r2, #3
 8002206:	fa02 f303 	lsl.w	r3, r2, r3
 800220a:	43db      	mvns	r3, r3
 800220c:	69ba      	ldr	r2, [r7, #24]
 800220e:	4013      	ands	r3, r2
 8002210:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	68da      	ldr	r2, [r3, #12]
 8002216:	69fb      	ldr	r3, [r7, #28]
 8002218:	005b      	lsls	r3, r3, #1
 800221a:	fa02 f303 	lsl.w	r3, r2, r3
 800221e:	69ba      	ldr	r2, [r7, #24]
 8002220:	4313      	orrs	r3, r2
 8002222:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	69ba      	ldr	r2, [r7, #24]
 8002228:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	685b      	ldr	r3, [r3, #4]
 800222e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002230:	2201      	movs	r2, #1
 8002232:	69fb      	ldr	r3, [r7, #28]
 8002234:	fa02 f303 	lsl.w	r3, r2, r3
 8002238:	43db      	mvns	r3, r3
 800223a:	69ba      	ldr	r2, [r7, #24]
 800223c:	4013      	ands	r3, r2
 800223e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	091b      	lsrs	r3, r3, #4
 8002246:	f003 0201 	and.w	r2, r3, #1
 800224a:	69fb      	ldr	r3, [r7, #28]
 800224c:	fa02 f303 	lsl.w	r3, r2, r3
 8002250:	69ba      	ldr	r2, [r7, #24]
 8002252:	4313      	orrs	r3, r2
 8002254:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	69ba      	ldr	r2, [r7, #24]
 800225a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	f003 0303 	and.w	r3, r3, #3
 8002264:	2b03      	cmp	r3, #3
 8002266:	d017      	beq.n	8002298 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	68db      	ldr	r3, [r3, #12]
 800226c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800226e:	69fb      	ldr	r3, [r7, #28]
 8002270:	005b      	lsls	r3, r3, #1
 8002272:	2203      	movs	r2, #3
 8002274:	fa02 f303 	lsl.w	r3, r2, r3
 8002278:	43db      	mvns	r3, r3
 800227a:	69ba      	ldr	r2, [r7, #24]
 800227c:	4013      	ands	r3, r2
 800227e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	689a      	ldr	r2, [r3, #8]
 8002284:	69fb      	ldr	r3, [r7, #28]
 8002286:	005b      	lsls	r3, r3, #1
 8002288:	fa02 f303 	lsl.w	r3, r2, r3
 800228c:	69ba      	ldr	r2, [r7, #24]
 800228e:	4313      	orrs	r3, r2
 8002290:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	69ba      	ldr	r2, [r7, #24]
 8002296:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	685b      	ldr	r3, [r3, #4]
 800229c:	f003 0303 	and.w	r3, r3, #3
 80022a0:	2b02      	cmp	r3, #2
 80022a2:	d123      	bne.n	80022ec <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80022a4:	69fb      	ldr	r3, [r7, #28]
 80022a6:	08da      	lsrs	r2, r3, #3
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	3208      	adds	r2, #8
 80022ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80022b2:	69fb      	ldr	r3, [r7, #28]
 80022b4:	f003 0307 	and.w	r3, r3, #7
 80022b8:	009b      	lsls	r3, r3, #2
 80022ba:	220f      	movs	r2, #15
 80022bc:	fa02 f303 	lsl.w	r3, r2, r3
 80022c0:	43db      	mvns	r3, r3
 80022c2:	69ba      	ldr	r2, [r7, #24]
 80022c4:	4013      	ands	r3, r2
 80022c6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	691a      	ldr	r2, [r3, #16]
 80022cc:	69fb      	ldr	r3, [r7, #28]
 80022ce:	f003 0307 	and.w	r3, r3, #7
 80022d2:	009b      	lsls	r3, r3, #2
 80022d4:	fa02 f303 	lsl.w	r3, r2, r3
 80022d8:	69ba      	ldr	r2, [r7, #24]
 80022da:	4313      	orrs	r3, r2
 80022dc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80022de:	69fb      	ldr	r3, [r7, #28]
 80022e0:	08da      	lsrs	r2, r3, #3
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	3208      	adds	r2, #8
 80022e6:	69b9      	ldr	r1, [r7, #24]
 80022e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80022f2:	69fb      	ldr	r3, [r7, #28]
 80022f4:	005b      	lsls	r3, r3, #1
 80022f6:	2203      	movs	r2, #3
 80022f8:	fa02 f303 	lsl.w	r3, r2, r3
 80022fc:	43db      	mvns	r3, r3
 80022fe:	69ba      	ldr	r2, [r7, #24]
 8002300:	4013      	ands	r3, r2
 8002302:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	685b      	ldr	r3, [r3, #4]
 8002308:	f003 0203 	and.w	r2, r3, #3
 800230c:	69fb      	ldr	r3, [r7, #28]
 800230e:	005b      	lsls	r3, r3, #1
 8002310:	fa02 f303 	lsl.w	r3, r2, r3
 8002314:	69ba      	ldr	r2, [r7, #24]
 8002316:	4313      	orrs	r3, r2
 8002318:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	69ba      	ldr	r2, [r7, #24]
 800231e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	685b      	ldr	r3, [r3, #4]
 8002324:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002328:	2b00      	cmp	r3, #0
 800232a:	f000 80a2 	beq.w	8002472 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800232e:	2300      	movs	r3, #0
 8002330:	60fb      	str	r3, [r7, #12]
 8002332:	4b57      	ldr	r3, [pc, #348]	; (8002490 <HAL_GPIO_Init+0x2e8>)
 8002334:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002336:	4a56      	ldr	r2, [pc, #344]	; (8002490 <HAL_GPIO_Init+0x2e8>)
 8002338:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800233c:	6453      	str	r3, [r2, #68]	; 0x44
 800233e:	4b54      	ldr	r3, [pc, #336]	; (8002490 <HAL_GPIO_Init+0x2e8>)
 8002340:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002342:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002346:	60fb      	str	r3, [r7, #12]
 8002348:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800234a:	4a52      	ldr	r2, [pc, #328]	; (8002494 <HAL_GPIO_Init+0x2ec>)
 800234c:	69fb      	ldr	r3, [r7, #28]
 800234e:	089b      	lsrs	r3, r3, #2
 8002350:	3302      	adds	r3, #2
 8002352:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002356:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002358:	69fb      	ldr	r3, [r7, #28]
 800235a:	f003 0303 	and.w	r3, r3, #3
 800235e:	009b      	lsls	r3, r3, #2
 8002360:	220f      	movs	r2, #15
 8002362:	fa02 f303 	lsl.w	r3, r2, r3
 8002366:	43db      	mvns	r3, r3
 8002368:	69ba      	ldr	r2, [r7, #24]
 800236a:	4013      	ands	r3, r2
 800236c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	4a49      	ldr	r2, [pc, #292]	; (8002498 <HAL_GPIO_Init+0x2f0>)
 8002372:	4293      	cmp	r3, r2
 8002374:	d019      	beq.n	80023aa <HAL_GPIO_Init+0x202>
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	4a48      	ldr	r2, [pc, #288]	; (800249c <HAL_GPIO_Init+0x2f4>)
 800237a:	4293      	cmp	r3, r2
 800237c:	d013      	beq.n	80023a6 <HAL_GPIO_Init+0x1fe>
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	4a47      	ldr	r2, [pc, #284]	; (80024a0 <HAL_GPIO_Init+0x2f8>)
 8002382:	4293      	cmp	r3, r2
 8002384:	d00d      	beq.n	80023a2 <HAL_GPIO_Init+0x1fa>
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	4a46      	ldr	r2, [pc, #280]	; (80024a4 <HAL_GPIO_Init+0x2fc>)
 800238a:	4293      	cmp	r3, r2
 800238c:	d007      	beq.n	800239e <HAL_GPIO_Init+0x1f6>
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	4a45      	ldr	r2, [pc, #276]	; (80024a8 <HAL_GPIO_Init+0x300>)
 8002392:	4293      	cmp	r3, r2
 8002394:	d101      	bne.n	800239a <HAL_GPIO_Init+0x1f2>
 8002396:	2304      	movs	r3, #4
 8002398:	e008      	b.n	80023ac <HAL_GPIO_Init+0x204>
 800239a:	2307      	movs	r3, #7
 800239c:	e006      	b.n	80023ac <HAL_GPIO_Init+0x204>
 800239e:	2303      	movs	r3, #3
 80023a0:	e004      	b.n	80023ac <HAL_GPIO_Init+0x204>
 80023a2:	2302      	movs	r3, #2
 80023a4:	e002      	b.n	80023ac <HAL_GPIO_Init+0x204>
 80023a6:	2301      	movs	r3, #1
 80023a8:	e000      	b.n	80023ac <HAL_GPIO_Init+0x204>
 80023aa:	2300      	movs	r3, #0
 80023ac:	69fa      	ldr	r2, [r7, #28]
 80023ae:	f002 0203 	and.w	r2, r2, #3
 80023b2:	0092      	lsls	r2, r2, #2
 80023b4:	4093      	lsls	r3, r2
 80023b6:	69ba      	ldr	r2, [r7, #24]
 80023b8:	4313      	orrs	r3, r2
 80023ba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80023bc:	4935      	ldr	r1, [pc, #212]	; (8002494 <HAL_GPIO_Init+0x2ec>)
 80023be:	69fb      	ldr	r3, [r7, #28]
 80023c0:	089b      	lsrs	r3, r3, #2
 80023c2:	3302      	adds	r3, #2
 80023c4:	69ba      	ldr	r2, [r7, #24]
 80023c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80023ca:	4b38      	ldr	r3, [pc, #224]	; (80024ac <HAL_GPIO_Init+0x304>)
 80023cc:	689b      	ldr	r3, [r3, #8]
 80023ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023d0:	693b      	ldr	r3, [r7, #16]
 80023d2:	43db      	mvns	r3, r3
 80023d4:	69ba      	ldr	r2, [r7, #24]
 80023d6:	4013      	ands	r3, r2
 80023d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	685b      	ldr	r3, [r3, #4]
 80023de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d003      	beq.n	80023ee <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80023e6:	69ba      	ldr	r2, [r7, #24]
 80023e8:	693b      	ldr	r3, [r7, #16]
 80023ea:	4313      	orrs	r3, r2
 80023ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80023ee:	4a2f      	ldr	r2, [pc, #188]	; (80024ac <HAL_GPIO_Init+0x304>)
 80023f0:	69bb      	ldr	r3, [r7, #24]
 80023f2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80023f4:	4b2d      	ldr	r3, [pc, #180]	; (80024ac <HAL_GPIO_Init+0x304>)
 80023f6:	68db      	ldr	r3, [r3, #12]
 80023f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023fa:	693b      	ldr	r3, [r7, #16]
 80023fc:	43db      	mvns	r3, r3
 80023fe:	69ba      	ldr	r2, [r7, #24]
 8002400:	4013      	ands	r3, r2
 8002402:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	685b      	ldr	r3, [r3, #4]
 8002408:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800240c:	2b00      	cmp	r3, #0
 800240e:	d003      	beq.n	8002418 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002410:	69ba      	ldr	r2, [r7, #24]
 8002412:	693b      	ldr	r3, [r7, #16]
 8002414:	4313      	orrs	r3, r2
 8002416:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002418:	4a24      	ldr	r2, [pc, #144]	; (80024ac <HAL_GPIO_Init+0x304>)
 800241a:	69bb      	ldr	r3, [r7, #24]
 800241c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800241e:	4b23      	ldr	r3, [pc, #140]	; (80024ac <HAL_GPIO_Init+0x304>)
 8002420:	685b      	ldr	r3, [r3, #4]
 8002422:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002424:	693b      	ldr	r3, [r7, #16]
 8002426:	43db      	mvns	r3, r3
 8002428:	69ba      	ldr	r2, [r7, #24]
 800242a:	4013      	ands	r3, r2
 800242c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	685b      	ldr	r3, [r3, #4]
 8002432:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002436:	2b00      	cmp	r3, #0
 8002438:	d003      	beq.n	8002442 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800243a:	69ba      	ldr	r2, [r7, #24]
 800243c:	693b      	ldr	r3, [r7, #16]
 800243e:	4313      	orrs	r3, r2
 8002440:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002442:	4a1a      	ldr	r2, [pc, #104]	; (80024ac <HAL_GPIO_Init+0x304>)
 8002444:	69bb      	ldr	r3, [r7, #24]
 8002446:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002448:	4b18      	ldr	r3, [pc, #96]	; (80024ac <HAL_GPIO_Init+0x304>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800244e:	693b      	ldr	r3, [r7, #16]
 8002450:	43db      	mvns	r3, r3
 8002452:	69ba      	ldr	r2, [r7, #24]
 8002454:	4013      	ands	r3, r2
 8002456:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	685b      	ldr	r3, [r3, #4]
 800245c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002460:	2b00      	cmp	r3, #0
 8002462:	d003      	beq.n	800246c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002464:	69ba      	ldr	r2, [r7, #24]
 8002466:	693b      	ldr	r3, [r7, #16]
 8002468:	4313      	orrs	r3, r2
 800246a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800246c:	4a0f      	ldr	r2, [pc, #60]	; (80024ac <HAL_GPIO_Init+0x304>)
 800246e:	69bb      	ldr	r3, [r7, #24]
 8002470:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002472:	69fb      	ldr	r3, [r7, #28]
 8002474:	3301      	adds	r3, #1
 8002476:	61fb      	str	r3, [r7, #28]
 8002478:	69fb      	ldr	r3, [r7, #28]
 800247a:	2b0f      	cmp	r3, #15
 800247c:	f67f aea2 	bls.w	80021c4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002480:	bf00      	nop
 8002482:	bf00      	nop
 8002484:	3724      	adds	r7, #36	; 0x24
 8002486:	46bd      	mov	sp, r7
 8002488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248c:	4770      	bx	lr
 800248e:	bf00      	nop
 8002490:	40023800 	.word	0x40023800
 8002494:	40013800 	.word	0x40013800
 8002498:	40020000 	.word	0x40020000
 800249c:	40020400 	.word	0x40020400
 80024a0:	40020800 	.word	0x40020800
 80024a4:	40020c00 	.word	0x40020c00
 80024a8:	40021000 	.word	0x40021000
 80024ac:	40013c00 	.word	0x40013c00

080024b0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80024b0:	b480      	push	{r7}
 80024b2:	b085      	sub	sp, #20
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
 80024b8:	460b      	mov	r3, r1
 80024ba:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	691a      	ldr	r2, [r3, #16]
 80024c0:	887b      	ldrh	r3, [r7, #2]
 80024c2:	4013      	ands	r3, r2
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d002      	beq.n	80024ce <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80024c8:	2301      	movs	r3, #1
 80024ca:	73fb      	strb	r3, [r7, #15]
 80024cc:	e001      	b.n	80024d2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80024ce:	2300      	movs	r3, #0
 80024d0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80024d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80024d4:	4618      	mov	r0, r3
 80024d6:	3714      	adds	r7, #20
 80024d8:	46bd      	mov	sp, r7
 80024da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024de:	4770      	bx	lr

080024e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80024e0:	b480      	push	{r7}
 80024e2:	b083      	sub	sp, #12
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
 80024e8:	460b      	mov	r3, r1
 80024ea:	807b      	strh	r3, [r7, #2]
 80024ec:	4613      	mov	r3, r2
 80024ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80024f0:	787b      	ldrb	r3, [r7, #1]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d003      	beq.n	80024fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80024f6:	887a      	ldrh	r2, [r7, #2]
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80024fc:	e003      	b.n	8002506 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80024fe:	887b      	ldrh	r3, [r7, #2]
 8002500:	041a      	lsls	r2, r3, #16
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	619a      	str	r2, [r3, #24]
}
 8002506:	bf00      	nop
 8002508:	370c      	adds	r7, #12
 800250a:	46bd      	mov	sp, r7
 800250c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002510:	4770      	bx	lr
	...

08002514 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b086      	sub	sp, #24
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	2b00      	cmp	r3, #0
 8002520:	d101      	bne.n	8002526 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002522:	2301      	movs	r3, #1
 8002524:	e267      	b.n	80029f6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f003 0301 	and.w	r3, r3, #1
 800252e:	2b00      	cmp	r3, #0
 8002530:	d075      	beq.n	800261e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002532:	4b88      	ldr	r3, [pc, #544]	; (8002754 <HAL_RCC_OscConfig+0x240>)
 8002534:	689b      	ldr	r3, [r3, #8]
 8002536:	f003 030c 	and.w	r3, r3, #12
 800253a:	2b04      	cmp	r3, #4
 800253c:	d00c      	beq.n	8002558 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800253e:	4b85      	ldr	r3, [pc, #532]	; (8002754 <HAL_RCC_OscConfig+0x240>)
 8002540:	689b      	ldr	r3, [r3, #8]
 8002542:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002546:	2b08      	cmp	r3, #8
 8002548:	d112      	bne.n	8002570 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800254a:	4b82      	ldr	r3, [pc, #520]	; (8002754 <HAL_RCC_OscConfig+0x240>)
 800254c:	685b      	ldr	r3, [r3, #4]
 800254e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002552:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002556:	d10b      	bne.n	8002570 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002558:	4b7e      	ldr	r3, [pc, #504]	; (8002754 <HAL_RCC_OscConfig+0x240>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002560:	2b00      	cmp	r3, #0
 8002562:	d05b      	beq.n	800261c <HAL_RCC_OscConfig+0x108>
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	2b00      	cmp	r3, #0
 800256a:	d157      	bne.n	800261c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800256c:	2301      	movs	r3, #1
 800256e:	e242      	b.n	80029f6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	685b      	ldr	r3, [r3, #4]
 8002574:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002578:	d106      	bne.n	8002588 <HAL_RCC_OscConfig+0x74>
 800257a:	4b76      	ldr	r3, [pc, #472]	; (8002754 <HAL_RCC_OscConfig+0x240>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	4a75      	ldr	r2, [pc, #468]	; (8002754 <HAL_RCC_OscConfig+0x240>)
 8002580:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002584:	6013      	str	r3, [r2, #0]
 8002586:	e01d      	b.n	80025c4 <HAL_RCC_OscConfig+0xb0>
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	685b      	ldr	r3, [r3, #4]
 800258c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002590:	d10c      	bne.n	80025ac <HAL_RCC_OscConfig+0x98>
 8002592:	4b70      	ldr	r3, [pc, #448]	; (8002754 <HAL_RCC_OscConfig+0x240>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	4a6f      	ldr	r2, [pc, #444]	; (8002754 <HAL_RCC_OscConfig+0x240>)
 8002598:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800259c:	6013      	str	r3, [r2, #0]
 800259e:	4b6d      	ldr	r3, [pc, #436]	; (8002754 <HAL_RCC_OscConfig+0x240>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4a6c      	ldr	r2, [pc, #432]	; (8002754 <HAL_RCC_OscConfig+0x240>)
 80025a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025a8:	6013      	str	r3, [r2, #0]
 80025aa:	e00b      	b.n	80025c4 <HAL_RCC_OscConfig+0xb0>
 80025ac:	4b69      	ldr	r3, [pc, #420]	; (8002754 <HAL_RCC_OscConfig+0x240>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4a68      	ldr	r2, [pc, #416]	; (8002754 <HAL_RCC_OscConfig+0x240>)
 80025b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025b6:	6013      	str	r3, [r2, #0]
 80025b8:	4b66      	ldr	r3, [pc, #408]	; (8002754 <HAL_RCC_OscConfig+0x240>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	4a65      	ldr	r2, [pc, #404]	; (8002754 <HAL_RCC_OscConfig+0x240>)
 80025be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80025c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	685b      	ldr	r3, [r3, #4]
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d013      	beq.n	80025f4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025cc:	f7ff f928 	bl	8001820 <HAL_GetTick>
 80025d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025d2:	e008      	b.n	80025e6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80025d4:	f7ff f924 	bl	8001820 <HAL_GetTick>
 80025d8:	4602      	mov	r2, r0
 80025da:	693b      	ldr	r3, [r7, #16]
 80025dc:	1ad3      	subs	r3, r2, r3
 80025de:	2b64      	cmp	r3, #100	; 0x64
 80025e0:	d901      	bls.n	80025e6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80025e2:	2303      	movs	r3, #3
 80025e4:	e207      	b.n	80029f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025e6:	4b5b      	ldr	r3, [pc, #364]	; (8002754 <HAL_RCC_OscConfig+0x240>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d0f0      	beq.n	80025d4 <HAL_RCC_OscConfig+0xc0>
 80025f2:	e014      	b.n	800261e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025f4:	f7ff f914 	bl	8001820 <HAL_GetTick>
 80025f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025fa:	e008      	b.n	800260e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80025fc:	f7ff f910 	bl	8001820 <HAL_GetTick>
 8002600:	4602      	mov	r2, r0
 8002602:	693b      	ldr	r3, [r7, #16]
 8002604:	1ad3      	subs	r3, r2, r3
 8002606:	2b64      	cmp	r3, #100	; 0x64
 8002608:	d901      	bls.n	800260e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800260a:	2303      	movs	r3, #3
 800260c:	e1f3      	b.n	80029f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800260e:	4b51      	ldr	r3, [pc, #324]	; (8002754 <HAL_RCC_OscConfig+0x240>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002616:	2b00      	cmp	r3, #0
 8002618:	d1f0      	bne.n	80025fc <HAL_RCC_OscConfig+0xe8>
 800261a:	e000      	b.n	800261e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800261c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f003 0302 	and.w	r3, r3, #2
 8002626:	2b00      	cmp	r3, #0
 8002628:	d063      	beq.n	80026f2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800262a:	4b4a      	ldr	r3, [pc, #296]	; (8002754 <HAL_RCC_OscConfig+0x240>)
 800262c:	689b      	ldr	r3, [r3, #8]
 800262e:	f003 030c 	and.w	r3, r3, #12
 8002632:	2b00      	cmp	r3, #0
 8002634:	d00b      	beq.n	800264e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002636:	4b47      	ldr	r3, [pc, #284]	; (8002754 <HAL_RCC_OscConfig+0x240>)
 8002638:	689b      	ldr	r3, [r3, #8]
 800263a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800263e:	2b08      	cmp	r3, #8
 8002640:	d11c      	bne.n	800267c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002642:	4b44      	ldr	r3, [pc, #272]	; (8002754 <HAL_RCC_OscConfig+0x240>)
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800264a:	2b00      	cmp	r3, #0
 800264c:	d116      	bne.n	800267c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800264e:	4b41      	ldr	r3, [pc, #260]	; (8002754 <HAL_RCC_OscConfig+0x240>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f003 0302 	and.w	r3, r3, #2
 8002656:	2b00      	cmp	r3, #0
 8002658:	d005      	beq.n	8002666 <HAL_RCC_OscConfig+0x152>
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	68db      	ldr	r3, [r3, #12]
 800265e:	2b01      	cmp	r3, #1
 8002660:	d001      	beq.n	8002666 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002662:	2301      	movs	r3, #1
 8002664:	e1c7      	b.n	80029f6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002666:	4b3b      	ldr	r3, [pc, #236]	; (8002754 <HAL_RCC_OscConfig+0x240>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	691b      	ldr	r3, [r3, #16]
 8002672:	00db      	lsls	r3, r3, #3
 8002674:	4937      	ldr	r1, [pc, #220]	; (8002754 <HAL_RCC_OscConfig+0x240>)
 8002676:	4313      	orrs	r3, r2
 8002678:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800267a:	e03a      	b.n	80026f2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	68db      	ldr	r3, [r3, #12]
 8002680:	2b00      	cmp	r3, #0
 8002682:	d020      	beq.n	80026c6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002684:	4b34      	ldr	r3, [pc, #208]	; (8002758 <HAL_RCC_OscConfig+0x244>)
 8002686:	2201      	movs	r2, #1
 8002688:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800268a:	f7ff f8c9 	bl	8001820 <HAL_GetTick>
 800268e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002690:	e008      	b.n	80026a4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002692:	f7ff f8c5 	bl	8001820 <HAL_GetTick>
 8002696:	4602      	mov	r2, r0
 8002698:	693b      	ldr	r3, [r7, #16]
 800269a:	1ad3      	subs	r3, r2, r3
 800269c:	2b02      	cmp	r3, #2
 800269e:	d901      	bls.n	80026a4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80026a0:	2303      	movs	r3, #3
 80026a2:	e1a8      	b.n	80029f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026a4:	4b2b      	ldr	r3, [pc, #172]	; (8002754 <HAL_RCC_OscConfig+0x240>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f003 0302 	and.w	r3, r3, #2
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d0f0      	beq.n	8002692 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026b0:	4b28      	ldr	r3, [pc, #160]	; (8002754 <HAL_RCC_OscConfig+0x240>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	691b      	ldr	r3, [r3, #16]
 80026bc:	00db      	lsls	r3, r3, #3
 80026be:	4925      	ldr	r1, [pc, #148]	; (8002754 <HAL_RCC_OscConfig+0x240>)
 80026c0:	4313      	orrs	r3, r2
 80026c2:	600b      	str	r3, [r1, #0]
 80026c4:	e015      	b.n	80026f2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80026c6:	4b24      	ldr	r3, [pc, #144]	; (8002758 <HAL_RCC_OscConfig+0x244>)
 80026c8:	2200      	movs	r2, #0
 80026ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026cc:	f7ff f8a8 	bl	8001820 <HAL_GetTick>
 80026d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026d2:	e008      	b.n	80026e6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80026d4:	f7ff f8a4 	bl	8001820 <HAL_GetTick>
 80026d8:	4602      	mov	r2, r0
 80026da:	693b      	ldr	r3, [r7, #16]
 80026dc:	1ad3      	subs	r3, r2, r3
 80026de:	2b02      	cmp	r3, #2
 80026e0:	d901      	bls.n	80026e6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80026e2:	2303      	movs	r3, #3
 80026e4:	e187      	b.n	80029f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026e6:	4b1b      	ldr	r3, [pc, #108]	; (8002754 <HAL_RCC_OscConfig+0x240>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f003 0302 	and.w	r3, r3, #2
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d1f0      	bne.n	80026d4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f003 0308 	and.w	r3, r3, #8
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d036      	beq.n	800276c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	695b      	ldr	r3, [r3, #20]
 8002702:	2b00      	cmp	r3, #0
 8002704:	d016      	beq.n	8002734 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002706:	4b15      	ldr	r3, [pc, #84]	; (800275c <HAL_RCC_OscConfig+0x248>)
 8002708:	2201      	movs	r2, #1
 800270a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800270c:	f7ff f888 	bl	8001820 <HAL_GetTick>
 8002710:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002712:	e008      	b.n	8002726 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002714:	f7ff f884 	bl	8001820 <HAL_GetTick>
 8002718:	4602      	mov	r2, r0
 800271a:	693b      	ldr	r3, [r7, #16]
 800271c:	1ad3      	subs	r3, r2, r3
 800271e:	2b02      	cmp	r3, #2
 8002720:	d901      	bls.n	8002726 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002722:	2303      	movs	r3, #3
 8002724:	e167      	b.n	80029f6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002726:	4b0b      	ldr	r3, [pc, #44]	; (8002754 <HAL_RCC_OscConfig+0x240>)
 8002728:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800272a:	f003 0302 	and.w	r3, r3, #2
 800272e:	2b00      	cmp	r3, #0
 8002730:	d0f0      	beq.n	8002714 <HAL_RCC_OscConfig+0x200>
 8002732:	e01b      	b.n	800276c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002734:	4b09      	ldr	r3, [pc, #36]	; (800275c <HAL_RCC_OscConfig+0x248>)
 8002736:	2200      	movs	r2, #0
 8002738:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800273a:	f7ff f871 	bl	8001820 <HAL_GetTick>
 800273e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002740:	e00e      	b.n	8002760 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002742:	f7ff f86d 	bl	8001820 <HAL_GetTick>
 8002746:	4602      	mov	r2, r0
 8002748:	693b      	ldr	r3, [r7, #16]
 800274a:	1ad3      	subs	r3, r2, r3
 800274c:	2b02      	cmp	r3, #2
 800274e:	d907      	bls.n	8002760 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002750:	2303      	movs	r3, #3
 8002752:	e150      	b.n	80029f6 <HAL_RCC_OscConfig+0x4e2>
 8002754:	40023800 	.word	0x40023800
 8002758:	42470000 	.word	0x42470000
 800275c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002760:	4b88      	ldr	r3, [pc, #544]	; (8002984 <HAL_RCC_OscConfig+0x470>)
 8002762:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002764:	f003 0302 	and.w	r3, r3, #2
 8002768:	2b00      	cmp	r3, #0
 800276a:	d1ea      	bne.n	8002742 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f003 0304 	and.w	r3, r3, #4
 8002774:	2b00      	cmp	r3, #0
 8002776:	f000 8097 	beq.w	80028a8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800277a:	2300      	movs	r3, #0
 800277c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800277e:	4b81      	ldr	r3, [pc, #516]	; (8002984 <HAL_RCC_OscConfig+0x470>)
 8002780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002782:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002786:	2b00      	cmp	r3, #0
 8002788:	d10f      	bne.n	80027aa <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800278a:	2300      	movs	r3, #0
 800278c:	60bb      	str	r3, [r7, #8]
 800278e:	4b7d      	ldr	r3, [pc, #500]	; (8002984 <HAL_RCC_OscConfig+0x470>)
 8002790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002792:	4a7c      	ldr	r2, [pc, #496]	; (8002984 <HAL_RCC_OscConfig+0x470>)
 8002794:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002798:	6413      	str	r3, [r2, #64]	; 0x40
 800279a:	4b7a      	ldr	r3, [pc, #488]	; (8002984 <HAL_RCC_OscConfig+0x470>)
 800279c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800279e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027a2:	60bb      	str	r3, [r7, #8]
 80027a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80027a6:	2301      	movs	r3, #1
 80027a8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027aa:	4b77      	ldr	r3, [pc, #476]	; (8002988 <HAL_RCC_OscConfig+0x474>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d118      	bne.n	80027e8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80027b6:	4b74      	ldr	r3, [pc, #464]	; (8002988 <HAL_RCC_OscConfig+0x474>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	4a73      	ldr	r2, [pc, #460]	; (8002988 <HAL_RCC_OscConfig+0x474>)
 80027bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80027c2:	f7ff f82d 	bl	8001820 <HAL_GetTick>
 80027c6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027c8:	e008      	b.n	80027dc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027ca:	f7ff f829 	bl	8001820 <HAL_GetTick>
 80027ce:	4602      	mov	r2, r0
 80027d0:	693b      	ldr	r3, [r7, #16]
 80027d2:	1ad3      	subs	r3, r2, r3
 80027d4:	2b02      	cmp	r3, #2
 80027d6:	d901      	bls.n	80027dc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80027d8:	2303      	movs	r3, #3
 80027da:	e10c      	b.n	80029f6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027dc:	4b6a      	ldr	r3, [pc, #424]	; (8002988 <HAL_RCC_OscConfig+0x474>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d0f0      	beq.n	80027ca <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	689b      	ldr	r3, [r3, #8]
 80027ec:	2b01      	cmp	r3, #1
 80027ee:	d106      	bne.n	80027fe <HAL_RCC_OscConfig+0x2ea>
 80027f0:	4b64      	ldr	r3, [pc, #400]	; (8002984 <HAL_RCC_OscConfig+0x470>)
 80027f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027f4:	4a63      	ldr	r2, [pc, #396]	; (8002984 <HAL_RCC_OscConfig+0x470>)
 80027f6:	f043 0301 	orr.w	r3, r3, #1
 80027fa:	6713      	str	r3, [r2, #112]	; 0x70
 80027fc:	e01c      	b.n	8002838 <HAL_RCC_OscConfig+0x324>
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	689b      	ldr	r3, [r3, #8]
 8002802:	2b05      	cmp	r3, #5
 8002804:	d10c      	bne.n	8002820 <HAL_RCC_OscConfig+0x30c>
 8002806:	4b5f      	ldr	r3, [pc, #380]	; (8002984 <HAL_RCC_OscConfig+0x470>)
 8002808:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800280a:	4a5e      	ldr	r2, [pc, #376]	; (8002984 <HAL_RCC_OscConfig+0x470>)
 800280c:	f043 0304 	orr.w	r3, r3, #4
 8002810:	6713      	str	r3, [r2, #112]	; 0x70
 8002812:	4b5c      	ldr	r3, [pc, #368]	; (8002984 <HAL_RCC_OscConfig+0x470>)
 8002814:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002816:	4a5b      	ldr	r2, [pc, #364]	; (8002984 <HAL_RCC_OscConfig+0x470>)
 8002818:	f043 0301 	orr.w	r3, r3, #1
 800281c:	6713      	str	r3, [r2, #112]	; 0x70
 800281e:	e00b      	b.n	8002838 <HAL_RCC_OscConfig+0x324>
 8002820:	4b58      	ldr	r3, [pc, #352]	; (8002984 <HAL_RCC_OscConfig+0x470>)
 8002822:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002824:	4a57      	ldr	r2, [pc, #348]	; (8002984 <HAL_RCC_OscConfig+0x470>)
 8002826:	f023 0301 	bic.w	r3, r3, #1
 800282a:	6713      	str	r3, [r2, #112]	; 0x70
 800282c:	4b55      	ldr	r3, [pc, #340]	; (8002984 <HAL_RCC_OscConfig+0x470>)
 800282e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002830:	4a54      	ldr	r2, [pc, #336]	; (8002984 <HAL_RCC_OscConfig+0x470>)
 8002832:	f023 0304 	bic.w	r3, r3, #4
 8002836:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	689b      	ldr	r3, [r3, #8]
 800283c:	2b00      	cmp	r3, #0
 800283e:	d015      	beq.n	800286c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002840:	f7fe ffee 	bl	8001820 <HAL_GetTick>
 8002844:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002846:	e00a      	b.n	800285e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002848:	f7fe ffea 	bl	8001820 <HAL_GetTick>
 800284c:	4602      	mov	r2, r0
 800284e:	693b      	ldr	r3, [r7, #16]
 8002850:	1ad3      	subs	r3, r2, r3
 8002852:	f241 3288 	movw	r2, #5000	; 0x1388
 8002856:	4293      	cmp	r3, r2
 8002858:	d901      	bls.n	800285e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800285a:	2303      	movs	r3, #3
 800285c:	e0cb      	b.n	80029f6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800285e:	4b49      	ldr	r3, [pc, #292]	; (8002984 <HAL_RCC_OscConfig+0x470>)
 8002860:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002862:	f003 0302 	and.w	r3, r3, #2
 8002866:	2b00      	cmp	r3, #0
 8002868:	d0ee      	beq.n	8002848 <HAL_RCC_OscConfig+0x334>
 800286a:	e014      	b.n	8002896 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800286c:	f7fe ffd8 	bl	8001820 <HAL_GetTick>
 8002870:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002872:	e00a      	b.n	800288a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002874:	f7fe ffd4 	bl	8001820 <HAL_GetTick>
 8002878:	4602      	mov	r2, r0
 800287a:	693b      	ldr	r3, [r7, #16]
 800287c:	1ad3      	subs	r3, r2, r3
 800287e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002882:	4293      	cmp	r3, r2
 8002884:	d901      	bls.n	800288a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002886:	2303      	movs	r3, #3
 8002888:	e0b5      	b.n	80029f6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800288a:	4b3e      	ldr	r3, [pc, #248]	; (8002984 <HAL_RCC_OscConfig+0x470>)
 800288c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800288e:	f003 0302 	and.w	r3, r3, #2
 8002892:	2b00      	cmp	r3, #0
 8002894:	d1ee      	bne.n	8002874 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002896:	7dfb      	ldrb	r3, [r7, #23]
 8002898:	2b01      	cmp	r3, #1
 800289a:	d105      	bne.n	80028a8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800289c:	4b39      	ldr	r3, [pc, #228]	; (8002984 <HAL_RCC_OscConfig+0x470>)
 800289e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028a0:	4a38      	ldr	r2, [pc, #224]	; (8002984 <HAL_RCC_OscConfig+0x470>)
 80028a2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80028a6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	699b      	ldr	r3, [r3, #24]
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	f000 80a1 	beq.w	80029f4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80028b2:	4b34      	ldr	r3, [pc, #208]	; (8002984 <HAL_RCC_OscConfig+0x470>)
 80028b4:	689b      	ldr	r3, [r3, #8]
 80028b6:	f003 030c 	and.w	r3, r3, #12
 80028ba:	2b08      	cmp	r3, #8
 80028bc:	d05c      	beq.n	8002978 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	699b      	ldr	r3, [r3, #24]
 80028c2:	2b02      	cmp	r3, #2
 80028c4:	d141      	bne.n	800294a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028c6:	4b31      	ldr	r3, [pc, #196]	; (800298c <HAL_RCC_OscConfig+0x478>)
 80028c8:	2200      	movs	r2, #0
 80028ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028cc:	f7fe ffa8 	bl	8001820 <HAL_GetTick>
 80028d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028d2:	e008      	b.n	80028e6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028d4:	f7fe ffa4 	bl	8001820 <HAL_GetTick>
 80028d8:	4602      	mov	r2, r0
 80028da:	693b      	ldr	r3, [r7, #16]
 80028dc:	1ad3      	subs	r3, r2, r3
 80028de:	2b02      	cmp	r3, #2
 80028e0:	d901      	bls.n	80028e6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80028e2:	2303      	movs	r3, #3
 80028e4:	e087      	b.n	80029f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028e6:	4b27      	ldr	r3, [pc, #156]	; (8002984 <HAL_RCC_OscConfig+0x470>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d1f0      	bne.n	80028d4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	69da      	ldr	r2, [r3, #28]
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6a1b      	ldr	r3, [r3, #32]
 80028fa:	431a      	orrs	r2, r3
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002900:	019b      	lsls	r3, r3, #6
 8002902:	431a      	orrs	r2, r3
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002908:	085b      	lsrs	r3, r3, #1
 800290a:	3b01      	subs	r3, #1
 800290c:	041b      	lsls	r3, r3, #16
 800290e:	431a      	orrs	r2, r3
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002914:	061b      	lsls	r3, r3, #24
 8002916:	491b      	ldr	r1, [pc, #108]	; (8002984 <HAL_RCC_OscConfig+0x470>)
 8002918:	4313      	orrs	r3, r2
 800291a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800291c:	4b1b      	ldr	r3, [pc, #108]	; (800298c <HAL_RCC_OscConfig+0x478>)
 800291e:	2201      	movs	r2, #1
 8002920:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002922:	f7fe ff7d 	bl	8001820 <HAL_GetTick>
 8002926:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002928:	e008      	b.n	800293c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800292a:	f7fe ff79 	bl	8001820 <HAL_GetTick>
 800292e:	4602      	mov	r2, r0
 8002930:	693b      	ldr	r3, [r7, #16]
 8002932:	1ad3      	subs	r3, r2, r3
 8002934:	2b02      	cmp	r3, #2
 8002936:	d901      	bls.n	800293c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002938:	2303      	movs	r3, #3
 800293a:	e05c      	b.n	80029f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800293c:	4b11      	ldr	r3, [pc, #68]	; (8002984 <HAL_RCC_OscConfig+0x470>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002944:	2b00      	cmp	r3, #0
 8002946:	d0f0      	beq.n	800292a <HAL_RCC_OscConfig+0x416>
 8002948:	e054      	b.n	80029f4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800294a:	4b10      	ldr	r3, [pc, #64]	; (800298c <HAL_RCC_OscConfig+0x478>)
 800294c:	2200      	movs	r2, #0
 800294e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002950:	f7fe ff66 	bl	8001820 <HAL_GetTick>
 8002954:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002956:	e008      	b.n	800296a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002958:	f7fe ff62 	bl	8001820 <HAL_GetTick>
 800295c:	4602      	mov	r2, r0
 800295e:	693b      	ldr	r3, [r7, #16]
 8002960:	1ad3      	subs	r3, r2, r3
 8002962:	2b02      	cmp	r3, #2
 8002964:	d901      	bls.n	800296a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002966:	2303      	movs	r3, #3
 8002968:	e045      	b.n	80029f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800296a:	4b06      	ldr	r3, [pc, #24]	; (8002984 <HAL_RCC_OscConfig+0x470>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002972:	2b00      	cmp	r3, #0
 8002974:	d1f0      	bne.n	8002958 <HAL_RCC_OscConfig+0x444>
 8002976:	e03d      	b.n	80029f4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	699b      	ldr	r3, [r3, #24]
 800297c:	2b01      	cmp	r3, #1
 800297e:	d107      	bne.n	8002990 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002980:	2301      	movs	r3, #1
 8002982:	e038      	b.n	80029f6 <HAL_RCC_OscConfig+0x4e2>
 8002984:	40023800 	.word	0x40023800
 8002988:	40007000 	.word	0x40007000
 800298c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002990:	4b1b      	ldr	r3, [pc, #108]	; (8002a00 <HAL_RCC_OscConfig+0x4ec>)
 8002992:	685b      	ldr	r3, [r3, #4]
 8002994:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	699b      	ldr	r3, [r3, #24]
 800299a:	2b01      	cmp	r3, #1
 800299c:	d028      	beq.n	80029f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80029a8:	429a      	cmp	r2, r3
 80029aa:	d121      	bne.n	80029f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029b6:	429a      	cmp	r2, r3
 80029b8:	d11a      	bne.n	80029f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80029ba:	68fa      	ldr	r2, [r7, #12]
 80029bc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80029c0:	4013      	ands	r3, r2
 80029c2:	687a      	ldr	r2, [r7, #4]
 80029c4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80029c6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80029c8:	4293      	cmp	r3, r2
 80029ca:	d111      	bne.n	80029f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029d6:	085b      	lsrs	r3, r3, #1
 80029d8:	3b01      	subs	r3, #1
 80029da:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80029dc:	429a      	cmp	r2, r3
 80029de:	d107      	bne.n	80029f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029ea:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80029ec:	429a      	cmp	r2, r3
 80029ee:	d001      	beq.n	80029f4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80029f0:	2301      	movs	r3, #1
 80029f2:	e000      	b.n	80029f6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80029f4:	2300      	movs	r3, #0
}
 80029f6:	4618      	mov	r0, r3
 80029f8:	3718      	adds	r7, #24
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bd80      	pop	{r7, pc}
 80029fe:	bf00      	nop
 8002a00:	40023800 	.word	0x40023800

08002a04 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b084      	sub	sp, #16
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
 8002a0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d101      	bne.n	8002a18 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a14:	2301      	movs	r3, #1
 8002a16:	e0cc      	b.n	8002bb2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002a18:	4b68      	ldr	r3, [pc, #416]	; (8002bbc <HAL_RCC_ClockConfig+0x1b8>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f003 0307 	and.w	r3, r3, #7
 8002a20:	683a      	ldr	r2, [r7, #0]
 8002a22:	429a      	cmp	r2, r3
 8002a24:	d90c      	bls.n	8002a40 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a26:	4b65      	ldr	r3, [pc, #404]	; (8002bbc <HAL_RCC_ClockConfig+0x1b8>)
 8002a28:	683a      	ldr	r2, [r7, #0]
 8002a2a:	b2d2      	uxtb	r2, r2
 8002a2c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a2e:	4b63      	ldr	r3, [pc, #396]	; (8002bbc <HAL_RCC_ClockConfig+0x1b8>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f003 0307 	and.w	r3, r3, #7
 8002a36:	683a      	ldr	r2, [r7, #0]
 8002a38:	429a      	cmp	r2, r3
 8002a3a:	d001      	beq.n	8002a40 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002a3c:	2301      	movs	r3, #1
 8002a3e:	e0b8      	b.n	8002bb2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f003 0302 	and.w	r3, r3, #2
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d020      	beq.n	8002a8e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f003 0304 	and.w	r3, r3, #4
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d005      	beq.n	8002a64 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002a58:	4b59      	ldr	r3, [pc, #356]	; (8002bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002a5a:	689b      	ldr	r3, [r3, #8]
 8002a5c:	4a58      	ldr	r2, [pc, #352]	; (8002bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002a5e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002a62:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f003 0308 	and.w	r3, r3, #8
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d005      	beq.n	8002a7c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002a70:	4b53      	ldr	r3, [pc, #332]	; (8002bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002a72:	689b      	ldr	r3, [r3, #8]
 8002a74:	4a52      	ldr	r2, [pc, #328]	; (8002bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002a76:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002a7a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a7c:	4b50      	ldr	r3, [pc, #320]	; (8002bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002a7e:	689b      	ldr	r3, [r3, #8]
 8002a80:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	689b      	ldr	r3, [r3, #8]
 8002a88:	494d      	ldr	r1, [pc, #308]	; (8002bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002a8a:	4313      	orrs	r3, r2
 8002a8c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f003 0301 	and.w	r3, r3, #1
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d044      	beq.n	8002b24 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	685b      	ldr	r3, [r3, #4]
 8002a9e:	2b01      	cmp	r3, #1
 8002aa0:	d107      	bne.n	8002ab2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002aa2:	4b47      	ldr	r3, [pc, #284]	; (8002bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d119      	bne.n	8002ae2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002aae:	2301      	movs	r3, #1
 8002ab0:	e07f      	b.n	8002bb2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	685b      	ldr	r3, [r3, #4]
 8002ab6:	2b02      	cmp	r3, #2
 8002ab8:	d003      	beq.n	8002ac2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002abe:	2b03      	cmp	r3, #3
 8002ac0:	d107      	bne.n	8002ad2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ac2:	4b3f      	ldr	r3, [pc, #252]	; (8002bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d109      	bne.n	8002ae2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ace:	2301      	movs	r3, #1
 8002ad0:	e06f      	b.n	8002bb2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ad2:	4b3b      	ldr	r3, [pc, #236]	; (8002bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f003 0302 	and.w	r3, r3, #2
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d101      	bne.n	8002ae2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ade:	2301      	movs	r3, #1
 8002ae0:	e067      	b.n	8002bb2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002ae2:	4b37      	ldr	r3, [pc, #220]	; (8002bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002ae4:	689b      	ldr	r3, [r3, #8]
 8002ae6:	f023 0203 	bic.w	r2, r3, #3
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	685b      	ldr	r3, [r3, #4]
 8002aee:	4934      	ldr	r1, [pc, #208]	; (8002bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002af0:	4313      	orrs	r3, r2
 8002af2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002af4:	f7fe fe94 	bl	8001820 <HAL_GetTick>
 8002af8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002afa:	e00a      	b.n	8002b12 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002afc:	f7fe fe90 	bl	8001820 <HAL_GetTick>
 8002b00:	4602      	mov	r2, r0
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	1ad3      	subs	r3, r2, r3
 8002b06:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d901      	bls.n	8002b12 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002b0e:	2303      	movs	r3, #3
 8002b10:	e04f      	b.n	8002bb2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b12:	4b2b      	ldr	r3, [pc, #172]	; (8002bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002b14:	689b      	ldr	r3, [r3, #8]
 8002b16:	f003 020c 	and.w	r2, r3, #12
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	685b      	ldr	r3, [r3, #4]
 8002b1e:	009b      	lsls	r3, r3, #2
 8002b20:	429a      	cmp	r2, r3
 8002b22:	d1eb      	bne.n	8002afc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002b24:	4b25      	ldr	r3, [pc, #148]	; (8002bbc <HAL_RCC_ClockConfig+0x1b8>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f003 0307 	and.w	r3, r3, #7
 8002b2c:	683a      	ldr	r2, [r7, #0]
 8002b2e:	429a      	cmp	r2, r3
 8002b30:	d20c      	bcs.n	8002b4c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b32:	4b22      	ldr	r3, [pc, #136]	; (8002bbc <HAL_RCC_ClockConfig+0x1b8>)
 8002b34:	683a      	ldr	r2, [r7, #0]
 8002b36:	b2d2      	uxtb	r2, r2
 8002b38:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b3a:	4b20      	ldr	r3, [pc, #128]	; (8002bbc <HAL_RCC_ClockConfig+0x1b8>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f003 0307 	and.w	r3, r3, #7
 8002b42:	683a      	ldr	r2, [r7, #0]
 8002b44:	429a      	cmp	r2, r3
 8002b46:	d001      	beq.n	8002b4c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002b48:	2301      	movs	r3, #1
 8002b4a:	e032      	b.n	8002bb2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f003 0304 	and.w	r3, r3, #4
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d008      	beq.n	8002b6a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b58:	4b19      	ldr	r3, [pc, #100]	; (8002bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002b5a:	689b      	ldr	r3, [r3, #8]
 8002b5c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	68db      	ldr	r3, [r3, #12]
 8002b64:	4916      	ldr	r1, [pc, #88]	; (8002bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002b66:	4313      	orrs	r3, r2
 8002b68:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f003 0308 	and.w	r3, r3, #8
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d009      	beq.n	8002b8a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002b76:	4b12      	ldr	r3, [pc, #72]	; (8002bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002b78:	689b      	ldr	r3, [r3, #8]
 8002b7a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	691b      	ldr	r3, [r3, #16]
 8002b82:	00db      	lsls	r3, r3, #3
 8002b84:	490e      	ldr	r1, [pc, #56]	; (8002bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002b86:	4313      	orrs	r3, r2
 8002b88:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002b8a:	f000 f821 	bl	8002bd0 <HAL_RCC_GetSysClockFreq>
 8002b8e:	4602      	mov	r2, r0
 8002b90:	4b0b      	ldr	r3, [pc, #44]	; (8002bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002b92:	689b      	ldr	r3, [r3, #8]
 8002b94:	091b      	lsrs	r3, r3, #4
 8002b96:	f003 030f 	and.w	r3, r3, #15
 8002b9a:	490a      	ldr	r1, [pc, #40]	; (8002bc4 <HAL_RCC_ClockConfig+0x1c0>)
 8002b9c:	5ccb      	ldrb	r3, [r1, r3]
 8002b9e:	fa22 f303 	lsr.w	r3, r2, r3
 8002ba2:	4a09      	ldr	r2, [pc, #36]	; (8002bc8 <HAL_RCC_ClockConfig+0x1c4>)
 8002ba4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002ba6:	4b09      	ldr	r3, [pc, #36]	; (8002bcc <HAL_RCC_ClockConfig+0x1c8>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	4618      	mov	r0, r3
 8002bac:	f7fe fdf4 	bl	8001798 <HAL_InitTick>

  return HAL_OK;
 8002bb0:	2300      	movs	r3, #0
}
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	3710      	adds	r7, #16
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	bd80      	pop	{r7, pc}
 8002bba:	bf00      	nop
 8002bbc:	40023c00 	.word	0x40023c00
 8002bc0:	40023800 	.word	0x40023800
 8002bc4:	08004070 	.word	0x08004070
 8002bc8:	20000000 	.word	0x20000000
 8002bcc:	20000004 	.word	0x20000004

08002bd0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002bd0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002bd4:	b094      	sub	sp, #80	; 0x50
 8002bd6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002bd8:	2300      	movs	r3, #0
 8002bda:	647b      	str	r3, [r7, #68]	; 0x44
 8002bdc:	2300      	movs	r3, #0
 8002bde:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002be0:	2300      	movs	r3, #0
 8002be2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002be4:	2300      	movs	r3, #0
 8002be6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002be8:	4b79      	ldr	r3, [pc, #484]	; (8002dd0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002bea:	689b      	ldr	r3, [r3, #8]
 8002bec:	f003 030c 	and.w	r3, r3, #12
 8002bf0:	2b08      	cmp	r3, #8
 8002bf2:	d00d      	beq.n	8002c10 <HAL_RCC_GetSysClockFreq+0x40>
 8002bf4:	2b08      	cmp	r3, #8
 8002bf6:	f200 80e1 	bhi.w	8002dbc <HAL_RCC_GetSysClockFreq+0x1ec>
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d002      	beq.n	8002c04 <HAL_RCC_GetSysClockFreq+0x34>
 8002bfe:	2b04      	cmp	r3, #4
 8002c00:	d003      	beq.n	8002c0a <HAL_RCC_GetSysClockFreq+0x3a>
 8002c02:	e0db      	b.n	8002dbc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002c04:	4b73      	ldr	r3, [pc, #460]	; (8002dd4 <HAL_RCC_GetSysClockFreq+0x204>)
 8002c06:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002c08:	e0db      	b.n	8002dc2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002c0a:	4b73      	ldr	r3, [pc, #460]	; (8002dd8 <HAL_RCC_GetSysClockFreq+0x208>)
 8002c0c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002c0e:	e0d8      	b.n	8002dc2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002c10:	4b6f      	ldr	r3, [pc, #444]	; (8002dd0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c12:	685b      	ldr	r3, [r3, #4]
 8002c14:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002c18:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002c1a:	4b6d      	ldr	r3, [pc, #436]	; (8002dd0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c1c:	685b      	ldr	r3, [r3, #4]
 8002c1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d063      	beq.n	8002cee <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c26:	4b6a      	ldr	r3, [pc, #424]	; (8002dd0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c28:	685b      	ldr	r3, [r3, #4]
 8002c2a:	099b      	lsrs	r3, r3, #6
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002c30:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002c32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c38:	633b      	str	r3, [r7, #48]	; 0x30
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	637b      	str	r3, [r7, #52]	; 0x34
 8002c3e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002c42:	4622      	mov	r2, r4
 8002c44:	462b      	mov	r3, r5
 8002c46:	f04f 0000 	mov.w	r0, #0
 8002c4a:	f04f 0100 	mov.w	r1, #0
 8002c4e:	0159      	lsls	r1, r3, #5
 8002c50:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002c54:	0150      	lsls	r0, r2, #5
 8002c56:	4602      	mov	r2, r0
 8002c58:	460b      	mov	r3, r1
 8002c5a:	4621      	mov	r1, r4
 8002c5c:	1a51      	subs	r1, r2, r1
 8002c5e:	6139      	str	r1, [r7, #16]
 8002c60:	4629      	mov	r1, r5
 8002c62:	eb63 0301 	sbc.w	r3, r3, r1
 8002c66:	617b      	str	r3, [r7, #20]
 8002c68:	f04f 0200 	mov.w	r2, #0
 8002c6c:	f04f 0300 	mov.w	r3, #0
 8002c70:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002c74:	4659      	mov	r1, fp
 8002c76:	018b      	lsls	r3, r1, #6
 8002c78:	4651      	mov	r1, sl
 8002c7a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002c7e:	4651      	mov	r1, sl
 8002c80:	018a      	lsls	r2, r1, #6
 8002c82:	4651      	mov	r1, sl
 8002c84:	ebb2 0801 	subs.w	r8, r2, r1
 8002c88:	4659      	mov	r1, fp
 8002c8a:	eb63 0901 	sbc.w	r9, r3, r1
 8002c8e:	f04f 0200 	mov.w	r2, #0
 8002c92:	f04f 0300 	mov.w	r3, #0
 8002c96:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002c9a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002c9e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002ca2:	4690      	mov	r8, r2
 8002ca4:	4699      	mov	r9, r3
 8002ca6:	4623      	mov	r3, r4
 8002ca8:	eb18 0303 	adds.w	r3, r8, r3
 8002cac:	60bb      	str	r3, [r7, #8]
 8002cae:	462b      	mov	r3, r5
 8002cb0:	eb49 0303 	adc.w	r3, r9, r3
 8002cb4:	60fb      	str	r3, [r7, #12]
 8002cb6:	f04f 0200 	mov.w	r2, #0
 8002cba:	f04f 0300 	mov.w	r3, #0
 8002cbe:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002cc2:	4629      	mov	r1, r5
 8002cc4:	024b      	lsls	r3, r1, #9
 8002cc6:	4621      	mov	r1, r4
 8002cc8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002ccc:	4621      	mov	r1, r4
 8002cce:	024a      	lsls	r2, r1, #9
 8002cd0:	4610      	mov	r0, r2
 8002cd2:	4619      	mov	r1, r3
 8002cd4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	62bb      	str	r3, [r7, #40]	; 0x28
 8002cda:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002cdc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002ce0:	f7fd fa78 	bl	80001d4 <__aeabi_uldivmod>
 8002ce4:	4602      	mov	r2, r0
 8002ce6:	460b      	mov	r3, r1
 8002ce8:	4613      	mov	r3, r2
 8002cea:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002cec:	e058      	b.n	8002da0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002cee:	4b38      	ldr	r3, [pc, #224]	; (8002dd0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002cf0:	685b      	ldr	r3, [r3, #4]
 8002cf2:	099b      	lsrs	r3, r3, #6
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	4611      	mov	r1, r2
 8002cfa:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002cfe:	623b      	str	r3, [r7, #32]
 8002d00:	2300      	movs	r3, #0
 8002d02:	627b      	str	r3, [r7, #36]	; 0x24
 8002d04:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002d08:	4642      	mov	r2, r8
 8002d0a:	464b      	mov	r3, r9
 8002d0c:	f04f 0000 	mov.w	r0, #0
 8002d10:	f04f 0100 	mov.w	r1, #0
 8002d14:	0159      	lsls	r1, r3, #5
 8002d16:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002d1a:	0150      	lsls	r0, r2, #5
 8002d1c:	4602      	mov	r2, r0
 8002d1e:	460b      	mov	r3, r1
 8002d20:	4641      	mov	r1, r8
 8002d22:	ebb2 0a01 	subs.w	sl, r2, r1
 8002d26:	4649      	mov	r1, r9
 8002d28:	eb63 0b01 	sbc.w	fp, r3, r1
 8002d2c:	f04f 0200 	mov.w	r2, #0
 8002d30:	f04f 0300 	mov.w	r3, #0
 8002d34:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002d38:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002d3c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002d40:	ebb2 040a 	subs.w	r4, r2, sl
 8002d44:	eb63 050b 	sbc.w	r5, r3, fp
 8002d48:	f04f 0200 	mov.w	r2, #0
 8002d4c:	f04f 0300 	mov.w	r3, #0
 8002d50:	00eb      	lsls	r3, r5, #3
 8002d52:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002d56:	00e2      	lsls	r2, r4, #3
 8002d58:	4614      	mov	r4, r2
 8002d5a:	461d      	mov	r5, r3
 8002d5c:	4643      	mov	r3, r8
 8002d5e:	18e3      	adds	r3, r4, r3
 8002d60:	603b      	str	r3, [r7, #0]
 8002d62:	464b      	mov	r3, r9
 8002d64:	eb45 0303 	adc.w	r3, r5, r3
 8002d68:	607b      	str	r3, [r7, #4]
 8002d6a:	f04f 0200 	mov.w	r2, #0
 8002d6e:	f04f 0300 	mov.w	r3, #0
 8002d72:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002d76:	4629      	mov	r1, r5
 8002d78:	028b      	lsls	r3, r1, #10
 8002d7a:	4621      	mov	r1, r4
 8002d7c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002d80:	4621      	mov	r1, r4
 8002d82:	028a      	lsls	r2, r1, #10
 8002d84:	4610      	mov	r0, r2
 8002d86:	4619      	mov	r1, r3
 8002d88:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	61bb      	str	r3, [r7, #24]
 8002d8e:	61fa      	str	r2, [r7, #28]
 8002d90:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002d94:	f7fd fa1e 	bl	80001d4 <__aeabi_uldivmod>
 8002d98:	4602      	mov	r2, r0
 8002d9a:	460b      	mov	r3, r1
 8002d9c:	4613      	mov	r3, r2
 8002d9e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002da0:	4b0b      	ldr	r3, [pc, #44]	; (8002dd0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002da2:	685b      	ldr	r3, [r3, #4]
 8002da4:	0c1b      	lsrs	r3, r3, #16
 8002da6:	f003 0303 	and.w	r3, r3, #3
 8002daa:	3301      	adds	r3, #1
 8002dac:	005b      	lsls	r3, r3, #1
 8002dae:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002db0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002db2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002db4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002db8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002dba:	e002      	b.n	8002dc2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002dbc:	4b05      	ldr	r3, [pc, #20]	; (8002dd4 <HAL_RCC_GetSysClockFreq+0x204>)
 8002dbe:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002dc0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002dc2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	3750      	adds	r7, #80	; 0x50
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002dce:	bf00      	nop
 8002dd0:	40023800 	.word	0x40023800
 8002dd4:	00f42400 	.word	0x00f42400
 8002dd8:	007a1200 	.word	0x007a1200

08002ddc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ddc:	b480      	push	{r7}
 8002dde:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002de0:	4b03      	ldr	r3, [pc, #12]	; (8002df0 <HAL_RCC_GetHCLKFreq+0x14>)
 8002de2:	681b      	ldr	r3, [r3, #0]
}
 8002de4:	4618      	mov	r0, r3
 8002de6:	46bd      	mov	sp, r7
 8002de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dec:	4770      	bx	lr
 8002dee:	bf00      	nop
 8002df0:	20000000 	.word	0x20000000

08002df4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002df8:	f7ff fff0 	bl	8002ddc <HAL_RCC_GetHCLKFreq>
 8002dfc:	4602      	mov	r2, r0
 8002dfe:	4b05      	ldr	r3, [pc, #20]	; (8002e14 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002e00:	689b      	ldr	r3, [r3, #8]
 8002e02:	0a9b      	lsrs	r3, r3, #10
 8002e04:	f003 0307 	and.w	r3, r3, #7
 8002e08:	4903      	ldr	r1, [pc, #12]	; (8002e18 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002e0a:	5ccb      	ldrb	r3, [r1, r3]
 8002e0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e10:	4618      	mov	r0, r3
 8002e12:	bd80      	pop	{r7, pc}
 8002e14:	40023800 	.word	0x40023800
 8002e18:	08004080 	.word	0x08004080

08002e1c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002e20:	f7ff ffdc 	bl	8002ddc <HAL_RCC_GetHCLKFreq>
 8002e24:	4602      	mov	r2, r0
 8002e26:	4b05      	ldr	r3, [pc, #20]	; (8002e3c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002e28:	689b      	ldr	r3, [r3, #8]
 8002e2a:	0b5b      	lsrs	r3, r3, #13
 8002e2c:	f003 0307 	and.w	r3, r3, #7
 8002e30:	4903      	ldr	r1, [pc, #12]	; (8002e40 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002e32:	5ccb      	ldrb	r3, [r1, r3]
 8002e34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e38:	4618      	mov	r0, r3
 8002e3a:	bd80      	pop	{r7, pc}
 8002e3c:	40023800 	.word	0x40023800
 8002e40:	08004080 	.word	0x08004080

08002e44 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b082      	sub	sp, #8
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d101      	bne.n	8002e56 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002e52:	2301      	movs	r3, #1
 8002e54:	e041      	b.n	8002eda <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e5c:	b2db      	uxtb	r3, r3
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d106      	bne.n	8002e70 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	2200      	movs	r2, #0
 8002e66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002e6a:	6878      	ldr	r0, [r7, #4]
 8002e6c:	f7fe faf2 	bl	8001454 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2202      	movs	r2, #2
 8002e74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681a      	ldr	r2, [r3, #0]
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	3304      	adds	r3, #4
 8002e80:	4619      	mov	r1, r3
 8002e82:	4610      	mov	r0, r2
 8002e84:	f000 fac0 	bl	8003408 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2201      	movs	r2, #1
 8002e8c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2201      	movs	r2, #1
 8002e94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2201      	movs	r2, #1
 8002e9c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2201      	movs	r2, #1
 8002ea4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2201      	movs	r2, #1
 8002eac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2201      	movs	r2, #1
 8002eb4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2201      	movs	r2, #1
 8002ebc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2201      	movs	r2, #1
 8002ec4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2201      	movs	r2, #1
 8002ecc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2201      	movs	r2, #1
 8002ed4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002ed8:	2300      	movs	r3, #0
}
 8002eda:	4618      	mov	r0, r3
 8002edc:	3708      	adds	r7, #8
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	bd80      	pop	{r7, pc}

08002ee2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002ee2:	b580      	push	{r7, lr}
 8002ee4:	b082      	sub	sp, #8
 8002ee6:	af00      	add	r7, sp, #0
 8002ee8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d101      	bne.n	8002ef4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002ef0:	2301      	movs	r3, #1
 8002ef2:	e041      	b.n	8002f78 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002efa:	b2db      	uxtb	r3, r3
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d106      	bne.n	8002f0e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2200      	movs	r2, #0
 8002f04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002f08:	6878      	ldr	r0, [r7, #4]
 8002f0a:	f000 f839 	bl	8002f80 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	2202      	movs	r2, #2
 8002f12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681a      	ldr	r2, [r3, #0]
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	3304      	adds	r3, #4
 8002f1e:	4619      	mov	r1, r3
 8002f20:	4610      	mov	r0, r2
 8002f22:	f000 fa71 	bl	8003408 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	2201      	movs	r2, #1
 8002f2a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	2201      	movs	r2, #1
 8002f32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	2201      	movs	r2, #1
 8002f3a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	2201      	movs	r2, #1
 8002f42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	2201      	movs	r2, #1
 8002f4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	2201      	movs	r2, #1
 8002f52:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2201      	movs	r2, #1
 8002f5a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	2201      	movs	r2, #1
 8002f62:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	2201      	movs	r2, #1
 8002f6a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	2201      	movs	r2, #1
 8002f72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002f76:	2300      	movs	r3, #0
}
 8002f78:	4618      	mov	r0, r3
 8002f7a:	3708      	adds	r7, #8
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	bd80      	pop	{r7, pc}

08002f80 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002f80:	b480      	push	{r7}
 8002f82:	b083      	sub	sp, #12
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002f88:	bf00      	nop
 8002f8a:	370c      	adds	r7, #12
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f92:	4770      	bx	lr

08002f94 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b084      	sub	sp, #16
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
 8002f9c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d109      	bne.n	8002fb8 <HAL_TIM_PWM_Start+0x24>
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002faa:	b2db      	uxtb	r3, r3
 8002fac:	2b01      	cmp	r3, #1
 8002fae:	bf14      	ite	ne
 8002fb0:	2301      	movne	r3, #1
 8002fb2:	2300      	moveq	r3, #0
 8002fb4:	b2db      	uxtb	r3, r3
 8002fb6:	e022      	b.n	8002ffe <HAL_TIM_PWM_Start+0x6a>
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	2b04      	cmp	r3, #4
 8002fbc:	d109      	bne.n	8002fd2 <HAL_TIM_PWM_Start+0x3e>
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002fc4:	b2db      	uxtb	r3, r3
 8002fc6:	2b01      	cmp	r3, #1
 8002fc8:	bf14      	ite	ne
 8002fca:	2301      	movne	r3, #1
 8002fcc:	2300      	moveq	r3, #0
 8002fce:	b2db      	uxtb	r3, r3
 8002fd0:	e015      	b.n	8002ffe <HAL_TIM_PWM_Start+0x6a>
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	2b08      	cmp	r3, #8
 8002fd6:	d109      	bne.n	8002fec <HAL_TIM_PWM_Start+0x58>
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002fde:	b2db      	uxtb	r3, r3
 8002fe0:	2b01      	cmp	r3, #1
 8002fe2:	bf14      	ite	ne
 8002fe4:	2301      	movne	r3, #1
 8002fe6:	2300      	moveq	r3, #0
 8002fe8:	b2db      	uxtb	r3, r3
 8002fea:	e008      	b.n	8002ffe <HAL_TIM_PWM_Start+0x6a>
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ff2:	b2db      	uxtb	r3, r3
 8002ff4:	2b01      	cmp	r3, #1
 8002ff6:	bf14      	ite	ne
 8002ff8:	2301      	movne	r3, #1
 8002ffa:	2300      	moveq	r3, #0
 8002ffc:	b2db      	uxtb	r3, r3
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d001      	beq.n	8003006 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003002:	2301      	movs	r3, #1
 8003004:	e068      	b.n	80030d8 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	2b00      	cmp	r3, #0
 800300a:	d104      	bne.n	8003016 <HAL_TIM_PWM_Start+0x82>
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2202      	movs	r2, #2
 8003010:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003014:	e013      	b.n	800303e <HAL_TIM_PWM_Start+0xaa>
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	2b04      	cmp	r3, #4
 800301a:	d104      	bne.n	8003026 <HAL_TIM_PWM_Start+0x92>
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2202      	movs	r2, #2
 8003020:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003024:	e00b      	b.n	800303e <HAL_TIM_PWM_Start+0xaa>
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	2b08      	cmp	r3, #8
 800302a:	d104      	bne.n	8003036 <HAL_TIM_PWM_Start+0xa2>
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2202      	movs	r2, #2
 8003030:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003034:	e003      	b.n	800303e <HAL_TIM_PWM_Start+0xaa>
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	2202      	movs	r2, #2
 800303a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	2201      	movs	r2, #1
 8003044:	6839      	ldr	r1, [r7, #0]
 8003046:	4618      	mov	r0, r3
 8003048:	f000 fc84 	bl	8003954 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	4a23      	ldr	r2, [pc, #140]	; (80030e0 <HAL_TIM_PWM_Start+0x14c>)
 8003052:	4293      	cmp	r3, r2
 8003054:	d107      	bne.n	8003066 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003064:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	4a1d      	ldr	r2, [pc, #116]	; (80030e0 <HAL_TIM_PWM_Start+0x14c>)
 800306c:	4293      	cmp	r3, r2
 800306e:	d018      	beq.n	80030a2 <HAL_TIM_PWM_Start+0x10e>
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003078:	d013      	beq.n	80030a2 <HAL_TIM_PWM_Start+0x10e>
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	4a19      	ldr	r2, [pc, #100]	; (80030e4 <HAL_TIM_PWM_Start+0x150>)
 8003080:	4293      	cmp	r3, r2
 8003082:	d00e      	beq.n	80030a2 <HAL_TIM_PWM_Start+0x10e>
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	4a17      	ldr	r2, [pc, #92]	; (80030e8 <HAL_TIM_PWM_Start+0x154>)
 800308a:	4293      	cmp	r3, r2
 800308c:	d009      	beq.n	80030a2 <HAL_TIM_PWM_Start+0x10e>
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	4a16      	ldr	r2, [pc, #88]	; (80030ec <HAL_TIM_PWM_Start+0x158>)
 8003094:	4293      	cmp	r3, r2
 8003096:	d004      	beq.n	80030a2 <HAL_TIM_PWM_Start+0x10e>
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	4a14      	ldr	r2, [pc, #80]	; (80030f0 <HAL_TIM_PWM_Start+0x15c>)
 800309e:	4293      	cmp	r3, r2
 80030a0:	d111      	bne.n	80030c6 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	689b      	ldr	r3, [r3, #8]
 80030a8:	f003 0307 	and.w	r3, r3, #7
 80030ac:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	2b06      	cmp	r3, #6
 80030b2:	d010      	beq.n	80030d6 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	681a      	ldr	r2, [r3, #0]
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f042 0201 	orr.w	r2, r2, #1
 80030c2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030c4:	e007      	b.n	80030d6 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	681a      	ldr	r2, [r3, #0]
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f042 0201 	orr.w	r2, r2, #1
 80030d4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80030d6:	2300      	movs	r3, #0
}
 80030d8:	4618      	mov	r0, r3
 80030da:	3710      	adds	r7, #16
 80030dc:	46bd      	mov	sp, r7
 80030de:	bd80      	pop	{r7, pc}
 80030e0:	40010000 	.word	0x40010000
 80030e4:	40000400 	.word	0x40000400
 80030e8:	40000800 	.word	0x40000800
 80030ec:	40000c00 	.word	0x40000c00
 80030f0:	40014000 	.word	0x40014000

080030f4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b086      	sub	sp, #24
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	60f8      	str	r0, [r7, #12]
 80030fc:	60b9      	str	r1, [r7, #8]
 80030fe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003100:	2300      	movs	r3, #0
 8003102:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800310a:	2b01      	cmp	r3, #1
 800310c:	d101      	bne.n	8003112 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800310e:	2302      	movs	r3, #2
 8003110:	e0ae      	b.n	8003270 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	2201      	movs	r2, #1
 8003116:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	2b0c      	cmp	r3, #12
 800311e:	f200 809f 	bhi.w	8003260 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003122:	a201      	add	r2, pc, #4	; (adr r2, 8003128 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003124:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003128:	0800315d 	.word	0x0800315d
 800312c:	08003261 	.word	0x08003261
 8003130:	08003261 	.word	0x08003261
 8003134:	08003261 	.word	0x08003261
 8003138:	0800319d 	.word	0x0800319d
 800313c:	08003261 	.word	0x08003261
 8003140:	08003261 	.word	0x08003261
 8003144:	08003261 	.word	0x08003261
 8003148:	080031df 	.word	0x080031df
 800314c:	08003261 	.word	0x08003261
 8003150:	08003261 	.word	0x08003261
 8003154:	08003261 	.word	0x08003261
 8003158:	0800321f 	.word	0x0800321f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	68b9      	ldr	r1, [r7, #8]
 8003162:	4618      	mov	r0, r3
 8003164:	f000 f9d0 	bl	8003508 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	699a      	ldr	r2, [r3, #24]
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f042 0208 	orr.w	r2, r2, #8
 8003176:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	699a      	ldr	r2, [r3, #24]
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f022 0204 	bic.w	r2, r2, #4
 8003186:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	6999      	ldr	r1, [r3, #24]
 800318e:	68bb      	ldr	r3, [r7, #8]
 8003190:	691a      	ldr	r2, [r3, #16]
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	430a      	orrs	r2, r1
 8003198:	619a      	str	r2, [r3, #24]
      break;
 800319a:	e064      	b.n	8003266 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	68b9      	ldr	r1, [r7, #8]
 80031a2:	4618      	mov	r0, r3
 80031a4:	f000 fa16 	bl	80035d4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	699a      	ldr	r2, [r3, #24]
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80031b6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	699a      	ldr	r2, [r3, #24]
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80031c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	6999      	ldr	r1, [r3, #24]
 80031ce:	68bb      	ldr	r3, [r7, #8]
 80031d0:	691b      	ldr	r3, [r3, #16]
 80031d2:	021a      	lsls	r2, r3, #8
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	430a      	orrs	r2, r1
 80031da:	619a      	str	r2, [r3, #24]
      break;
 80031dc:	e043      	b.n	8003266 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	68b9      	ldr	r1, [r7, #8]
 80031e4:	4618      	mov	r0, r3
 80031e6:	f000 fa61 	bl	80036ac <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	69da      	ldr	r2, [r3, #28]
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f042 0208 	orr.w	r2, r2, #8
 80031f8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	69da      	ldr	r2, [r3, #28]
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f022 0204 	bic.w	r2, r2, #4
 8003208:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	69d9      	ldr	r1, [r3, #28]
 8003210:	68bb      	ldr	r3, [r7, #8]
 8003212:	691a      	ldr	r2, [r3, #16]
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	430a      	orrs	r2, r1
 800321a:	61da      	str	r2, [r3, #28]
      break;
 800321c:	e023      	b.n	8003266 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	68b9      	ldr	r1, [r7, #8]
 8003224:	4618      	mov	r0, r3
 8003226:	f000 faab 	bl	8003780 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	69da      	ldr	r2, [r3, #28]
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003238:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	69da      	ldr	r2, [r3, #28]
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003248:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	69d9      	ldr	r1, [r3, #28]
 8003250:	68bb      	ldr	r3, [r7, #8]
 8003252:	691b      	ldr	r3, [r3, #16]
 8003254:	021a      	lsls	r2, r3, #8
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	430a      	orrs	r2, r1
 800325c:	61da      	str	r2, [r3, #28]
      break;
 800325e:	e002      	b.n	8003266 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003260:	2301      	movs	r3, #1
 8003262:	75fb      	strb	r3, [r7, #23]
      break;
 8003264:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	2200      	movs	r2, #0
 800326a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800326e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003270:	4618      	mov	r0, r3
 8003272:	3718      	adds	r7, #24
 8003274:	46bd      	mov	sp, r7
 8003276:	bd80      	pop	{r7, pc}

08003278 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	b084      	sub	sp, #16
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
 8003280:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003282:	2300      	movs	r3, #0
 8003284:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800328c:	2b01      	cmp	r3, #1
 800328e:	d101      	bne.n	8003294 <HAL_TIM_ConfigClockSource+0x1c>
 8003290:	2302      	movs	r3, #2
 8003292:	e0b4      	b.n	80033fe <HAL_TIM_ConfigClockSource+0x186>
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2201      	movs	r2, #1
 8003298:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2202      	movs	r2, #2
 80032a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	689b      	ldr	r3, [r3, #8]
 80032aa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80032ac:	68bb      	ldr	r3, [r7, #8]
 80032ae:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80032b2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80032b4:	68bb      	ldr	r3, [r7, #8]
 80032b6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80032ba:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	68ba      	ldr	r2, [r7, #8]
 80032c2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80032cc:	d03e      	beq.n	800334c <HAL_TIM_ConfigClockSource+0xd4>
 80032ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80032d2:	f200 8087 	bhi.w	80033e4 <HAL_TIM_ConfigClockSource+0x16c>
 80032d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032da:	f000 8086 	beq.w	80033ea <HAL_TIM_ConfigClockSource+0x172>
 80032de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032e2:	d87f      	bhi.n	80033e4 <HAL_TIM_ConfigClockSource+0x16c>
 80032e4:	2b70      	cmp	r3, #112	; 0x70
 80032e6:	d01a      	beq.n	800331e <HAL_TIM_ConfigClockSource+0xa6>
 80032e8:	2b70      	cmp	r3, #112	; 0x70
 80032ea:	d87b      	bhi.n	80033e4 <HAL_TIM_ConfigClockSource+0x16c>
 80032ec:	2b60      	cmp	r3, #96	; 0x60
 80032ee:	d050      	beq.n	8003392 <HAL_TIM_ConfigClockSource+0x11a>
 80032f0:	2b60      	cmp	r3, #96	; 0x60
 80032f2:	d877      	bhi.n	80033e4 <HAL_TIM_ConfigClockSource+0x16c>
 80032f4:	2b50      	cmp	r3, #80	; 0x50
 80032f6:	d03c      	beq.n	8003372 <HAL_TIM_ConfigClockSource+0xfa>
 80032f8:	2b50      	cmp	r3, #80	; 0x50
 80032fa:	d873      	bhi.n	80033e4 <HAL_TIM_ConfigClockSource+0x16c>
 80032fc:	2b40      	cmp	r3, #64	; 0x40
 80032fe:	d058      	beq.n	80033b2 <HAL_TIM_ConfigClockSource+0x13a>
 8003300:	2b40      	cmp	r3, #64	; 0x40
 8003302:	d86f      	bhi.n	80033e4 <HAL_TIM_ConfigClockSource+0x16c>
 8003304:	2b30      	cmp	r3, #48	; 0x30
 8003306:	d064      	beq.n	80033d2 <HAL_TIM_ConfigClockSource+0x15a>
 8003308:	2b30      	cmp	r3, #48	; 0x30
 800330a:	d86b      	bhi.n	80033e4 <HAL_TIM_ConfigClockSource+0x16c>
 800330c:	2b20      	cmp	r3, #32
 800330e:	d060      	beq.n	80033d2 <HAL_TIM_ConfigClockSource+0x15a>
 8003310:	2b20      	cmp	r3, #32
 8003312:	d867      	bhi.n	80033e4 <HAL_TIM_ConfigClockSource+0x16c>
 8003314:	2b00      	cmp	r3, #0
 8003316:	d05c      	beq.n	80033d2 <HAL_TIM_ConfigClockSource+0x15a>
 8003318:	2b10      	cmp	r3, #16
 800331a:	d05a      	beq.n	80033d2 <HAL_TIM_ConfigClockSource+0x15a>
 800331c:	e062      	b.n	80033e4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6818      	ldr	r0, [r3, #0]
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	6899      	ldr	r1, [r3, #8]
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	685a      	ldr	r2, [r3, #4]
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	68db      	ldr	r3, [r3, #12]
 800332e:	f000 faf1 	bl	8003914 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	689b      	ldr	r3, [r3, #8]
 8003338:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800333a:	68bb      	ldr	r3, [r7, #8]
 800333c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003340:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	68ba      	ldr	r2, [r7, #8]
 8003348:	609a      	str	r2, [r3, #8]
      break;
 800334a:	e04f      	b.n	80033ec <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6818      	ldr	r0, [r3, #0]
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	6899      	ldr	r1, [r3, #8]
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	685a      	ldr	r2, [r3, #4]
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	68db      	ldr	r3, [r3, #12]
 800335c:	f000 fada 	bl	8003914 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	689a      	ldr	r2, [r3, #8]
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800336e:	609a      	str	r2, [r3, #8]
      break;
 8003370:	e03c      	b.n	80033ec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6818      	ldr	r0, [r3, #0]
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	6859      	ldr	r1, [r3, #4]
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	68db      	ldr	r3, [r3, #12]
 800337e:	461a      	mov	r2, r3
 8003380:	f000 fa4e 	bl	8003820 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	2150      	movs	r1, #80	; 0x50
 800338a:	4618      	mov	r0, r3
 800338c:	f000 faa7 	bl	80038de <TIM_ITRx_SetConfig>
      break;
 8003390:	e02c      	b.n	80033ec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6818      	ldr	r0, [r3, #0]
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	6859      	ldr	r1, [r3, #4]
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	68db      	ldr	r3, [r3, #12]
 800339e:	461a      	mov	r2, r3
 80033a0:	f000 fa6d 	bl	800387e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	2160      	movs	r1, #96	; 0x60
 80033aa:	4618      	mov	r0, r3
 80033ac:	f000 fa97 	bl	80038de <TIM_ITRx_SetConfig>
      break;
 80033b0:	e01c      	b.n	80033ec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6818      	ldr	r0, [r3, #0]
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	6859      	ldr	r1, [r3, #4]
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	68db      	ldr	r3, [r3, #12]
 80033be:	461a      	mov	r2, r3
 80033c0:	f000 fa2e 	bl	8003820 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	2140      	movs	r1, #64	; 0x40
 80033ca:	4618      	mov	r0, r3
 80033cc:	f000 fa87 	bl	80038de <TIM_ITRx_SetConfig>
      break;
 80033d0:	e00c      	b.n	80033ec <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681a      	ldr	r2, [r3, #0]
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	4619      	mov	r1, r3
 80033dc:	4610      	mov	r0, r2
 80033de:	f000 fa7e 	bl	80038de <TIM_ITRx_SetConfig>
      break;
 80033e2:	e003      	b.n	80033ec <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80033e4:	2301      	movs	r3, #1
 80033e6:	73fb      	strb	r3, [r7, #15]
      break;
 80033e8:	e000      	b.n	80033ec <HAL_TIM_ConfigClockSource+0x174>
      break;
 80033ea:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2201      	movs	r2, #1
 80033f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2200      	movs	r2, #0
 80033f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80033fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80033fe:	4618      	mov	r0, r3
 8003400:	3710      	adds	r7, #16
 8003402:	46bd      	mov	sp, r7
 8003404:	bd80      	pop	{r7, pc}
	...

08003408 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003408:	b480      	push	{r7}
 800340a:	b085      	sub	sp, #20
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
 8003410:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	4a34      	ldr	r2, [pc, #208]	; (80034ec <TIM_Base_SetConfig+0xe4>)
 800341c:	4293      	cmp	r3, r2
 800341e:	d00f      	beq.n	8003440 <TIM_Base_SetConfig+0x38>
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003426:	d00b      	beq.n	8003440 <TIM_Base_SetConfig+0x38>
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	4a31      	ldr	r2, [pc, #196]	; (80034f0 <TIM_Base_SetConfig+0xe8>)
 800342c:	4293      	cmp	r3, r2
 800342e:	d007      	beq.n	8003440 <TIM_Base_SetConfig+0x38>
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	4a30      	ldr	r2, [pc, #192]	; (80034f4 <TIM_Base_SetConfig+0xec>)
 8003434:	4293      	cmp	r3, r2
 8003436:	d003      	beq.n	8003440 <TIM_Base_SetConfig+0x38>
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	4a2f      	ldr	r2, [pc, #188]	; (80034f8 <TIM_Base_SetConfig+0xf0>)
 800343c:	4293      	cmp	r3, r2
 800343e:	d108      	bne.n	8003452 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003446:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	685b      	ldr	r3, [r3, #4]
 800344c:	68fa      	ldr	r2, [r7, #12]
 800344e:	4313      	orrs	r3, r2
 8003450:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	4a25      	ldr	r2, [pc, #148]	; (80034ec <TIM_Base_SetConfig+0xe4>)
 8003456:	4293      	cmp	r3, r2
 8003458:	d01b      	beq.n	8003492 <TIM_Base_SetConfig+0x8a>
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003460:	d017      	beq.n	8003492 <TIM_Base_SetConfig+0x8a>
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	4a22      	ldr	r2, [pc, #136]	; (80034f0 <TIM_Base_SetConfig+0xe8>)
 8003466:	4293      	cmp	r3, r2
 8003468:	d013      	beq.n	8003492 <TIM_Base_SetConfig+0x8a>
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	4a21      	ldr	r2, [pc, #132]	; (80034f4 <TIM_Base_SetConfig+0xec>)
 800346e:	4293      	cmp	r3, r2
 8003470:	d00f      	beq.n	8003492 <TIM_Base_SetConfig+0x8a>
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	4a20      	ldr	r2, [pc, #128]	; (80034f8 <TIM_Base_SetConfig+0xf0>)
 8003476:	4293      	cmp	r3, r2
 8003478:	d00b      	beq.n	8003492 <TIM_Base_SetConfig+0x8a>
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	4a1f      	ldr	r2, [pc, #124]	; (80034fc <TIM_Base_SetConfig+0xf4>)
 800347e:	4293      	cmp	r3, r2
 8003480:	d007      	beq.n	8003492 <TIM_Base_SetConfig+0x8a>
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	4a1e      	ldr	r2, [pc, #120]	; (8003500 <TIM_Base_SetConfig+0xf8>)
 8003486:	4293      	cmp	r3, r2
 8003488:	d003      	beq.n	8003492 <TIM_Base_SetConfig+0x8a>
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	4a1d      	ldr	r2, [pc, #116]	; (8003504 <TIM_Base_SetConfig+0xfc>)
 800348e:	4293      	cmp	r3, r2
 8003490:	d108      	bne.n	80034a4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003498:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	68db      	ldr	r3, [r3, #12]
 800349e:	68fa      	ldr	r2, [r7, #12]
 80034a0:	4313      	orrs	r3, r2
 80034a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80034aa:	683b      	ldr	r3, [r7, #0]
 80034ac:	695b      	ldr	r3, [r3, #20]
 80034ae:	4313      	orrs	r3, r2
 80034b0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	68fa      	ldr	r2, [r7, #12]
 80034b6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	689a      	ldr	r2, [r3, #8]
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	681a      	ldr	r2, [r3, #0]
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	4a08      	ldr	r2, [pc, #32]	; (80034ec <TIM_Base_SetConfig+0xe4>)
 80034cc:	4293      	cmp	r3, r2
 80034ce:	d103      	bne.n	80034d8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	691a      	ldr	r2, [r3, #16]
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2201      	movs	r2, #1
 80034dc:	615a      	str	r2, [r3, #20]
}
 80034de:	bf00      	nop
 80034e0:	3714      	adds	r7, #20
 80034e2:	46bd      	mov	sp, r7
 80034e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e8:	4770      	bx	lr
 80034ea:	bf00      	nop
 80034ec:	40010000 	.word	0x40010000
 80034f0:	40000400 	.word	0x40000400
 80034f4:	40000800 	.word	0x40000800
 80034f8:	40000c00 	.word	0x40000c00
 80034fc:	40014000 	.word	0x40014000
 8003500:	40014400 	.word	0x40014400
 8003504:	40014800 	.word	0x40014800

08003508 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003508:	b480      	push	{r7}
 800350a:	b087      	sub	sp, #28
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
 8003510:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6a1b      	ldr	r3, [r3, #32]
 8003516:	f023 0201 	bic.w	r2, r3, #1
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6a1b      	ldr	r3, [r3, #32]
 8003522:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	685b      	ldr	r3, [r3, #4]
 8003528:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	699b      	ldr	r3, [r3, #24]
 800352e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003536:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	f023 0303 	bic.w	r3, r3, #3
 800353e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	68fa      	ldr	r2, [r7, #12]
 8003546:	4313      	orrs	r3, r2
 8003548:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800354a:	697b      	ldr	r3, [r7, #20]
 800354c:	f023 0302 	bic.w	r3, r3, #2
 8003550:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	689b      	ldr	r3, [r3, #8]
 8003556:	697a      	ldr	r2, [r7, #20]
 8003558:	4313      	orrs	r3, r2
 800355a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	4a1c      	ldr	r2, [pc, #112]	; (80035d0 <TIM_OC1_SetConfig+0xc8>)
 8003560:	4293      	cmp	r3, r2
 8003562:	d10c      	bne.n	800357e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003564:	697b      	ldr	r3, [r7, #20]
 8003566:	f023 0308 	bic.w	r3, r3, #8
 800356a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	68db      	ldr	r3, [r3, #12]
 8003570:	697a      	ldr	r2, [r7, #20]
 8003572:	4313      	orrs	r3, r2
 8003574:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003576:	697b      	ldr	r3, [r7, #20]
 8003578:	f023 0304 	bic.w	r3, r3, #4
 800357c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	4a13      	ldr	r2, [pc, #76]	; (80035d0 <TIM_OC1_SetConfig+0xc8>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d111      	bne.n	80035aa <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003586:	693b      	ldr	r3, [r7, #16]
 8003588:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800358c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800358e:	693b      	ldr	r3, [r7, #16]
 8003590:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003594:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	695b      	ldr	r3, [r3, #20]
 800359a:	693a      	ldr	r2, [r7, #16]
 800359c:	4313      	orrs	r3, r2
 800359e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	699b      	ldr	r3, [r3, #24]
 80035a4:	693a      	ldr	r2, [r7, #16]
 80035a6:	4313      	orrs	r3, r2
 80035a8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	693a      	ldr	r2, [r7, #16]
 80035ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	68fa      	ldr	r2, [r7, #12]
 80035b4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	685a      	ldr	r2, [r3, #4]
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	697a      	ldr	r2, [r7, #20]
 80035c2:	621a      	str	r2, [r3, #32]
}
 80035c4:	bf00      	nop
 80035c6:	371c      	adds	r7, #28
 80035c8:	46bd      	mov	sp, r7
 80035ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ce:	4770      	bx	lr
 80035d0:	40010000 	.word	0x40010000

080035d4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80035d4:	b480      	push	{r7}
 80035d6:	b087      	sub	sp, #28
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
 80035dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6a1b      	ldr	r3, [r3, #32]
 80035e2:	f023 0210 	bic.w	r2, r3, #16
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6a1b      	ldr	r3, [r3, #32]
 80035ee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	685b      	ldr	r3, [r3, #4]
 80035f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	699b      	ldr	r3, [r3, #24]
 80035fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003602:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800360a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	021b      	lsls	r3, r3, #8
 8003612:	68fa      	ldr	r2, [r7, #12]
 8003614:	4313      	orrs	r3, r2
 8003616:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003618:	697b      	ldr	r3, [r7, #20]
 800361a:	f023 0320 	bic.w	r3, r3, #32
 800361e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	689b      	ldr	r3, [r3, #8]
 8003624:	011b      	lsls	r3, r3, #4
 8003626:	697a      	ldr	r2, [r7, #20]
 8003628:	4313      	orrs	r3, r2
 800362a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	4a1e      	ldr	r2, [pc, #120]	; (80036a8 <TIM_OC2_SetConfig+0xd4>)
 8003630:	4293      	cmp	r3, r2
 8003632:	d10d      	bne.n	8003650 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003634:	697b      	ldr	r3, [r7, #20]
 8003636:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800363a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	68db      	ldr	r3, [r3, #12]
 8003640:	011b      	lsls	r3, r3, #4
 8003642:	697a      	ldr	r2, [r7, #20]
 8003644:	4313      	orrs	r3, r2
 8003646:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003648:	697b      	ldr	r3, [r7, #20]
 800364a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800364e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	4a15      	ldr	r2, [pc, #84]	; (80036a8 <TIM_OC2_SetConfig+0xd4>)
 8003654:	4293      	cmp	r3, r2
 8003656:	d113      	bne.n	8003680 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003658:	693b      	ldr	r3, [r7, #16]
 800365a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800365e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003660:	693b      	ldr	r3, [r7, #16]
 8003662:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003666:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	695b      	ldr	r3, [r3, #20]
 800366c:	009b      	lsls	r3, r3, #2
 800366e:	693a      	ldr	r2, [r7, #16]
 8003670:	4313      	orrs	r3, r2
 8003672:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	699b      	ldr	r3, [r3, #24]
 8003678:	009b      	lsls	r3, r3, #2
 800367a:	693a      	ldr	r2, [r7, #16]
 800367c:	4313      	orrs	r3, r2
 800367e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	693a      	ldr	r2, [r7, #16]
 8003684:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	68fa      	ldr	r2, [r7, #12]
 800368a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	685a      	ldr	r2, [r3, #4]
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	697a      	ldr	r2, [r7, #20]
 8003698:	621a      	str	r2, [r3, #32]
}
 800369a:	bf00      	nop
 800369c:	371c      	adds	r7, #28
 800369e:	46bd      	mov	sp, r7
 80036a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a4:	4770      	bx	lr
 80036a6:	bf00      	nop
 80036a8:	40010000 	.word	0x40010000

080036ac <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80036ac:	b480      	push	{r7}
 80036ae:	b087      	sub	sp, #28
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
 80036b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6a1b      	ldr	r3, [r3, #32]
 80036ba:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6a1b      	ldr	r3, [r3, #32]
 80036c6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	685b      	ldr	r3, [r3, #4]
 80036cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	69db      	ldr	r3, [r3, #28]
 80036d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	f023 0303 	bic.w	r3, r3, #3
 80036e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	68fa      	ldr	r2, [r7, #12]
 80036ea:	4313      	orrs	r3, r2
 80036ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80036ee:	697b      	ldr	r3, [r7, #20]
 80036f0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80036f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80036f6:	683b      	ldr	r3, [r7, #0]
 80036f8:	689b      	ldr	r3, [r3, #8]
 80036fa:	021b      	lsls	r3, r3, #8
 80036fc:	697a      	ldr	r2, [r7, #20]
 80036fe:	4313      	orrs	r3, r2
 8003700:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	4a1d      	ldr	r2, [pc, #116]	; (800377c <TIM_OC3_SetConfig+0xd0>)
 8003706:	4293      	cmp	r3, r2
 8003708:	d10d      	bne.n	8003726 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800370a:	697b      	ldr	r3, [r7, #20]
 800370c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003710:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003712:	683b      	ldr	r3, [r7, #0]
 8003714:	68db      	ldr	r3, [r3, #12]
 8003716:	021b      	lsls	r3, r3, #8
 8003718:	697a      	ldr	r2, [r7, #20]
 800371a:	4313      	orrs	r3, r2
 800371c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800371e:	697b      	ldr	r3, [r7, #20]
 8003720:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003724:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	4a14      	ldr	r2, [pc, #80]	; (800377c <TIM_OC3_SetConfig+0xd0>)
 800372a:	4293      	cmp	r3, r2
 800372c:	d113      	bne.n	8003756 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800372e:	693b      	ldr	r3, [r7, #16]
 8003730:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003734:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003736:	693b      	ldr	r3, [r7, #16]
 8003738:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800373c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800373e:	683b      	ldr	r3, [r7, #0]
 8003740:	695b      	ldr	r3, [r3, #20]
 8003742:	011b      	lsls	r3, r3, #4
 8003744:	693a      	ldr	r2, [r7, #16]
 8003746:	4313      	orrs	r3, r2
 8003748:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	699b      	ldr	r3, [r3, #24]
 800374e:	011b      	lsls	r3, r3, #4
 8003750:	693a      	ldr	r2, [r7, #16]
 8003752:	4313      	orrs	r3, r2
 8003754:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	693a      	ldr	r2, [r7, #16]
 800375a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	68fa      	ldr	r2, [r7, #12]
 8003760:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003762:	683b      	ldr	r3, [r7, #0]
 8003764:	685a      	ldr	r2, [r3, #4]
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	697a      	ldr	r2, [r7, #20]
 800376e:	621a      	str	r2, [r3, #32]
}
 8003770:	bf00      	nop
 8003772:	371c      	adds	r7, #28
 8003774:	46bd      	mov	sp, r7
 8003776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377a:	4770      	bx	lr
 800377c:	40010000 	.word	0x40010000

08003780 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003780:	b480      	push	{r7}
 8003782:	b087      	sub	sp, #28
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
 8003788:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6a1b      	ldr	r3, [r3, #32]
 800378e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6a1b      	ldr	r3, [r3, #32]
 800379a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	685b      	ldr	r3, [r3, #4]
 80037a0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	69db      	ldr	r3, [r3, #28]
 80037a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80037ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037b6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	021b      	lsls	r3, r3, #8
 80037be:	68fa      	ldr	r2, [r7, #12]
 80037c0:	4313      	orrs	r3, r2
 80037c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80037c4:	693b      	ldr	r3, [r7, #16]
 80037c6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80037ca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	689b      	ldr	r3, [r3, #8]
 80037d0:	031b      	lsls	r3, r3, #12
 80037d2:	693a      	ldr	r2, [r7, #16]
 80037d4:	4313      	orrs	r3, r2
 80037d6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	4a10      	ldr	r2, [pc, #64]	; (800381c <TIM_OC4_SetConfig+0x9c>)
 80037dc:	4293      	cmp	r3, r2
 80037de:	d109      	bne.n	80037f4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80037e0:	697b      	ldr	r3, [r7, #20]
 80037e2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80037e6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	695b      	ldr	r3, [r3, #20]
 80037ec:	019b      	lsls	r3, r3, #6
 80037ee:	697a      	ldr	r2, [r7, #20]
 80037f0:	4313      	orrs	r3, r2
 80037f2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	697a      	ldr	r2, [r7, #20]
 80037f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	68fa      	ldr	r2, [r7, #12]
 80037fe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	685a      	ldr	r2, [r3, #4]
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	693a      	ldr	r2, [r7, #16]
 800380c:	621a      	str	r2, [r3, #32]
}
 800380e:	bf00      	nop
 8003810:	371c      	adds	r7, #28
 8003812:	46bd      	mov	sp, r7
 8003814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003818:	4770      	bx	lr
 800381a:	bf00      	nop
 800381c:	40010000 	.word	0x40010000

08003820 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003820:	b480      	push	{r7}
 8003822:	b087      	sub	sp, #28
 8003824:	af00      	add	r7, sp, #0
 8003826:	60f8      	str	r0, [r7, #12]
 8003828:	60b9      	str	r1, [r7, #8]
 800382a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	6a1b      	ldr	r3, [r3, #32]
 8003830:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	6a1b      	ldr	r3, [r3, #32]
 8003836:	f023 0201 	bic.w	r2, r3, #1
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	699b      	ldr	r3, [r3, #24]
 8003842:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003844:	693b      	ldr	r3, [r7, #16]
 8003846:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800384a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	011b      	lsls	r3, r3, #4
 8003850:	693a      	ldr	r2, [r7, #16]
 8003852:	4313      	orrs	r3, r2
 8003854:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003856:	697b      	ldr	r3, [r7, #20]
 8003858:	f023 030a 	bic.w	r3, r3, #10
 800385c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800385e:	697a      	ldr	r2, [r7, #20]
 8003860:	68bb      	ldr	r3, [r7, #8]
 8003862:	4313      	orrs	r3, r2
 8003864:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	693a      	ldr	r2, [r7, #16]
 800386a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	697a      	ldr	r2, [r7, #20]
 8003870:	621a      	str	r2, [r3, #32]
}
 8003872:	bf00      	nop
 8003874:	371c      	adds	r7, #28
 8003876:	46bd      	mov	sp, r7
 8003878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387c:	4770      	bx	lr

0800387e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800387e:	b480      	push	{r7}
 8003880:	b087      	sub	sp, #28
 8003882:	af00      	add	r7, sp, #0
 8003884:	60f8      	str	r0, [r7, #12]
 8003886:	60b9      	str	r1, [r7, #8]
 8003888:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	6a1b      	ldr	r3, [r3, #32]
 800388e:	f023 0210 	bic.w	r2, r3, #16
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	699b      	ldr	r3, [r3, #24]
 800389a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	6a1b      	ldr	r3, [r3, #32]
 80038a0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80038a2:	697b      	ldr	r3, [r7, #20]
 80038a4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80038a8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	031b      	lsls	r3, r3, #12
 80038ae:	697a      	ldr	r2, [r7, #20]
 80038b0:	4313      	orrs	r3, r2
 80038b2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80038b4:	693b      	ldr	r3, [r7, #16]
 80038b6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80038ba:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80038bc:	68bb      	ldr	r3, [r7, #8]
 80038be:	011b      	lsls	r3, r3, #4
 80038c0:	693a      	ldr	r2, [r7, #16]
 80038c2:	4313      	orrs	r3, r2
 80038c4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	697a      	ldr	r2, [r7, #20]
 80038ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	693a      	ldr	r2, [r7, #16]
 80038d0:	621a      	str	r2, [r3, #32]
}
 80038d2:	bf00      	nop
 80038d4:	371c      	adds	r7, #28
 80038d6:	46bd      	mov	sp, r7
 80038d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038dc:	4770      	bx	lr

080038de <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80038de:	b480      	push	{r7}
 80038e0:	b085      	sub	sp, #20
 80038e2:	af00      	add	r7, sp, #0
 80038e4:	6078      	str	r0, [r7, #4]
 80038e6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	689b      	ldr	r3, [r3, #8]
 80038ec:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038f4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80038f6:	683a      	ldr	r2, [r7, #0]
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	4313      	orrs	r3, r2
 80038fc:	f043 0307 	orr.w	r3, r3, #7
 8003900:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	68fa      	ldr	r2, [r7, #12]
 8003906:	609a      	str	r2, [r3, #8]
}
 8003908:	bf00      	nop
 800390a:	3714      	adds	r7, #20
 800390c:	46bd      	mov	sp, r7
 800390e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003912:	4770      	bx	lr

08003914 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003914:	b480      	push	{r7}
 8003916:	b087      	sub	sp, #28
 8003918:	af00      	add	r7, sp, #0
 800391a:	60f8      	str	r0, [r7, #12]
 800391c:	60b9      	str	r1, [r7, #8]
 800391e:	607a      	str	r2, [r7, #4]
 8003920:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	689b      	ldr	r3, [r3, #8]
 8003926:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003928:	697b      	ldr	r3, [r7, #20]
 800392a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800392e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	021a      	lsls	r2, r3, #8
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	431a      	orrs	r2, r3
 8003938:	68bb      	ldr	r3, [r7, #8]
 800393a:	4313      	orrs	r3, r2
 800393c:	697a      	ldr	r2, [r7, #20]
 800393e:	4313      	orrs	r3, r2
 8003940:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	697a      	ldr	r2, [r7, #20]
 8003946:	609a      	str	r2, [r3, #8]
}
 8003948:	bf00      	nop
 800394a:	371c      	adds	r7, #28
 800394c:	46bd      	mov	sp, r7
 800394e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003952:	4770      	bx	lr

08003954 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003954:	b480      	push	{r7}
 8003956:	b087      	sub	sp, #28
 8003958:	af00      	add	r7, sp, #0
 800395a:	60f8      	str	r0, [r7, #12]
 800395c:	60b9      	str	r1, [r7, #8]
 800395e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003960:	68bb      	ldr	r3, [r7, #8]
 8003962:	f003 031f 	and.w	r3, r3, #31
 8003966:	2201      	movs	r2, #1
 8003968:	fa02 f303 	lsl.w	r3, r2, r3
 800396c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	6a1a      	ldr	r2, [r3, #32]
 8003972:	697b      	ldr	r3, [r7, #20]
 8003974:	43db      	mvns	r3, r3
 8003976:	401a      	ands	r2, r3
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	6a1a      	ldr	r2, [r3, #32]
 8003980:	68bb      	ldr	r3, [r7, #8]
 8003982:	f003 031f 	and.w	r3, r3, #31
 8003986:	6879      	ldr	r1, [r7, #4]
 8003988:	fa01 f303 	lsl.w	r3, r1, r3
 800398c:	431a      	orrs	r2, r3
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	621a      	str	r2, [r3, #32]
}
 8003992:	bf00      	nop
 8003994:	371c      	adds	r7, #28
 8003996:	46bd      	mov	sp, r7
 8003998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399c:	4770      	bx	lr
	...

080039a0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80039a0:	b480      	push	{r7}
 80039a2:	b085      	sub	sp, #20
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
 80039a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80039b0:	2b01      	cmp	r3, #1
 80039b2:	d101      	bne.n	80039b8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80039b4:	2302      	movs	r3, #2
 80039b6:	e050      	b.n	8003a5a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2201      	movs	r2, #1
 80039bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2202      	movs	r2, #2
 80039c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	685b      	ldr	r3, [r3, #4]
 80039ce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	689b      	ldr	r3, [r3, #8]
 80039d6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039de:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80039e0:	683b      	ldr	r3, [r7, #0]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	68fa      	ldr	r2, [r7, #12]
 80039e6:	4313      	orrs	r3, r2
 80039e8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	68fa      	ldr	r2, [r7, #12]
 80039f0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	4a1c      	ldr	r2, [pc, #112]	; (8003a68 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80039f8:	4293      	cmp	r3, r2
 80039fa:	d018      	beq.n	8003a2e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a04:	d013      	beq.n	8003a2e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	4a18      	ldr	r2, [pc, #96]	; (8003a6c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003a0c:	4293      	cmp	r3, r2
 8003a0e:	d00e      	beq.n	8003a2e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	4a16      	ldr	r2, [pc, #88]	; (8003a70 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d009      	beq.n	8003a2e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	4a15      	ldr	r2, [pc, #84]	; (8003a74 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003a20:	4293      	cmp	r3, r2
 8003a22:	d004      	beq.n	8003a2e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	4a13      	ldr	r2, [pc, #76]	; (8003a78 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	d10c      	bne.n	8003a48 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003a2e:	68bb      	ldr	r3, [r7, #8]
 8003a30:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003a34:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003a36:	683b      	ldr	r3, [r7, #0]
 8003a38:	685b      	ldr	r3, [r3, #4]
 8003a3a:	68ba      	ldr	r2, [r7, #8]
 8003a3c:	4313      	orrs	r3, r2
 8003a3e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	68ba      	ldr	r2, [r7, #8]
 8003a46:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2201      	movs	r2, #1
 8003a4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2200      	movs	r2, #0
 8003a54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003a58:	2300      	movs	r3, #0
}
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	3714      	adds	r7, #20
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a64:	4770      	bx	lr
 8003a66:	bf00      	nop
 8003a68:	40010000 	.word	0x40010000
 8003a6c:	40000400 	.word	0x40000400
 8003a70:	40000800 	.word	0x40000800
 8003a74:	40000c00 	.word	0x40000c00
 8003a78:	40014000 	.word	0x40014000

08003a7c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b082      	sub	sp, #8
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d101      	bne.n	8003a8e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003a8a:	2301      	movs	r3, #1
 8003a8c:	e03f      	b.n	8003b0e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a94:	b2db      	uxtb	r3, r3
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d106      	bne.n	8003aa8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003aa2:	6878      	ldr	r0, [r7, #4]
 8003aa4:	f7fd fda8 	bl	80015f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2224      	movs	r2, #36	; 0x24
 8003aac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	68da      	ldr	r2, [r3, #12]
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003abe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003ac0:	6878      	ldr	r0, [r7, #4]
 8003ac2:	f000 f829 	bl	8003b18 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	691a      	ldr	r2, [r3, #16]
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003ad4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	695a      	ldr	r2, [r3, #20]
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003ae4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	68da      	ldr	r2, [r3, #12]
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003af4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	2200      	movs	r2, #0
 8003afa:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2220      	movs	r2, #32
 8003b00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2220      	movs	r2, #32
 8003b08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003b0c:	2300      	movs	r3, #0
}
 8003b0e:	4618      	mov	r0, r3
 8003b10:	3708      	adds	r7, #8
 8003b12:	46bd      	mov	sp, r7
 8003b14:	bd80      	pop	{r7, pc}
	...

08003b18 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003b18:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003b1c:	b0c0      	sub	sp, #256	; 0x100
 8003b1e:	af00      	add	r7, sp, #0
 8003b20:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003b24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	691b      	ldr	r3, [r3, #16]
 8003b2c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003b30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b34:	68d9      	ldr	r1, [r3, #12]
 8003b36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b3a:	681a      	ldr	r2, [r3, #0]
 8003b3c:	ea40 0301 	orr.w	r3, r0, r1
 8003b40:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003b42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b46:	689a      	ldr	r2, [r3, #8]
 8003b48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b4c:	691b      	ldr	r3, [r3, #16]
 8003b4e:	431a      	orrs	r2, r3
 8003b50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b54:	695b      	ldr	r3, [r3, #20]
 8003b56:	431a      	orrs	r2, r3
 8003b58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b5c:	69db      	ldr	r3, [r3, #28]
 8003b5e:	4313      	orrs	r3, r2
 8003b60:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003b64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	68db      	ldr	r3, [r3, #12]
 8003b6c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003b70:	f021 010c 	bic.w	r1, r1, #12
 8003b74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b78:	681a      	ldr	r2, [r3, #0]
 8003b7a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003b7e:	430b      	orrs	r3, r1
 8003b80:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003b82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	695b      	ldr	r3, [r3, #20]
 8003b8a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003b8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b92:	6999      	ldr	r1, [r3, #24]
 8003b94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b98:	681a      	ldr	r2, [r3, #0]
 8003b9a:	ea40 0301 	orr.w	r3, r0, r1
 8003b9e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003ba0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ba4:	681a      	ldr	r2, [r3, #0]
 8003ba6:	4b8f      	ldr	r3, [pc, #572]	; (8003de4 <UART_SetConfig+0x2cc>)
 8003ba8:	429a      	cmp	r2, r3
 8003baa:	d005      	beq.n	8003bb8 <UART_SetConfig+0xa0>
 8003bac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bb0:	681a      	ldr	r2, [r3, #0]
 8003bb2:	4b8d      	ldr	r3, [pc, #564]	; (8003de8 <UART_SetConfig+0x2d0>)
 8003bb4:	429a      	cmp	r2, r3
 8003bb6:	d104      	bne.n	8003bc2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003bb8:	f7ff f930 	bl	8002e1c <HAL_RCC_GetPCLK2Freq>
 8003bbc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003bc0:	e003      	b.n	8003bca <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003bc2:	f7ff f917 	bl	8002df4 <HAL_RCC_GetPCLK1Freq>
 8003bc6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003bca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bce:	69db      	ldr	r3, [r3, #28]
 8003bd0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003bd4:	f040 810c 	bne.w	8003df0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003bd8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003bdc:	2200      	movs	r2, #0
 8003bde:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003be2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003be6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003bea:	4622      	mov	r2, r4
 8003bec:	462b      	mov	r3, r5
 8003bee:	1891      	adds	r1, r2, r2
 8003bf0:	65b9      	str	r1, [r7, #88]	; 0x58
 8003bf2:	415b      	adcs	r3, r3
 8003bf4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003bf6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003bfa:	4621      	mov	r1, r4
 8003bfc:	eb12 0801 	adds.w	r8, r2, r1
 8003c00:	4629      	mov	r1, r5
 8003c02:	eb43 0901 	adc.w	r9, r3, r1
 8003c06:	f04f 0200 	mov.w	r2, #0
 8003c0a:	f04f 0300 	mov.w	r3, #0
 8003c0e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003c12:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003c16:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003c1a:	4690      	mov	r8, r2
 8003c1c:	4699      	mov	r9, r3
 8003c1e:	4623      	mov	r3, r4
 8003c20:	eb18 0303 	adds.w	r3, r8, r3
 8003c24:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003c28:	462b      	mov	r3, r5
 8003c2a:	eb49 0303 	adc.w	r3, r9, r3
 8003c2e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003c32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c36:	685b      	ldr	r3, [r3, #4]
 8003c38:	2200      	movs	r2, #0
 8003c3a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003c3e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003c42:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003c46:	460b      	mov	r3, r1
 8003c48:	18db      	adds	r3, r3, r3
 8003c4a:	653b      	str	r3, [r7, #80]	; 0x50
 8003c4c:	4613      	mov	r3, r2
 8003c4e:	eb42 0303 	adc.w	r3, r2, r3
 8003c52:	657b      	str	r3, [r7, #84]	; 0x54
 8003c54:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003c58:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003c5c:	f7fc faba 	bl	80001d4 <__aeabi_uldivmod>
 8003c60:	4602      	mov	r2, r0
 8003c62:	460b      	mov	r3, r1
 8003c64:	4b61      	ldr	r3, [pc, #388]	; (8003dec <UART_SetConfig+0x2d4>)
 8003c66:	fba3 2302 	umull	r2, r3, r3, r2
 8003c6a:	095b      	lsrs	r3, r3, #5
 8003c6c:	011c      	lsls	r4, r3, #4
 8003c6e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003c72:	2200      	movs	r2, #0
 8003c74:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003c78:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003c7c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003c80:	4642      	mov	r2, r8
 8003c82:	464b      	mov	r3, r9
 8003c84:	1891      	adds	r1, r2, r2
 8003c86:	64b9      	str	r1, [r7, #72]	; 0x48
 8003c88:	415b      	adcs	r3, r3
 8003c8a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003c8c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003c90:	4641      	mov	r1, r8
 8003c92:	eb12 0a01 	adds.w	sl, r2, r1
 8003c96:	4649      	mov	r1, r9
 8003c98:	eb43 0b01 	adc.w	fp, r3, r1
 8003c9c:	f04f 0200 	mov.w	r2, #0
 8003ca0:	f04f 0300 	mov.w	r3, #0
 8003ca4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003ca8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003cac:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003cb0:	4692      	mov	sl, r2
 8003cb2:	469b      	mov	fp, r3
 8003cb4:	4643      	mov	r3, r8
 8003cb6:	eb1a 0303 	adds.w	r3, sl, r3
 8003cba:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003cbe:	464b      	mov	r3, r9
 8003cc0:	eb4b 0303 	adc.w	r3, fp, r3
 8003cc4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003cc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ccc:	685b      	ldr	r3, [r3, #4]
 8003cce:	2200      	movs	r2, #0
 8003cd0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003cd4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003cd8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003cdc:	460b      	mov	r3, r1
 8003cde:	18db      	adds	r3, r3, r3
 8003ce0:	643b      	str	r3, [r7, #64]	; 0x40
 8003ce2:	4613      	mov	r3, r2
 8003ce4:	eb42 0303 	adc.w	r3, r2, r3
 8003ce8:	647b      	str	r3, [r7, #68]	; 0x44
 8003cea:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003cee:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003cf2:	f7fc fa6f 	bl	80001d4 <__aeabi_uldivmod>
 8003cf6:	4602      	mov	r2, r0
 8003cf8:	460b      	mov	r3, r1
 8003cfa:	4611      	mov	r1, r2
 8003cfc:	4b3b      	ldr	r3, [pc, #236]	; (8003dec <UART_SetConfig+0x2d4>)
 8003cfe:	fba3 2301 	umull	r2, r3, r3, r1
 8003d02:	095b      	lsrs	r3, r3, #5
 8003d04:	2264      	movs	r2, #100	; 0x64
 8003d06:	fb02 f303 	mul.w	r3, r2, r3
 8003d0a:	1acb      	subs	r3, r1, r3
 8003d0c:	00db      	lsls	r3, r3, #3
 8003d0e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003d12:	4b36      	ldr	r3, [pc, #216]	; (8003dec <UART_SetConfig+0x2d4>)
 8003d14:	fba3 2302 	umull	r2, r3, r3, r2
 8003d18:	095b      	lsrs	r3, r3, #5
 8003d1a:	005b      	lsls	r3, r3, #1
 8003d1c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003d20:	441c      	add	r4, r3
 8003d22:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003d26:	2200      	movs	r2, #0
 8003d28:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003d2c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003d30:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003d34:	4642      	mov	r2, r8
 8003d36:	464b      	mov	r3, r9
 8003d38:	1891      	adds	r1, r2, r2
 8003d3a:	63b9      	str	r1, [r7, #56]	; 0x38
 8003d3c:	415b      	adcs	r3, r3
 8003d3e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003d40:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003d44:	4641      	mov	r1, r8
 8003d46:	1851      	adds	r1, r2, r1
 8003d48:	6339      	str	r1, [r7, #48]	; 0x30
 8003d4a:	4649      	mov	r1, r9
 8003d4c:	414b      	adcs	r3, r1
 8003d4e:	637b      	str	r3, [r7, #52]	; 0x34
 8003d50:	f04f 0200 	mov.w	r2, #0
 8003d54:	f04f 0300 	mov.w	r3, #0
 8003d58:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003d5c:	4659      	mov	r1, fp
 8003d5e:	00cb      	lsls	r3, r1, #3
 8003d60:	4651      	mov	r1, sl
 8003d62:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003d66:	4651      	mov	r1, sl
 8003d68:	00ca      	lsls	r2, r1, #3
 8003d6a:	4610      	mov	r0, r2
 8003d6c:	4619      	mov	r1, r3
 8003d6e:	4603      	mov	r3, r0
 8003d70:	4642      	mov	r2, r8
 8003d72:	189b      	adds	r3, r3, r2
 8003d74:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003d78:	464b      	mov	r3, r9
 8003d7a:	460a      	mov	r2, r1
 8003d7c:	eb42 0303 	adc.w	r3, r2, r3
 8003d80:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003d84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d88:	685b      	ldr	r3, [r3, #4]
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003d90:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003d94:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003d98:	460b      	mov	r3, r1
 8003d9a:	18db      	adds	r3, r3, r3
 8003d9c:	62bb      	str	r3, [r7, #40]	; 0x28
 8003d9e:	4613      	mov	r3, r2
 8003da0:	eb42 0303 	adc.w	r3, r2, r3
 8003da4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003da6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003daa:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003dae:	f7fc fa11 	bl	80001d4 <__aeabi_uldivmod>
 8003db2:	4602      	mov	r2, r0
 8003db4:	460b      	mov	r3, r1
 8003db6:	4b0d      	ldr	r3, [pc, #52]	; (8003dec <UART_SetConfig+0x2d4>)
 8003db8:	fba3 1302 	umull	r1, r3, r3, r2
 8003dbc:	095b      	lsrs	r3, r3, #5
 8003dbe:	2164      	movs	r1, #100	; 0x64
 8003dc0:	fb01 f303 	mul.w	r3, r1, r3
 8003dc4:	1ad3      	subs	r3, r2, r3
 8003dc6:	00db      	lsls	r3, r3, #3
 8003dc8:	3332      	adds	r3, #50	; 0x32
 8003dca:	4a08      	ldr	r2, [pc, #32]	; (8003dec <UART_SetConfig+0x2d4>)
 8003dcc:	fba2 2303 	umull	r2, r3, r2, r3
 8003dd0:	095b      	lsrs	r3, r3, #5
 8003dd2:	f003 0207 	and.w	r2, r3, #7
 8003dd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	4422      	add	r2, r4
 8003dde:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003de0:	e106      	b.n	8003ff0 <UART_SetConfig+0x4d8>
 8003de2:	bf00      	nop
 8003de4:	40011000 	.word	0x40011000
 8003de8:	40011400 	.word	0x40011400
 8003dec:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003df0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003df4:	2200      	movs	r2, #0
 8003df6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003dfa:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003dfe:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003e02:	4642      	mov	r2, r8
 8003e04:	464b      	mov	r3, r9
 8003e06:	1891      	adds	r1, r2, r2
 8003e08:	6239      	str	r1, [r7, #32]
 8003e0a:	415b      	adcs	r3, r3
 8003e0c:	627b      	str	r3, [r7, #36]	; 0x24
 8003e0e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003e12:	4641      	mov	r1, r8
 8003e14:	1854      	adds	r4, r2, r1
 8003e16:	4649      	mov	r1, r9
 8003e18:	eb43 0501 	adc.w	r5, r3, r1
 8003e1c:	f04f 0200 	mov.w	r2, #0
 8003e20:	f04f 0300 	mov.w	r3, #0
 8003e24:	00eb      	lsls	r3, r5, #3
 8003e26:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003e2a:	00e2      	lsls	r2, r4, #3
 8003e2c:	4614      	mov	r4, r2
 8003e2e:	461d      	mov	r5, r3
 8003e30:	4643      	mov	r3, r8
 8003e32:	18e3      	adds	r3, r4, r3
 8003e34:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003e38:	464b      	mov	r3, r9
 8003e3a:	eb45 0303 	adc.w	r3, r5, r3
 8003e3e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003e42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e46:	685b      	ldr	r3, [r3, #4]
 8003e48:	2200      	movs	r2, #0
 8003e4a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003e4e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003e52:	f04f 0200 	mov.w	r2, #0
 8003e56:	f04f 0300 	mov.w	r3, #0
 8003e5a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003e5e:	4629      	mov	r1, r5
 8003e60:	008b      	lsls	r3, r1, #2
 8003e62:	4621      	mov	r1, r4
 8003e64:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003e68:	4621      	mov	r1, r4
 8003e6a:	008a      	lsls	r2, r1, #2
 8003e6c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003e70:	f7fc f9b0 	bl	80001d4 <__aeabi_uldivmod>
 8003e74:	4602      	mov	r2, r0
 8003e76:	460b      	mov	r3, r1
 8003e78:	4b60      	ldr	r3, [pc, #384]	; (8003ffc <UART_SetConfig+0x4e4>)
 8003e7a:	fba3 2302 	umull	r2, r3, r3, r2
 8003e7e:	095b      	lsrs	r3, r3, #5
 8003e80:	011c      	lsls	r4, r3, #4
 8003e82:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003e86:	2200      	movs	r2, #0
 8003e88:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003e8c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003e90:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003e94:	4642      	mov	r2, r8
 8003e96:	464b      	mov	r3, r9
 8003e98:	1891      	adds	r1, r2, r2
 8003e9a:	61b9      	str	r1, [r7, #24]
 8003e9c:	415b      	adcs	r3, r3
 8003e9e:	61fb      	str	r3, [r7, #28]
 8003ea0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003ea4:	4641      	mov	r1, r8
 8003ea6:	1851      	adds	r1, r2, r1
 8003ea8:	6139      	str	r1, [r7, #16]
 8003eaa:	4649      	mov	r1, r9
 8003eac:	414b      	adcs	r3, r1
 8003eae:	617b      	str	r3, [r7, #20]
 8003eb0:	f04f 0200 	mov.w	r2, #0
 8003eb4:	f04f 0300 	mov.w	r3, #0
 8003eb8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003ebc:	4659      	mov	r1, fp
 8003ebe:	00cb      	lsls	r3, r1, #3
 8003ec0:	4651      	mov	r1, sl
 8003ec2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003ec6:	4651      	mov	r1, sl
 8003ec8:	00ca      	lsls	r2, r1, #3
 8003eca:	4610      	mov	r0, r2
 8003ecc:	4619      	mov	r1, r3
 8003ece:	4603      	mov	r3, r0
 8003ed0:	4642      	mov	r2, r8
 8003ed2:	189b      	adds	r3, r3, r2
 8003ed4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003ed8:	464b      	mov	r3, r9
 8003eda:	460a      	mov	r2, r1
 8003edc:	eb42 0303 	adc.w	r3, r2, r3
 8003ee0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003ee4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ee8:	685b      	ldr	r3, [r3, #4]
 8003eea:	2200      	movs	r2, #0
 8003eec:	67bb      	str	r3, [r7, #120]	; 0x78
 8003eee:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003ef0:	f04f 0200 	mov.w	r2, #0
 8003ef4:	f04f 0300 	mov.w	r3, #0
 8003ef8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003efc:	4649      	mov	r1, r9
 8003efe:	008b      	lsls	r3, r1, #2
 8003f00:	4641      	mov	r1, r8
 8003f02:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003f06:	4641      	mov	r1, r8
 8003f08:	008a      	lsls	r2, r1, #2
 8003f0a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003f0e:	f7fc f961 	bl	80001d4 <__aeabi_uldivmod>
 8003f12:	4602      	mov	r2, r0
 8003f14:	460b      	mov	r3, r1
 8003f16:	4611      	mov	r1, r2
 8003f18:	4b38      	ldr	r3, [pc, #224]	; (8003ffc <UART_SetConfig+0x4e4>)
 8003f1a:	fba3 2301 	umull	r2, r3, r3, r1
 8003f1e:	095b      	lsrs	r3, r3, #5
 8003f20:	2264      	movs	r2, #100	; 0x64
 8003f22:	fb02 f303 	mul.w	r3, r2, r3
 8003f26:	1acb      	subs	r3, r1, r3
 8003f28:	011b      	lsls	r3, r3, #4
 8003f2a:	3332      	adds	r3, #50	; 0x32
 8003f2c:	4a33      	ldr	r2, [pc, #204]	; (8003ffc <UART_SetConfig+0x4e4>)
 8003f2e:	fba2 2303 	umull	r2, r3, r2, r3
 8003f32:	095b      	lsrs	r3, r3, #5
 8003f34:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003f38:	441c      	add	r4, r3
 8003f3a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003f3e:	2200      	movs	r2, #0
 8003f40:	673b      	str	r3, [r7, #112]	; 0x70
 8003f42:	677a      	str	r2, [r7, #116]	; 0x74
 8003f44:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003f48:	4642      	mov	r2, r8
 8003f4a:	464b      	mov	r3, r9
 8003f4c:	1891      	adds	r1, r2, r2
 8003f4e:	60b9      	str	r1, [r7, #8]
 8003f50:	415b      	adcs	r3, r3
 8003f52:	60fb      	str	r3, [r7, #12]
 8003f54:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003f58:	4641      	mov	r1, r8
 8003f5a:	1851      	adds	r1, r2, r1
 8003f5c:	6039      	str	r1, [r7, #0]
 8003f5e:	4649      	mov	r1, r9
 8003f60:	414b      	adcs	r3, r1
 8003f62:	607b      	str	r3, [r7, #4]
 8003f64:	f04f 0200 	mov.w	r2, #0
 8003f68:	f04f 0300 	mov.w	r3, #0
 8003f6c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003f70:	4659      	mov	r1, fp
 8003f72:	00cb      	lsls	r3, r1, #3
 8003f74:	4651      	mov	r1, sl
 8003f76:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003f7a:	4651      	mov	r1, sl
 8003f7c:	00ca      	lsls	r2, r1, #3
 8003f7e:	4610      	mov	r0, r2
 8003f80:	4619      	mov	r1, r3
 8003f82:	4603      	mov	r3, r0
 8003f84:	4642      	mov	r2, r8
 8003f86:	189b      	adds	r3, r3, r2
 8003f88:	66bb      	str	r3, [r7, #104]	; 0x68
 8003f8a:	464b      	mov	r3, r9
 8003f8c:	460a      	mov	r2, r1
 8003f8e:	eb42 0303 	adc.w	r3, r2, r3
 8003f92:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003f94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f98:	685b      	ldr	r3, [r3, #4]
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	663b      	str	r3, [r7, #96]	; 0x60
 8003f9e:	667a      	str	r2, [r7, #100]	; 0x64
 8003fa0:	f04f 0200 	mov.w	r2, #0
 8003fa4:	f04f 0300 	mov.w	r3, #0
 8003fa8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003fac:	4649      	mov	r1, r9
 8003fae:	008b      	lsls	r3, r1, #2
 8003fb0:	4641      	mov	r1, r8
 8003fb2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003fb6:	4641      	mov	r1, r8
 8003fb8:	008a      	lsls	r2, r1, #2
 8003fba:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003fbe:	f7fc f909 	bl	80001d4 <__aeabi_uldivmod>
 8003fc2:	4602      	mov	r2, r0
 8003fc4:	460b      	mov	r3, r1
 8003fc6:	4b0d      	ldr	r3, [pc, #52]	; (8003ffc <UART_SetConfig+0x4e4>)
 8003fc8:	fba3 1302 	umull	r1, r3, r3, r2
 8003fcc:	095b      	lsrs	r3, r3, #5
 8003fce:	2164      	movs	r1, #100	; 0x64
 8003fd0:	fb01 f303 	mul.w	r3, r1, r3
 8003fd4:	1ad3      	subs	r3, r2, r3
 8003fd6:	011b      	lsls	r3, r3, #4
 8003fd8:	3332      	adds	r3, #50	; 0x32
 8003fda:	4a08      	ldr	r2, [pc, #32]	; (8003ffc <UART_SetConfig+0x4e4>)
 8003fdc:	fba2 2303 	umull	r2, r3, r2, r3
 8003fe0:	095b      	lsrs	r3, r3, #5
 8003fe2:	f003 020f 	and.w	r2, r3, #15
 8003fe6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	4422      	add	r2, r4
 8003fee:	609a      	str	r2, [r3, #8]
}
 8003ff0:	bf00      	nop
 8003ff2:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003ffc:	51eb851f 	.word	0x51eb851f

08004000 <memset>:
 8004000:	4402      	add	r2, r0
 8004002:	4603      	mov	r3, r0
 8004004:	4293      	cmp	r3, r2
 8004006:	d100      	bne.n	800400a <memset+0xa>
 8004008:	4770      	bx	lr
 800400a:	f803 1b01 	strb.w	r1, [r3], #1
 800400e:	e7f9      	b.n	8004004 <memset+0x4>

08004010 <__libc_init_array>:
 8004010:	b570      	push	{r4, r5, r6, lr}
 8004012:	4d0d      	ldr	r5, [pc, #52]	; (8004048 <__libc_init_array+0x38>)
 8004014:	4c0d      	ldr	r4, [pc, #52]	; (800404c <__libc_init_array+0x3c>)
 8004016:	1b64      	subs	r4, r4, r5
 8004018:	10a4      	asrs	r4, r4, #2
 800401a:	2600      	movs	r6, #0
 800401c:	42a6      	cmp	r6, r4
 800401e:	d109      	bne.n	8004034 <__libc_init_array+0x24>
 8004020:	4d0b      	ldr	r5, [pc, #44]	; (8004050 <__libc_init_array+0x40>)
 8004022:	4c0c      	ldr	r4, [pc, #48]	; (8004054 <__libc_init_array+0x44>)
 8004024:	f000 f818 	bl	8004058 <_init>
 8004028:	1b64      	subs	r4, r4, r5
 800402a:	10a4      	asrs	r4, r4, #2
 800402c:	2600      	movs	r6, #0
 800402e:	42a6      	cmp	r6, r4
 8004030:	d105      	bne.n	800403e <__libc_init_array+0x2e>
 8004032:	bd70      	pop	{r4, r5, r6, pc}
 8004034:	f855 3b04 	ldr.w	r3, [r5], #4
 8004038:	4798      	blx	r3
 800403a:	3601      	adds	r6, #1
 800403c:	e7ee      	b.n	800401c <__libc_init_array+0xc>
 800403e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004042:	4798      	blx	r3
 8004044:	3601      	adds	r6, #1
 8004046:	e7f2      	b.n	800402e <__libc_init_array+0x1e>
 8004048:	08004090 	.word	0x08004090
 800404c:	08004090 	.word	0x08004090
 8004050:	08004090 	.word	0x08004090
 8004054:	08004094 	.word	0x08004094

08004058 <_init>:
 8004058:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800405a:	bf00      	nop
 800405c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800405e:	bc08      	pop	{r3}
 8004060:	469e      	mov	lr, r3
 8004062:	4770      	bx	lr

08004064 <_fini>:
 8004064:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004066:	bf00      	nop
 8004068:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800406a:	bc08      	pop	{r3}
 800406c:	469e      	mov	lr, r3
 800406e:	4770      	bx	lr
